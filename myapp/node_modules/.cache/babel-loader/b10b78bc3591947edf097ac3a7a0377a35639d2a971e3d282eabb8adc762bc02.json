{"ast":null,"code":"import { NativeEventEmitter, NativeModules } from 'react-native';\nimport EventEmitter from 'react-native/Libraries/vendor/emitter/EventEmitter';\nconst NATIVE_EMITTERS = {};\nconst NATIVE_SUBSCRIPTIONS = {};\nexport const SharedEventEmitter = new EventEmitter();\nexport const getAppEventName = (module, eventName) => `${module.app.name}-${eventName}`;\nconst getNativeEmitter = (moduleName, module) => {\n  const name = `${module.app.name}-${moduleName}`;\n  const nativeModule = NativeModules[moduleName];\n  if (!NATIVE_EMITTERS[name]) {\n    NATIVE_EMITTERS[name] = new NativeEventEmitter(nativeModule);\n  }\n  return NATIVE_EMITTERS[name];\n};\n/**\n * Subscribe to a native event for js side distribution by appName\n *    React Native events are hard set at compile - cant do dynamic event names\n *    so we use a single event send it to js and js then internally can prefix it\n *    and distribute dynamically.\n *\n * @param moduleName\n * @param module\n * @param eventName\n * @private\n */\n\nconst subscribeToNativeModuleEvents = (moduleName, module, eventName) => {\n  if (!NATIVE_SUBSCRIPTIONS[eventName]) {\n    const nativeEmitter = getNativeEmitter(moduleName, module);\n    nativeEmitter.addListener(eventName, event => {\n      if (event.appName) {\n        // native event has an appName property - auto prefix and internally emit\n        SharedEventEmitter.emit(`${event.appName}-${eventName}`, event);\n      } else {\n        // standard event - no need to prefix\n        SharedEventEmitter.emit(eventName, event);\n      }\n    });\n    NATIVE_SUBSCRIPTIONS[eventName] = true;\n  }\n};\nexport const initialiseNativeModuleEventEmitter = (module, config) => {\n  const {\n    events,\n    moduleName\n  } = config;\n  if (events && events.length) {\n    for (let i = 0, len = events.length; i < len; i++) {\n      subscribeToNativeModuleEvents(moduleName, module, events[i]);\n    }\n  }\n};","map":{"version":3,"names":["NativeEventEmitter","NativeModules","EventEmitter","NATIVE_EMITTERS","NATIVE_SUBSCRIPTIONS","SharedEventEmitter","getAppEventName","module","eventName","app","name","getNativeEmitter","moduleName","nativeModule","subscribeToNativeModuleEvents","nativeEmitter","addListener","event","appName","emit","initialiseNativeModuleEventEmitter","config","events","length","i","len"],"sources":["/Users/sharusan/MeetMyCar/myapp/node_modules/react-native-firebase/dist/utils/events.js"],"sourcesContent":["import { NativeEventEmitter, NativeModules } from 'react-native';\nimport EventEmitter from 'react-native/Libraries/vendor/emitter/EventEmitter';\nconst NATIVE_EMITTERS = {};\nconst NATIVE_SUBSCRIPTIONS = {};\nexport const SharedEventEmitter = new EventEmitter();\nexport const getAppEventName = (module, eventName) => `${module.app.name}-${eventName}`;\n\nconst getNativeEmitter = (moduleName, module) => {\n  const name = `${module.app.name}-${moduleName}`;\n  const nativeModule = NativeModules[moduleName];\n\n  if (!NATIVE_EMITTERS[name]) {\n    NATIVE_EMITTERS[name] = new NativeEventEmitter(nativeModule);\n  }\n\n  return NATIVE_EMITTERS[name];\n};\n/**\n * Subscribe to a native event for js side distribution by appName\n *    React Native events are hard set at compile - cant do dynamic event names\n *    so we use a single event send it to js and js then internally can prefix it\n *    and distribute dynamically.\n *\n * @param moduleName\n * @param module\n * @param eventName\n * @private\n */\n\n\nconst subscribeToNativeModuleEvents = (moduleName, module, eventName) => {\n  if (!NATIVE_SUBSCRIPTIONS[eventName]) {\n    const nativeEmitter = getNativeEmitter(moduleName, module);\n    nativeEmitter.addListener(eventName, event => {\n      if (event.appName) {\n        // native event has an appName property - auto prefix and internally emit\n        SharedEventEmitter.emit(`${event.appName}-${eventName}`, event);\n      } else {\n        // standard event - no need to prefix\n        SharedEventEmitter.emit(eventName, event);\n      }\n    });\n    NATIVE_SUBSCRIPTIONS[eventName] = true;\n  }\n};\n\nexport const initialiseNativeModuleEventEmitter = (module, config) => {\n  const {\n    events,\n    moduleName\n  } = config;\n\n  if (events && events.length) {\n    for (let i = 0, len = events.length; i < len; i++) {\n      subscribeToNativeModuleEvents(moduleName, module, events[i]);\n    }\n  }\n};"],"mappings":"AAAA,SAASA,kBAAkB,EAAEC,aAAa,QAAQ,cAAc;AAChE,OAAOC,YAAY,MAAM,oDAAoD;AAC7E,MAAMC,eAAe,GAAG,CAAC,CAAC;AAC1B,MAAMC,oBAAoB,GAAG,CAAC,CAAC;AAC/B,OAAO,MAAMC,kBAAkB,GAAG,IAAIH,YAAY,CAAC,CAAC;AACpD,OAAO,MAAMI,eAAe,GAAGA,CAACC,MAAM,EAAEC,SAAS,KAAM,GAAED,MAAM,CAACE,GAAG,CAACC,IAAK,IAAGF,SAAU,EAAC;AAEvF,MAAMG,gBAAgB,GAAGA,CAACC,UAAU,EAAEL,MAAM,KAAK;EAC/C,MAAMG,IAAI,GAAI,GAAEH,MAAM,CAACE,GAAG,CAACC,IAAK,IAAGE,UAAW,EAAC;EAC/C,MAAMC,YAAY,GAAGZ,aAAa,CAACW,UAAU,CAAC;EAE9C,IAAI,CAACT,eAAe,CAACO,IAAI,CAAC,EAAE;IAC1BP,eAAe,CAACO,IAAI,CAAC,GAAG,IAAIV,kBAAkB,CAACa,YAAY,CAAC;EAC9D;EAEA,OAAOV,eAAe,CAACO,IAAI,CAAC;AAC9B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMI,6BAA6B,GAAGA,CAACF,UAAU,EAAEL,MAAM,EAAEC,SAAS,KAAK;EACvE,IAAI,CAACJ,oBAAoB,CAACI,SAAS,CAAC,EAAE;IACpC,MAAMO,aAAa,GAAGJ,gBAAgB,CAACC,UAAU,EAAEL,MAAM,CAAC;IAC1DQ,aAAa,CAACC,WAAW,CAACR,SAAS,EAAES,KAAK,IAAI;MAC5C,IAAIA,KAAK,CAACC,OAAO,EAAE;QACjB;QACAb,kBAAkB,CAACc,IAAI,CAAE,GAAEF,KAAK,CAACC,OAAQ,IAAGV,SAAU,EAAC,EAAES,KAAK,CAAC;MACjE,CAAC,MAAM;QACL;QACAZ,kBAAkB,CAACc,IAAI,CAACX,SAAS,EAAES,KAAK,CAAC;MAC3C;IACF,CAAC,CAAC;IACFb,oBAAoB,CAACI,SAAS,CAAC,GAAG,IAAI;EACxC;AACF,CAAC;AAED,OAAO,MAAMY,kCAAkC,GAAGA,CAACb,MAAM,EAAEc,MAAM,KAAK;EACpE,MAAM;IACJC,MAAM;IACNV;EACF,CAAC,GAAGS,MAAM;EAEV,IAAIC,MAAM,IAAIA,MAAM,CAACC,MAAM,EAAE;IAC3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGH,MAAM,CAACC,MAAM,EAAEC,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MACjDV,6BAA6B,CAACF,UAAU,EAAEL,MAAM,EAAEe,MAAM,CAACE,CAAC,CAAC,CAAC;IAC9D;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}