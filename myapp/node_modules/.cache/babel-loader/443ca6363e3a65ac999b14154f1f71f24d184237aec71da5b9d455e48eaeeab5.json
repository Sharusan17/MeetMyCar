{"ast":null,"code":"/**\n * \n * Firestore representation wrapper\n */\nimport { NativeModules } from 'react-native';\nimport { getAppEventName, SharedEventEmitter } from '../../utils/events';\nimport ModuleBase from '../../utils/ModuleBase';\nimport CollectionReference from './CollectionReference';\nimport DocumentReference from './DocumentReference';\nimport FieldPath from './FieldPath';\nimport FieldValue from './FieldValue';\nimport GeoPoint from './GeoPoint';\nimport Blob from './Blob';\nimport Path from './Path';\nimport WriteBatch from './WriteBatch';\nimport TransactionHandler from './TransactionHandler';\nimport Timestamp from './Timestamp';\nimport Transaction from './Transaction';\nimport { isBoolean, isObject, isString, isNumber, hop } from '../../utils';\nimport { getNativeModule } from '../../utils/native';\n// A flag representing the unlimited cache size\nconst CACHE_SIZE_UNLIMITED = -1; // The minimum cache size in the firebase SDK (currently 1MB)\n\nconst MIN_CACHE_SIZE = 1048576;\nconst NATIVE_EVENTS = ['firestore_transaction_event', 'firestore_document_sync_event', 'firestore_collection_sync_event'];\nconst LogLevels = ['debug', 'error', 'silent'];\nexport const MODULE_NAME = 'RNFirebaseFirestore';\nexport const NAMESPACE = 'firestore';\n/**\n * @class Firestore\n */\n\nexport default class Firestore extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: true,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n    this._referencePath = new Path([]);\n    this._transactionHandler = new TransactionHandler(this);\n    SharedEventEmitter.addListener(\n    // sub to internal native event - this fans out to\n    // public event name: onCollectionSnapshot\n    getAppEventName(this, 'firestore_collection_sync_event'), this._onCollectionSyncEvent.bind(this));\n    SharedEventEmitter.addListener(\n    // sub to internal native event - this fans out to\n    // public event name: onDocumentSnapshot\n    getAppEventName(this, 'firestore_document_sync_event'), this._onDocumentSyncEvent.bind(this));\n  }\n  /**\n   * -------------\n   *  PUBLIC API\n   * -------------\n   */\n\n  /**\n   * Creates a write batch, used for performing multiple writes as a single atomic operation.\n   *\n   * @returns {WriteBatch}\n   */\n\n  batch() {\n    return new WriteBatch(this);\n  }\n  /**\n   * Gets a CollectionReference instance that refers to the collection at the specified path.\n   *\n   * @param collectionPath\n   * @returns {CollectionReference}\n   */\n\n  collection(collectionPath) {\n    const path = this._referencePath.child(collectionPath);\n    if (!path.isCollection) {\n      throw new Error('Argument \"collectionPath\" must point to a collection.');\n    }\n    return new CollectionReference(this, path);\n  }\n  disableNetwork() {\n    return getNativeModule(this).disableNetwork();\n  }\n  /**\n   * Gets a DocumentReference instance that refers to the document at the specified path.\n   *\n   * @param documentPath\n   * @returns {DocumentReference}\n   */\n\n  doc(documentPath) {\n    const path = this._referencePath.child(documentPath);\n    if (!path.isDocument) {\n      throw new Error('Argument \"documentPath\" must point to a document.');\n    }\n    return new DocumentReference(this, path);\n  }\n  enableNetwork() {\n    return getNativeModule(this).enableNetwork();\n  }\n  /**\n   * Executes the given updateFunction and then attempts to commit the\n   * changes applied within the transaction. If any document read within\n   * the transaction has changed, Cloud Firestore retries the updateFunction.\n   *\n   * If it fails to commit after 5 attempts, the transaction fails.\n   *\n   * @param updateFunction\n   * @returns {void|Promise<any>}\n   */\n\n  runTransaction(updateFunction) {\n    return this._transactionHandler._add(updateFunction);\n  }\n  settings(settings) {\n    if (!isObject(settings)) {\n      return Promise.reject(new Error('Firestore.settings failed: settings must be an object.'));\n    }\n    if (hop(settings, 'host') && !isString(settings.host)) {\n      return Promise.reject(new Error('Firestore.settings failed: settings.host must be a string.'));\n    }\n    if (hop(settings, 'persistence') && !isBoolean(settings.persistence)) {\n      return Promise.reject(new Error('Firestore.settings failed: settings.persistence must be boolean.'));\n    }\n    if (hop(settings, 'cacheSizeBytes')) {\n      if (!isNumber(settings.cacheSizeBytes)) {\n        return Promise.reject(new Error('Firestore.settings failed: settings.cacheSizeBytes must be number.'));\n      }\n      if (settings.cacheSizeBytes !== CACHE_SIZE_UNLIMITED && settings.cacheSizeBytes < MIN_CACHE_SIZE) {\n        return Promise.reject(new Error(`Firestore.settings failed: settings.cacheSizeBytes must be set to ${MIN_CACHE_SIZE} at least bytes.`));\n      }\n    }\n    if (hop(settings, 'ssl') && !isBoolean(settings.ssl)) {\n      return Promise.reject(new Error('Firestore.settings failed: settings.ssl must be boolean.'));\n    }\n    if (hop(settings, 'timestampsInSnapshots') && !isBoolean(settings.timestampsInSnapshots)) {\n      return Promise.reject(new Error('Firestore.settings failed: settings.timestampsInSnapshots must be boolean.'));\n    }\n    return getNativeModule(this).settings(settings);\n  }\n  /**\n   * -------------\n   *  UNSUPPORTED\n   * -------------\n   */\n\n  enablePersistence() {\n    console.warn('Due to restrictions in the native SDK, persistence must be configured in firebase.firestore().settings()');\n    return Promise.resolve();\n  }\n  /**\n   * -------------\n   *   INTERNALS\n   * -------------\n   */\n\n  /**\n   * Internal collection sync listener\n   *\n   * @param event\n   * @private\n   */\n\n  _onCollectionSyncEvent(event) {\n    if (event.error) {\n      SharedEventEmitter.emit(getAppEventName(this, `onQuerySnapshotError:${event.listenerId}`), event);\n    } else {\n      SharedEventEmitter.emit(getAppEventName(this, `onQuerySnapshot:${event.listenerId}`), event.querySnapshot);\n    }\n  }\n  /**\n   * Internal document sync listener\n   *\n   * @param event\n   * @private\n   */\n\n  _onDocumentSyncEvent(event) {\n    if (event.error) {\n      SharedEventEmitter.emit(getAppEventName(this, `onDocumentSnapshotError:${event.listenerId}`), event);\n    } else {\n      SharedEventEmitter.emit(getAppEventName(this, `onDocumentSnapshot:${event.listenerId}`), event.documentSnapshot);\n    }\n  }\n}\nexport const statics = {\n  Blob,\n  FieldPath,\n  FieldValue,\n  GeoPoint,\n  Timestamp,\n  CACHE_SIZE_UNLIMITED,\n  enableLogging(enabled) {\n    // DEPRECATED: Remove method in v4.1.0\n    console.warn('firebase.firestore.enableLogging is deprecated, use firebase.firestore().setLogLevel instead.');\n    this.setLogLevel(enabled ? 'debug' : 'silent');\n  },\n  setLogLevel(logLevel) {\n    if (LogLevels.indexOf(logLevel) === -1) {\n      throw new Error('Argument `logLevel` must be one of: `debug`, `error`, `silent`');\n    }\n    if (NativeModules[MODULE_NAME]) {\n      NativeModules[MODULE_NAME].setLogLevel(logLevel);\n    }\n  }\n};","map":{"version":3,"names":["NativeModules","getAppEventName","SharedEventEmitter","ModuleBase","CollectionReference","DocumentReference","FieldPath","FieldValue","GeoPoint","Blob","Path","WriteBatch","TransactionHandler","Timestamp","Transaction","isBoolean","isObject","isString","isNumber","hop","getNativeModule","CACHE_SIZE_UNLIMITED","MIN_CACHE_SIZE","NATIVE_EVENTS","LogLevels","MODULE_NAME","NAMESPACE","Firestore","constructor","app","events","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","_referencePath","_transactionHandler","addListener","_onCollectionSyncEvent","bind","_onDocumentSyncEvent","batch","collection","collectionPath","path","child","isCollection","Error","disableNetwork","doc","documentPath","isDocument","enableNetwork","runTransaction","updateFunction","_add","settings","Promise","reject","host","persistence","cacheSizeBytes","ssl","timestampsInSnapshots","enablePersistence","console","warn","resolve","event","error","emit","listenerId","querySnapshot","documentSnapshot","statics","enableLogging","enabled","setLogLevel","logLevel","indexOf"],"sources":["/Users/sharusan/MeetMyCar/myapp/node_modules/react-native-firebase/dist/modules/firestore/index.js"],"sourcesContent":["/**\n * \n * Firestore representation wrapper\n */\nimport { NativeModules } from 'react-native';\nimport { getAppEventName, SharedEventEmitter } from '../../utils/events';\nimport ModuleBase from '../../utils/ModuleBase';\nimport CollectionReference from './CollectionReference';\nimport DocumentReference from './DocumentReference';\nimport FieldPath from './FieldPath';\nimport FieldValue from './FieldValue';\nimport GeoPoint from './GeoPoint';\nimport Blob from './Blob';\nimport Path from './Path';\nimport WriteBatch from './WriteBatch';\nimport TransactionHandler from './TransactionHandler';\nimport Timestamp from './Timestamp';\nimport Transaction from './Transaction';\nimport { isBoolean, isObject, isString, isNumber, hop } from '../../utils';\nimport { getNativeModule } from '../../utils/native';\n// A flag representing the unlimited cache size\nconst CACHE_SIZE_UNLIMITED = -1; // The minimum cache size in the firebase SDK (currently 1MB)\n\nconst MIN_CACHE_SIZE = 1048576;\nconst NATIVE_EVENTS = ['firestore_transaction_event', 'firestore_document_sync_event', 'firestore_collection_sync_event'];\nconst LogLevels = ['debug', 'error', 'silent'];\nexport const MODULE_NAME = 'RNFirebaseFirestore';\nexport const NAMESPACE = 'firestore';\n/**\n * @class Firestore\n */\n\nexport default class Firestore extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: true,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n    this._referencePath = new Path([]);\n    this._transactionHandler = new TransactionHandler(this);\n    SharedEventEmitter.addListener( // sub to internal native event - this fans out to\n    // public event name: onCollectionSnapshot\n    getAppEventName(this, 'firestore_collection_sync_event'), this._onCollectionSyncEvent.bind(this));\n    SharedEventEmitter.addListener( // sub to internal native event - this fans out to\n    // public event name: onDocumentSnapshot\n    getAppEventName(this, 'firestore_document_sync_event'), this._onDocumentSyncEvent.bind(this));\n  }\n  /**\n   * -------------\n   *  PUBLIC API\n   * -------------\n   */\n\n  /**\n   * Creates a write batch, used for performing multiple writes as a single atomic operation.\n   *\n   * @returns {WriteBatch}\n   */\n\n\n  batch() {\n    return new WriteBatch(this);\n  }\n  /**\n   * Gets a CollectionReference instance that refers to the collection at the specified path.\n   *\n   * @param collectionPath\n   * @returns {CollectionReference}\n   */\n\n\n  collection(collectionPath) {\n    const path = this._referencePath.child(collectionPath);\n\n    if (!path.isCollection) {\n      throw new Error('Argument \"collectionPath\" must point to a collection.');\n    }\n\n    return new CollectionReference(this, path);\n  }\n\n  disableNetwork() {\n    return getNativeModule(this).disableNetwork();\n  }\n  /**\n   * Gets a DocumentReference instance that refers to the document at the specified path.\n   *\n   * @param documentPath\n   * @returns {DocumentReference}\n   */\n\n\n  doc(documentPath) {\n    const path = this._referencePath.child(documentPath);\n\n    if (!path.isDocument) {\n      throw new Error('Argument \"documentPath\" must point to a document.');\n    }\n\n    return new DocumentReference(this, path);\n  }\n\n  enableNetwork() {\n    return getNativeModule(this).enableNetwork();\n  }\n  /**\n   * Executes the given updateFunction and then attempts to commit the\n   * changes applied within the transaction. If any document read within\n   * the transaction has changed, Cloud Firestore retries the updateFunction.\n   *\n   * If it fails to commit after 5 attempts, the transaction fails.\n   *\n   * @param updateFunction\n   * @returns {void|Promise<any>}\n   */\n\n\n  runTransaction(updateFunction) {\n    return this._transactionHandler._add(updateFunction);\n  }\n\n  settings(settings) {\n    if (!isObject(settings)) {\n      return Promise.reject(new Error('Firestore.settings failed: settings must be an object.'));\n    }\n\n    if (hop(settings, 'host') && !isString(settings.host)) {\n      return Promise.reject(new Error('Firestore.settings failed: settings.host must be a string.'));\n    }\n\n    if (hop(settings, 'persistence') && !isBoolean(settings.persistence)) {\n      return Promise.reject(new Error('Firestore.settings failed: settings.persistence must be boolean.'));\n    }\n\n    if (hop(settings, 'cacheSizeBytes')) {\n      if (!isNumber(settings.cacheSizeBytes)) {\n        return Promise.reject(new Error('Firestore.settings failed: settings.cacheSizeBytes must be number.'));\n      }\n\n      if (settings.cacheSizeBytes !== CACHE_SIZE_UNLIMITED && settings.cacheSizeBytes < MIN_CACHE_SIZE) {\n        return Promise.reject(new Error(`Firestore.settings failed: settings.cacheSizeBytes must be set to ${MIN_CACHE_SIZE} at least bytes.`));\n      }\n    }\n\n    if (hop(settings, 'ssl') && !isBoolean(settings.ssl)) {\n      return Promise.reject(new Error('Firestore.settings failed: settings.ssl must be boolean.'));\n    }\n\n    if (hop(settings, 'timestampsInSnapshots') && !isBoolean(settings.timestampsInSnapshots)) {\n      return Promise.reject(new Error('Firestore.settings failed: settings.timestampsInSnapshots must be boolean.'));\n    }\n\n    return getNativeModule(this).settings(settings);\n  }\n  /**\n   * -------------\n   *  UNSUPPORTED\n   * -------------\n   */\n\n\n  enablePersistence() {\n    console.warn('Due to restrictions in the native SDK, persistence must be configured in firebase.firestore().settings()');\n    return Promise.resolve();\n  }\n  /**\n   * -------------\n   *   INTERNALS\n   * -------------\n   */\n\n  /**\n   * Internal collection sync listener\n   *\n   * @param event\n   * @private\n   */\n\n\n  _onCollectionSyncEvent(event) {\n    if (event.error) {\n      SharedEventEmitter.emit(getAppEventName(this, `onQuerySnapshotError:${event.listenerId}`), event);\n    } else {\n      SharedEventEmitter.emit(getAppEventName(this, `onQuerySnapshot:${event.listenerId}`), event.querySnapshot);\n    }\n  }\n  /**\n   * Internal document sync listener\n   *\n   * @param event\n   * @private\n   */\n\n\n  _onDocumentSyncEvent(event) {\n    if (event.error) {\n      SharedEventEmitter.emit(getAppEventName(this, `onDocumentSnapshotError:${event.listenerId}`), event);\n    } else {\n      SharedEventEmitter.emit(getAppEventName(this, `onDocumentSnapshot:${event.listenerId}`), event.documentSnapshot);\n    }\n  }\n\n}\nexport const statics = {\n  Blob,\n  FieldPath,\n  FieldValue,\n  GeoPoint,\n  Timestamp,\n  CACHE_SIZE_UNLIMITED,\n\n  enableLogging(enabled) {\n    // DEPRECATED: Remove method in v4.1.0\n    console.warn('firebase.firestore.enableLogging is deprecated, use firebase.firestore().setLogLevel instead.');\n    this.setLogLevel(enabled ? 'debug' : 'silent');\n  },\n\n  setLogLevel(logLevel) {\n    if (LogLevels.indexOf(logLevel) === -1) {\n      throw new Error('Argument `logLevel` must be one of: `debug`, `error`, `silent`');\n    }\n\n    if (NativeModules[MODULE_NAME]) {\n      NativeModules[MODULE_NAME].setLogLevel(logLevel);\n    }\n  }\n\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}