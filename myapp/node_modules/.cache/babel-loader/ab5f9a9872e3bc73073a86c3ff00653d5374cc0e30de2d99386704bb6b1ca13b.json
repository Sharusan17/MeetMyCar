{"ast":null,"code":"import INTERNALS from '../../../utils/internals';\nimport { SharedEventEmitter } from '../../../utils/events';\nimport { generatePushID, isFunction, isAndroid, isIOS, isString, nativeToJSError } from '../../../utils';\nimport { getNativeModule } from '../../../utils/native';\nexport default class PhoneAuthListener {\n  /**\n   *\n   * @param auth\n   * @param phoneNumber\n   * @param timeout\n   * @param forceResend\n   */\n  constructor(auth, phoneNumber, timeout, forceResend) {\n    this._auth = auth;\n    this._reject = null;\n    this._resolve = null;\n    this._promise = null;\n    this._credential = null;\n    this._timeout = timeout || 20; // 20 secs\n\n    this._forceResending = forceResend || false;\n    this._phoneAuthRequestKey = generatePushID(); // internal events\n\n    this._internalEvents = {\n      codeSent: `phone:auth:${this._phoneAuthRequestKey}:onCodeSent`,\n      verificationFailed: `phone:auth:${this._phoneAuthRequestKey}:onVerificationFailed`,\n      verificationComplete: `phone:auth:${this._phoneAuthRequestKey}:onVerificationComplete`,\n      codeAutoRetrievalTimeout: `phone:auth:${this._phoneAuthRequestKey}:onCodeAutoRetrievalTimeout`\n    }; // user observer events\n\n    this._publicEvents = {\n      // error cb\n      error: `phone:auth:${this._phoneAuthRequestKey}:error`,\n      // observer\n      event: `phone:auth:${this._phoneAuthRequestKey}:event`,\n      // success cb\n      success: `phone:auth:${this._phoneAuthRequestKey}:success`\n    }; // setup internal event listeners\n\n    this._subscribeToEvents(); // start verification flow natively\n\n    if (isAndroid) {\n      getNativeModule(this._auth).verifyPhoneNumber(phoneNumber, this._phoneAuthRequestKey, this._timeout, this._forceResending);\n    }\n    if (isIOS) {\n      getNativeModule(this._auth).verifyPhoneNumber(phoneNumber, this._phoneAuthRequestKey);\n    }\n  }\n  /**\n   * Subscribes to all EE events on this._internalEvents\n   * @private\n   */\n\n  _subscribeToEvents() {\n    const events = Object.keys(this._internalEvents);\n    for (let i = 0, len = events.length; i < len; i++) {\n      const type = events[i];\n      SharedEventEmitter.once(this._internalEvents[type],\n      // $FlowExpectedError: Flow doesn't support indexable signatures on classes: https://github.com/facebook/flow/issues/1323\n      this[`_${type}Handler`].bind(this));\n    }\n  }\n  /**\n   * Subscribe a users listener cb to the snapshot events.\n   * @param observer\n   * @private\n   */\n\n  _addUserObserver(observer) {\n    SharedEventEmitter.addListener(this._publicEvents.event, observer);\n  }\n  /**\n   * Send a snapshot event to users event observer.\n   * @param snapshot PhoneAuthSnapshot\n   * @private\n   */\n\n  _emitToObservers(snapshot) {\n    SharedEventEmitter.emit(this._publicEvents.event, snapshot);\n  }\n  /**\n   * Send a error snapshot event to any subscribed errorCb's\n   * @param snapshot\n   * @private\n   */\n\n  _emitToErrorCb(snapshot) {\n    const {\n      error\n    } = snapshot;\n    if (this._reject) this._reject(error);\n    SharedEventEmitter.emit(this._publicEvents.error, error);\n  }\n  /**\n   * Send a success snapshot event to any subscribed completeCb's\n   * @param snapshot\n   * @private\n   */\n\n  _emitToSuccessCb(snapshot) {\n    if (this._resolve) this._resolve(snapshot);\n    SharedEventEmitter.emit(this._publicEvents.success, snapshot);\n  }\n  /**\n   * Removes all listeners for this phone auth instance\n   * @private\n   */\n\n  _removeAllListeners() {\n    setTimeout(() => {\n      // move to next event loop - not sure if needed\n      // internal listeners\n      Object.values(this._internalEvents).forEach(event => {\n        SharedEventEmitter.removeAllListeners(event);\n      }); // user observer listeners\n\n      Object.values(this._publicEvents).forEach(publicEvent => {\n        SharedEventEmitter.removeAllListeners(publicEvent);\n      });\n    }, 0);\n  }\n  /**\n   * Create a new internal deferred promise, if not already created\n   * @private\n   */\n\n  _promiseDeferred() {\n    if (!this._promise) {\n      this._promise = new Promise((resolve, reject) => {\n        this._resolve = result => {\n          this._resolve = null;\n          return resolve(result);\n        };\n        this._reject = possibleError => {\n          this._reject = null;\n          return reject(possibleError);\n        };\n      });\n    }\n  }\n  /* --------------------------\n   --- INTERNAL EVENT HANDLERS\n   ---------------------------- */\n\n  /**\n   * Internal code sent event handler\n   * @private\n   * @param credential\n   */\n\n  _codeSentHandler(credential) {\n    const snapshot = {\n      verificationId: credential.verificationId,\n      code: null,\n      error: null,\n      state: 'sent'\n    };\n    this._emitToObservers(snapshot);\n    if (isIOS) {\n      this._emitToSuccessCb(snapshot);\n    }\n    if (isAndroid) {// android can auto retrieve so we don't emit to successCb immediately,\n      // if auto retrieve times out then that will emit to successCb\n    }\n  }\n  /**\n   * Internal code auto retrieve timeout event handler\n   * @private\n   * @param credential\n   */\n\n  _codeAutoRetrievalTimeoutHandler(credential) {\n    const snapshot = {\n      verificationId: credential.verificationId,\n      code: null,\n      error: null,\n      state: 'timeout'\n    };\n    this._emitToObservers(snapshot);\n    this._emitToSuccessCb(snapshot);\n  }\n  /**\n   * Internal verification complete event handler\n   * @param credential\n   * @private\n   */\n\n  _verificationCompleteHandler(credential) {\n    const snapshot = {\n      verificationId: credential.verificationId,\n      code: credential.code || null,\n      error: null,\n      state: 'verified'\n    };\n    this._emitToObservers(snapshot);\n    this._emitToSuccessCb(snapshot);\n    this._removeAllListeners();\n  }\n  /**\n   * Internal verification failed event handler\n   * @param state\n   * @private\n   */\n\n  _verificationFailedHandler(state) {\n    const snapshot = {\n      verificationId: state.verificationId,\n      code: null,\n      error: null,\n      state: 'error'\n    };\n    const {\n      code,\n      message,\n      nativeErrorMessage\n    } = state.error;\n    snapshot.error = nativeToJSError(code, message, {\n      nativeErrorMessage\n    });\n    this._emitToObservers(snapshot);\n    this._emitToErrorCb(snapshot);\n    this._removeAllListeners();\n  }\n  /* -------------\n   -- PUBLIC API\n   --------------*/\n\n  on(event, observer, errorCb, successCb) {\n    if (!isString(event)) {\n      throw new Error(INTERNALS.STRINGS.ERROR_MISSING_ARG_NAMED('event', 'string', 'on'));\n    }\n    if (event !== 'state_changed') {\n      throw new Error(INTERNALS.STRINGS.ERROR_ARG_INVALID_VALUE('event', 'state_changed', event));\n    }\n    if (!isFunction(observer)) {\n      throw new Error(INTERNALS.STRINGS.ERROR_MISSING_ARG_NAMED('observer', 'function', 'on'));\n    }\n    this._addUserObserver(observer);\n    if (isFunction(errorCb)) {\n      SharedEventEmitter.once(this._publicEvents.error, errorCb);\n    }\n    if (isFunction(successCb)) {\n      SharedEventEmitter.once(this._publicEvents.success, successCb);\n    }\n    return this;\n  }\n  /**\n   * Promise .then proxy\n   * @param fn\n   */\n\n  then(fn) {\n    this._promiseDeferred(); // $FlowFixMe: Unsure how to annotate `bind` here\n\n    if (this._promise) return this._promise.then.bind(this._promise)(fn);\n    return undefined; // will never get here - just to keep flow happy\n  }\n  /**\n   * Promise .catch proxy\n   * @param fn\n   */\n\n  catch(fn) {\n    this._promiseDeferred(); // $FlowFixMe: Unsure how to annotate `bind` here\n\n    if (this._promise) return this._promise.catch.bind(this._promise)(fn);\n    return undefined; // will never get here - just to keep flow happy\n  }\n}","map":{"version":3,"names":["INTERNALS","SharedEventEmitter","generatePushID","isFunction","isAndroid","isIOS","isString","nativeToJSError","getNativeModule","PhoneAuthListener","constructor","auth","phoneNumber","timeout","forceResend","_auth","_reject","_resolve","_promise","_credential","_timeout","_forceResending","_phoneAuthRequestKey","_internalEvents","codeSent","verificationFailed","verificationComplete","codeAutoRetrievalTimeout","_publicEvents","error","event","success","_subscribeToEvents","verifyPhoneNumber","events","Object","keys","i","len","length","type","once","bind","_addUserObserver","observer","addListener","_emitToObservers","snapshot","emit","_emitToErrorCb","_emitToSuccessCb","_removeAllListeners","setTimeout","values","forEach","removeAllListeners","publicEvent","_promiseDeferred","Promise","resolve","reject","result","possibleError","_codeSentHandler","credential","verificationId","code","state","_codeAutoRetrievalTimeoutHandler","_verificationCompleteHandler","_verificationFailedHandler","message","nativeErrorMessage","on","errorCb","successCb","Error","STRINGS","ERROR_MISSING_ARG_NAMED","ERROR_ARG_INVALID_VALUE","then","fn","undefined","catch"],"sources":["/Users/sharusan/MeetMyCar/myapp/node_modules/react-native-firebase/dist/modules/auth/phone/PhoneAuthListener.js"],"sourcesContent":["import INTERNALS from '../../../utils/internals';\nimport { SharedEventEmitter } from '../../../utils/events';\nimport { generatePushID, isFunction, isAndroid, isIOS, isString, nativeToJSError } from '../../../utils';\nimport { getNativeModule } from '../../../utils/native';\nexport default class PhoneAuthListener {\n  /**\n   *\n   * @param auth\n   * @param phoneNumber\n   * @param timeout\n   * @param forceResend\n   */\n  constructor(auth, phoneNumber, timeout, forceResend) {\n    this._auth = auth;\n    this._reject = null;\n    this._resolve = null;\n    this._promise = null;\n    this._credential = null;\n    this._timeout = timeout || 20; // 20 secs\n\n    this._forceResending = forceResend || false;\n    this._phoneAuthRequestKey = generatePushID(); // internal events\n\n    this._internalEvents = {\n      codeSent: `phone:auth:${this._phoneAuthRequestKey}:onCodeSent`,\n      verificationFailed: `phone:auth:${this._phoneAuthRequestKey}:onVerificationFailed`,\n      verificationComplete: `phone:auth:${this._phoneAuthRequestKey}:onVerificationComplete`,\n      codeAutoRetrievalTimeout: `phone:auth:${this._phoneAuthRequestKey}:onCodeAutoRetrievalTimeout`\n    }; // user observer events\n\n    this._publicEvents = {\n      // error cb\n      error: `phone:auth:${this._phoneAuthRequestKey}:error`,\n      // observer\n      event: `phone:auth:${this._phoneAuthRequestKey}:event`,\n      // success cb\n      success: `phone:auth:${this._phoneAuthRequestKey}:success`\n    }; // setup internal event listeners\n\n    this._subscribeToEvents(); // start verification flow natively\n\n\n    if (isAndroid) {\n      getNativeModule(this._auth).verifyPhoneNumber(phoneNumber, this._phoneAuthRequestKey, this._timeout, this._forceResending);\n    }\n\n    if (isIOS) {\n      getNativeModule(this._auth).verifyPhoneNumber(phoneNumber, this._phoneAuthRequestKey);\n    }\n  }\n  /**\n   * Subscribes to all EE events on this._internalEvents\n   * @private\n   */\n\n\n  _subscribeToEvents() {\n    const events = Object.keys(this._internalEvents);\n\n    for (let i = 0, len = events.length; i < len; i++) {\n      const type = events[i];\n      SharedEventEmitter.once(this._internalEvents[type], // $FlowExpectedError: Flow doesn't support indexable signatures on classes: https://github.com/facebook/flow/issues/1323\n      this[`_${type}Handler`].bind(this));\n    }\n  }\n  /**\n   * Subscribe a users listener cb to the snapshot events.\n   * @param observer\n   * @private\n   */\n\n\n  _addUserObserver(observer) {\n    SharedEventEmitter.addListener(this._publicEvents.event, observer);\n  }\n  /**\n   * Send a snapshot event to users event observer.\n   * @param snapshot PhoneAuthSnapshot\n   * @private\n   */\n\n\n  _emitToObservers(snapshot) {\n    SharedEventEmitter.emit(this._publicEvents.event, snapshot);\n  }\n  /**\n   * Send a error snapshot event to any subscribed errorCb's\n   * @param snapshot\n   * @private\n   */\n\n\n  _emitToErrorCb(snapshot) {\n    const {\n      error\n    } = snapshot;\n    if (this._reject) this._reject(error);\n    SharedEventEmitter.emit(this._publicEvents.error, error);\n  }\n  /**\n   * Send a success snapshot event to any subscribed completeCb's\n   * @param snapshot\n   * @private\n   */\n\n\n  _emitToSuccessCb(snapshot) {\n    if (this._resolve) this._resolve(snapshot);\n    SharedEventEmitter.emit(this._publicEvents.success, snapshot);\n  }\n  /**\n   * Removes all listeners for this phone auth instance\n   * @private\n   */\n\n\n  _removeAllListeners() {\n    setTimeout(() => {\n      // move to next event loop - not sure if needed\n      // internal listeners\n      Object.values(this._internalEvents).forEach(event => {\n        SharedEventEmitter.removeAllListeners(event);\n      }); // user observer listeners\n\n      Object.values(this._publicEvents).forEach(publicEvent => {\n        SharedEventEmitter.removeAllListeners(publicEvent);\n      });\n    }, 0);\n  }\n  /**\n   * Create a new internal deferred promise, if not already created\n   * @private\n   */\n\n\n  _promiseDeferred() {\n    if (!this._promise) {\n      this._promise = new Promise((resolve, reject) => {\n        this._resolve = result => {\n          this._resolve = null;\n          return resolve(result);\n        };\n\n        this._reject = possibleError => {\n          this._reject = null;\n          return reject(possibleError);\n        };\n      });\n    }\n  }\n  /* --------------------------\n   --- INTERNAL EVENT HANDLERS\n   ---------------------------- */\n\n  /**\n   * Internal code sent event handler\n   * @private\n   * @param credential\n   */\n\n\n  _codeSentHandler(credential) {\n    const snapshot = {\n      verificationId: credential.verificationId,\n      code: null,\n      error: null,\n      state: 'sent'\n    };\n\n    this._emitToObservers(snapshot);\n\n    if (isIOS) {\n      this._emitToSuccessCb(snapshot);\n    }\n\n    if (isAndroid) {// android can auto retrieve so we don't emit to successCb immediately,\n      // if auto retrieve times out then that will emit to successCb\n    }\n  }\n  /**\n   * Internal code auto retrieve timeout event handler\n   * @private\n   * @param credential\n   */\n\n\n  _codeAutoRetrievalTimeoutHandler(credential) {\n    const snapshot = {\n      verificationId: credential.verificationId,\n      code: null,\n      error: null,\n      state: 'timeout'\n    };\n\n    this._emitToObservers(snapshot);\n\n    this._emitToSuccessCb(snapshot);\n  }\n  /**\n   * Internal verification complete event handler\n   * @param credential\n   * @private\n   */\n\n\n  _verificationCompleteHandler(credential) {\n    const snapshot = {\n      verificationId: credential.verificationId,\n      code: credential.code || null,\n      error: null,\n      state: 'verified'\n    };\n\n    this._emitToObservers(snapshot);\n\n    this._emitToSuccessCb(snapshot);\n\n    this._removeAllListeners();\n  }\n  /**\n   * Internal verification failed event handler\n   * @param state\n   * @private\n   */\n\n\n  _verificationFailedHandler(state) {\n    const snapshot = {\n      verificationId: state.verificationId,\n      code: null,\n      error: null,\n      state: 'error'\n    };\n    const {\n      code,\n      message,\n      nativeErrorMessage\n    } = state.error;\n    snapshot.error = nativeToJSError(code, message, {\n      nativeErrorMessage\n    });\n\n    this._emitToObservers(snapshot);\n\n    this._emitToErrorCb(snapshot);\n\n    this._removeAllListeners();\n  }\n  /* -------------\n   -- PUBLIC API\n   --------------*/\n\n\n  on(event, observer, errorCb, successCb) {\n    if (!isString(event)) {\n      throw new Error(INTERNALS.STRINGS.ERROR_MISSING_ARG_NAMED('event', 'string', 'on'));\n    }\n\n    if (event !== 'state_changed') {\n      throw new Error(INTERNALS.STRINGS.ERROR_ARG_INVALID_VALUE('event', 'state_changed', event));\n    }\n\n    if (!isFunction(observer)) {\n      throw new Error(INTERNALS.STRINGS.ERROR_MISSING_ARG_NAMED('observer', 'function', 'on'));\n    }\n\n    this._addUserObserver(observer);\n\n    if (isFunction(errorCb)) {\n      SharedEventEmitter.once(this._publicEvents.error, errorCb);\n    }\n\n    if (isFunction(successCb)) {\n      SharedEventEmitter.once(this._publicEvents.success, successCb);\n    }\n\n    return this;\n  }\n  /**\n   * Promise .then proxy\n   * @param fn\n   */\n\n\n  then(fn) {\n    this._promiseDeferred(); // $FlowFixMe: Unsure how to annotate `bind` here\n\n\n    if (this._promise) return this._promise.then.bind(this._promise)(fn);\n    return undefined; // will never get here - just to keep flow happy\n  }\n  /**\n   * Promise .catch proxy\n   * @param fn\n   */\n\n\n  catch(fn) {\n    this._promiseDeferred(); // $FlowFixMe: Unsure how to annotate `bind` here\n\n\n    if (this._promise) return this._promise.catch.bind(this._promise)(fn);\n    return undefined; // will never get here - just to keep flow happy\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}