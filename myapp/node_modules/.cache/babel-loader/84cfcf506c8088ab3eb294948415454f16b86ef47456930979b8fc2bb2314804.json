{"ast":null,"code":"/**\n * \n * Database Transaction representation wrapper\n */\nimport { getAppEventName, SharedEventEmitter } from '../../utils/events';\nimport { getLogger } from '../../utils/log';\nimport { getNativeModule } from '../../utils/native';\nlet transactionId = 0;\n/**\n * Uses the push id generator to create a transaction id\n * @returns {number}\n * @private\n */\n\nconst generateTransactionId = () => transactionId++;\n/**\n * @class TransactionHandler\n */\n\nexport default class TransactionHandler {\n  constructor(database) {\n    this._transactions = {};\n    this._database = database;\n    SharedEventEmitter.addListener(getAppEventName(this._database, 'database_transaction_event'), this._handleTransactionEvent.bind(this));\n  }\n  /**\n   * Add a new transaction and start it natively.\n   * @param reference\n   * @param transactionUpdater\n   * @param onComplete\n   * @param applyLocally\n   */\n\n  add(reference, transactionUpdater, onComplete, applyLocally = false) {\n    const id = generateTransactionId();\n    this._transactions[id] = {\n      id,\n      reference,\n      transactionUpdater,\n      onComplete,\n      applyLocally,\n      completed: false,\n      started: true\n    };\n    getNativeModule(this._database).transactionStart(reference.path, id, applyLocally);\n  }\n  /**\n   *  INTERNALS\n   */\n\n  /**\n   *\n   * @param event\n   * @returns {*}\n   * @private\n   */\n\n  _handleTransactionEvent(event = {}) {\n    switch (event.type) {\n      case 'update':\n        return this._handleUpdate(event);\n      case 'error':\n        return this._handleError(event);\n      case 'complete':\n        return this._handleComplete(event);\n      default:\n        getLogger(this._database).warn(`Unknown transaction event type: '${event.type}'`, event);\n        return undefined;\n    }\n  }\n  /**\n   *\n   * @param event\n   * @private\n   */\n\n  _handleUpdate(event = {}) {\n    let newValue;\n    const {\n      id,\n      value\n    } = event;\n    try {\n      const transaction = this._transactions[id];\n      if (!transaction) return;\n      newValue = transaction.transactionUpdater(value);\n    } finally {\n      let abort = false;\n      if (newValue === undefined) {\n        abort = true;\n      }\n      getNativeModule(this._database).transactionTryCommit(id, {\n        value: newValue,\n        abort\n      });\n    }\n  }\n  /**\n   *\n   * @param event\n   * @private\n   */\n\n  _handleError(event = {}) {\n    const transaction = this._transactions[event.id];\n    if (transaction && !transaction.completed) {\n      transaction.completed = true;\n      try {\n        transaction.onComplete(event.error, false, null);\n      } finally {\n        setImmediate(() => {\n          delete this._transactions[event.id];\n        });\n      }\n    }\n  }\n  /**\n   *\n   * @param event\n   * @private\n   */\n\n  _handleComplete(event = {}) {\n    const transaction = this._transactions[event.id];\n    if (transaction && !transaction.completed) {\n      transaction.completed = true;\n      try {\n        transaction.onComplete(null, event.committed, Object.assign({}, event.snapshot));\n      } finally {\n        setImmediate(() => {\n          delete this._transactions[event.id];\n        });\n      }\n    }\n  }\n}","map":{"version":3,"names":["getAppEventName","SharedEventEmitter","getLogger","getNativeModule","transactionId","generateTransactionId","TransactionHandler","constructor","database","_transactions","_database","addListener","_handleTransactionEvent","bind","add","reference","transactionUpdater","onComplete","applyLocally","id","completed","started","transactionStart","path","event","type","_handleUpdate","_handleError","_handleComplete","warn","undefined","newValue","value","transaction","abort","transactionTryCommit","error","setImmediate","committed","Object","assign","snapshot"],"sources":["/Users/sharusan/MeetMyCar/myapp/node_modules/react-native-firebase/dist/modules/database/transaction.js"],"sourcesContent":["/**\n * \n * Database Transaction representation wrapper\n */\nimport { getAppEventName, SharedEventEmitter } from '../../utils/events';\nimport { getLogger } from '../../utils/log';\nimport { getNativeModule } from '../../utils/native';\nlet transactionId = 0;\n/**\n * Uses the push id generator to create a transaction id\n * @returns {number}\n * @private\n */\n\nconst generateTransactionId = () => transactionId++;\n/**\n * @class TransactionHandler\n */\n\n\nexport default class TransactionHandler {\n  constructor(database) {\n    this._transactions = {};\n    this._database = database;\n    SharedEventEmitter.addListener(getAppEventName(this._database, 'database_transaction_event'), this._handleTransactionEvent.bind(this));\n  }\n  /**\n   * Add a new transaction and start it natively.\n   * @param reference\n   * @param transactionUpdater\n   * @param onComplete\n   * @param applyLocally\n   */\n\n\n  add(reference, transactionUpdater, onComplete, applyLocally = false) {\n    const id = generateTransactionId();\n    this._transactions[id] = {\n      id,\n      reference,\n      transactionUpdater,\n      onComplete,\n      applyLocally,\n      completed: false,\n      started: true\n    };\n    getNativeModule(this._database).transactionStart(reference.path, id, applyLocally);\n  }\n  /**\n   *  INTERNALS\n   */\n\n  /**\n   *\n   * @param event\n   * @returns {*}\n   * @private\n   */\n\n\n  _handleTransactionEvent(event = {}) {\n    switch (event.type) {\n      case 'update':\n        return this._handleUpdate(event);\n\n      case 'error':\n        return this._handleError(event);\n\n      case 'complete':\n        return this._handleComplete(event);\n\n      default:\n        getLogger(this._database).warn(`Unknown transaction event type: '${event.type}'`, event);\n        return undefined;\n    }\n  }\n  /**\n   *\n   * @param event\n   * @private\n   */\n\n\n  _handleUpdate(event = {}) {\n    let newValue;\n    const {\n      id,\n      value\n    } = event;\n\n    try {\n      const transaction = this._transactions[id];\n      if (!transaction) return;\n      newValue = transaction.transactionUpdater(value);\n    } finally {\n      let abort = false;\n\n      if (newValue === undefined) {\n        abort = true;\n      }\n\n      getNativeModule(this._database).transactionTryCommit(id, {\n        value: newValue,\n        abort\n      });\n    }\n  }\n  /**\n   *\n   * @param event\n   * @private\n   */\n\n\n  _handleError(event = {}) {\n    const transaction = this._transactions[event.id];\n\n    if (transaction && !transaction.completed) {\n      transaction.completed = true;\n\n      try {\n        transaction.onComplete(event.error, false, null);\n      } finally {\n        setImmediate(() => {\n          delete this._transactions[event.id];\n        });\n      }\n    }\n  }\n  /**\n   *\n   * @param event\n   * @private\n   */\n\n\n  _handleComplete(event = {}) {\n    const transaction = this._transactions[event.id];\n\n    if (transaction && !transaction.completed) {\n      transaction.completed = true;\n\n      try {\n        transaction.onComplete(null, event.committed, Object.assign({}, event.snapshot));\n      } finally {\n        setImmediate(() => {\n          delete this._transactions[event.id];\n        });\n      }\n    }\n  }\n\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,eAAe,EAAEC,kBAAkB,QAAQ,oBAAoB;AACxE,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,eAAe,QAAQ,oBAAoB;AACpD,IAAIC,aAAa,GAAG,CAAC;AACrB;AACA;AACA;AACA;AACA;;AAEA,MAAMC,qBAAqB,GAAGA,CAAA,KAAMD,aAAa,EAAE;AACnD;AACA;AACA;;AAGA,eAAe,MAAME,kBAAkB,CAAC;EACtCC,WAAWA,CAACC,QAAQ,EAAE;IACpB,IAAI,CAACC,aAAa,GAAG,CAAC,CAAC;IACvB,IAAI,CAACC,SAAS,GAAGF,QAAQ;IACzBP,kBAAkB,CAACU,WAAW,CAACX,eAAe,CAAC,IAAI,CAACU,SAAS,EAAE,4BAA4B,CAAC,EAAE,IAAI,CAACE,uBAAuB,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EACxI;EACA;AACF;AACA;AACA;AACA;AACA;AACA;;EAGEC,GAAGA,CAACC,SAAS,EAAEC,kBAAkB,EAAEC,UAAU,EAAEC,YAAY,GAAG,KAAK,EAAE;IACnE,MAAMC,EAAE,GAAGd,qBAAqB,CAAC,CAAC;IAClC,IAAI,CAACI,aAAa,CAACU,EAAE,CAAC,GAAG;MACvBA,EAAE;MACFJ,SAAS;MACTC,kBAAkB;MAClBC,UAAU;MACVC,YAAY;MACZE,SAAS,EAAE,KAAK;MAChBC,OAAO,EAAE;IACX,CAAC;IACDlB,eAAe,CAAC,IAAI,CAACO,SAAS,CAAC,CAACY,gBAAgB,CAACP,SAAS,CAACQ,IAAI,EAAEJ,EAAE,EAAED,YAAY,CAAC;EACpF;EACA;AACF;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;;EAGEN,uBAAuBA,CAACY,KAAK,GAAG,CAAC,CAAC,EAAE;IAClC,QAAQA,KAAK,CAACC,IAAI;MAChB,KAAK,QAAQ;QACX,OAAO,IAAI,CAACC,aAAa,CAACF,KAAK,CAAC;MAElC,KAAK,OAAO;QACV,OAAO,IAAI,CAACG,YAAY,CAACH,KAAK,CAAC;MAEjC,KAAK,UAAU;QACb,OAAO,IAAI,CAACI,eAAe,CAACJ,KAAK,CAAC;MAEpC;QACEtB,SAAS,CAAC,IAAI,CAACQ,SAAS,CAAC,CAACmB,IAAI,CAAE,oCAAmCL,KAAK,CAACC,IAAK,GAAE,EAAED,KAAK,CAAC;QACxF,OAAOM,SAAS;IACpB;EACF;EACA;AACF;AACA;AACA;AACA;;EAGEJ,aAAaA,CAACF,KAAK,GAAG,CAAC,CAAC,EAAE;IACxB,IAAIO,QAAQ;IACZ,MAAM;MACJZ,EAAE;MACFa;IACF,CAAC,GAAGR,KAAK;IAET,IAAI;MACF,MAAMS,WAAW,GAAG,IAAI,CAACxB,aAAa,CAACU,EAAE,CAAC;MAC1C,IAAI,CAACc,WAAW,EAAE;MAClBF,QAAQ,GAAGE,WAAW,CAACjB,kBAAkB,CAACgB,KAAK,CAAC;IAClD,CAAC,SAAS;MACR,IAAIE,KAAK,GAAG,KAAK;MAEjB,IAAIH,QAAQ,KAAKD,SAAS,EAAE;QAC1BI,KAAK,GAAG,IAAI;MACd;MAEA/B,eAAe,CAAC,IAAI,CAACO,SAAS,CAAC,CAACyB,oBAAoB,CAAChB,EAAE,EAAE;QACvDa,KAAK,EAAED,QAAQ;QACfG;MACF,CAAC,CAAC;IACJ;EACF;EACA;AACF;AACA;AACA;AACA;;EAGEP,YAAYA,CAACH,KAAK,GAAG,CAAC,CAAC,EAAE;IACvB,MAAMS,WAAW,GAAG,IAAI,CAACxB,aAAa,CAACe,KAAK,CAACL,EAAE,CAAC;IAEhD,IAAIc,WAAW,IAAI,CAACA,WAAW,CAACb,SAAS,EAAE;MACzCa,WAAW,CAACb,SAAS,GAAG,IAAI;MAE5B,IAAI;QACFa,WAAW,CAAChB,UAAU,CAACO,KAAK,CAACY,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC;MAClD,CAAC,SAAS;QACRC,YAAY,CAAC,MAAM;UACjB,OAAO,IAAI,CAAC5B,aAAa,CAACe,KAAK,CAACL,EAAE,CAAC;QACrC,CAAC,CAAC;MACJ;IACF;EACF;EACA;AACF;AACA;AACA;AACA;;EAGES,eAAeA,CAACJ,KAAK,GAAG,CAAC,CAAC,EAAE;IAC1B,MAAMS,WAAW,GAAG,IAAI,CAACxB,aAAa,CAACe,KAAK,CAACL,EAAE,CAAC;IAEhD,IAAIc,WAAW,IAAI,CAACA,WAAW,CAACb,SAAS,EAAE;MACzCa,WAAW,CAACb,SAAS,GAAG,IAAI;MAE5B,IAAI;QACFa,WAAW,CAAChB,UAAU,CAAC,IAAI,EAAEO,KAAK,CAACc,SAAS,EAAEC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEhB,KAAK,CAACiB,QAAQ,CAAC,CAAC;MAClF,CAAC,SAAS;QACRJ,YAAY,CAAC,MAAM;UACjB,OAAO,IAAI,CAAC5B,aAAa,CAACe,KAAK,CAACL,EAAE,CAAC;QACrC,CAAC,CAAC;MACJ;IACF;EACF;AAEF"},"metadata":{},"sourceType":"module","externalDependencies":[]}