{"ast":null,"code":"/**\n * \n * EmailAuthProvider representation wrapper\n */\nconst linkProviderId = 'emailLink';\nconst passwordProviderId = 'password';\nexport default class EmailAuthProvider {\n  constructor() {\n    throw new Error('`new EmailAuthProvider()` is not supported on the native Firebase SDKs.');\n  }\n  static get EMAIL_LINK_SIGN_IN_METHOD() {\n    return linkProviderId;\n  }\n  static get EMAIL_PASSWORD_SIGN_IN_METHOD() {\n    return passwordProviderId;\n  }\n  static get PROVIDER_ID() {\n    return passwordProviderId;\n  }\n  static credential(email, password) {\n    return {\n      token: email,\n      secret: password,\n      providerId: passwordProviderId\n    };\n  }\n  /**\n   * Initialize an EmailAuthProvider credential using an email and an email link after a sign in with email link operation.\n   * @param email Email address.\n   * @param emailLink Sign-in email link.\n   * @returns {{token: string, secret: string, providerId: string}}\n   */\n\n  static credentialWithLink(email, emailLink) {\n    return {\n      token: email,\n      secret: emailLink,\n      providerId: linkProviderId\n    };\n  }\n}","map":{"version":3,"names":["linkProviderId","passwordProviderId","EmailAuthProvider","constructor","Error","EMAIL_LINK_SIGN_IN_METHOD","EMAIL_PASSWORD_SIGN_IN_METHOD","PROVIDER_ID","credential","email","password","token","secret","providerId","credentialWithLink","emailLink"],"sources":["/Users/sharusan/MeetMyCar/myapp/node_modules/react-native-firebase/dist/modules/auth/providers/EmailAuthProvider.js"],"sourcesContent":["/**\n * \n * EmailAuthProvider representation wrapper\n */\nconst linkProviderId = 'emailLink';\nconst passwordProviderId = 'password';\nexport default class EmailAuthProvider {\n  constructor() {\n    throw new Error('`new EmailAuthProvider()` is not supported on the native Firebase SDKs.');\n  }\n\n  static get EMAIL_LINK_SIGN_IN_METHOD() {\n    return linkProviderId;\n  }\n\n  static get EMAIL_PASSWORD_SIGN_IN_METHOD() {\n    return passwordProviderId;\n  }\n\n  static get PROVIDER_ID() {\n    return passwordProviderId;\n  }\n\n  static credential(email, password) {\n    return {\n      token: email,\n      secret: password,\n      providerId: passwordProviderId\n    };\n  }\n  /**\n   * Initialize an EmailAuthProvider credential using an email and an email link after a sign in with email link operation.\n   * @param email Email address.\n   * @param emailLink Sign-in email link.\n   * @returns {{token: string, secret: string, providerId: string}}\n   */\n\n\n  static credentialWithLink(email, emailLink) {\n    return {\n      token: email,\n      secret: emailLink,\n      providerId: linkProviderId\n    };\n  }\n\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA,MAAMA,cAAc,GAAG,WAAW;AAClC,MAAMC,kBAAkB,GAAG,UAAU;AACrC,eAAe,MAAMC,iBAAiB,CAAC;EACrCC,WAAWA,CAAA,EAAG;IACZ,MAAM,IAAIC,KAAK,CAAC,yEAAyE,CAAC;EAC5F;EAEA,WAAWC,yBAAyBA,CAAA,EAAG;IACrC,OAAOL,cAAc;EACvB;EAEA,WAAWM,6BAA6BA,CAAA,EAAG;IACzC,OAAOL,kBAAkB;EAC3B;EAEA,WAAWM,WAAWA,CAAA,EAAG;IACvB,OAAON,kBAAkB;EAC3B;EAEA,OAAOO,UAAUA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IACjC,OAAO;MACLC,KAAK,EAAEF,KAAK;MACZG,MAAM,EAAEF,QAAQ;MAChBG,UAAU,EAAEZ;IACd,CAAC;EACH;EACA;AACF;AACA;AACA;AACA;AACA;;EAGE,OAAOa,kBAAkBA,CAACL,KAAK,EAAEM,SAAS,EAAE;IAC1C,OAAO;MACLJ,KAAK,EAAEF,KAAK;MACZG,MAAM,EAAEG,SAAS;MACjBF,UAAU,EAAEb;IACd,CAAC;EACH;AAEF"},"metadata":{},"sourceType":"module","externalDependencies":[]}