{"ast":null,"code":"/**\n * \n * DocumentReference representation wrapper\n */\nimport SnapshotError from './SnapshotError';\nimport DocumentSnapshot from './DocumentSnapshot';\nimport CollectionReference from './CollectionReference';\nimport { parseUpdateArgs } from './utils';\nimport { buildNativeMap } from './utils/serialize';\nimport { getNativeModule } from '../../utils/native';\nimport { firestoreAutoId, isFunction, isObject } from '../../utils';\nimport { getAppEventName, SharedEventEmitter } from '../../utils/events';\n\n/**\n * @class DocumentReference\n */\nexport default class DocumentReference {\n  constructor(firestore, documentPath) {\n    this._documentPath = documentPath;\n    this._firestore = firestore;\n  }\n  get firestore() {\n    return this._firestore;\n  }\n  get id() {\n    return this._documentPath.id;\n  }\n  get parent() {\n    const parentPath = this._documentPath.parent(); // $FlowExpectedError: parentPath can never be null\n\n    return new CollectionReference(this._firestore, parentPath);\n  }\n  get path() {\n    return this._documentPath.relativeName;\n  }\n  isEqual(otherDocumentReference) {\n    if (!(otherDocumentReference instanceof DocumentReference)) {\n      throw new Error('firebase.firestore.DocumentReference.isEqual(*) expects an instance of DocumentReference.');\n    } // check paths match\n\n    if (this.path !== otherDocumentReference.path) return false; // check same firestore app name\n\n    if (this._firestore.app.name !== otherDocumentReference._firestore.app.name) {\n      return false;\n    } // check same firestore app projectId\n    // noinspection RedundantIfStatementJS\n\n    if (this._firestore.app.options.projectId !== otherDocumentReference._firestore.app.options.projectId) {\n      return false;\n    }\n    return true;\n  }\n  collection(collectionPath) {\n    const path = this._documentPath.child(collectionPath);\n    if (!path.isCollection) {\n      throw new Error('Argument \"collectionPath\" must point to a collection.');\n    }\n    return new CollectionReference(this._firestore, path);\n  }\n  delete() {\n    return getNativeModule(this._firestore).documentDelete(this.path);\n  }\n  get(options) {\n    if (options) {\n      if (!isObject(options)) {\n        return Promise.reject(new Error('DocumentReference.get failed: First argument must be an object.'));\n      }\n      if (options.source && options.source !== 'default' && options.source !== 'server' && options.source !== 'cache') {\n        return Promise.reject(new Error('DocumentReference.get failed: GetOptions.source must be one of `default`, `server` or `cache`.'));\n      }\n    }\n    return getNativeModule(this._firestore).documentGet(this.path, options).then(result => new DocumentSnapshot(this._firestore, result));\n  }\n  onSnapshot(optionsOrObserverOrOnNext, observerOrOnNextOrOnError, onError) {\n    let observer;\n    let docListenOptions = {}; // Called with: onNext, ?onError\n\n    if (isFunction(optionsOrObserverOrOnNext)) {\n      if (observerOrOnNextOrOnError && !isFunction(observerOrOnNextOrOnError)) {\n        throw new Error('DocumentReference.onSnapshot failed: Second argument must be a valid function.');\n      } // $FlowExpectedError: Not coping with the overloaded method signature\n\n      observer = {\n        next: optionsOrObserverOrOnNext,\n        error: observerOrOnNextOrOnError\n      };\n    } else if (optionsOrObserverOrOnNext && isObject(optionsOrObserverOrOnNext)) {\n      // Called with: Observer\n      if (optionsOrObserverOrOnNext.next) {\n        if (isFunction(optionsOrObserverOrOnNext.next)) {\n          if (optionsOrObserverOrOnNext.error && !isFunction(optionsOrObserverOrOnNext.error)) {\n            throw new Error('DocumentReference.onSnapshot failed: Observer.error must be a valid function.');\n          } // $FlowExpectedError: Not coping with the overloaded method signature\n\n          observer = {\n            next: optionsOrObserverOrOnNext.next,\n            error: optionsOrObserverOrOnNext.error\n          };\n        } else {\n          throw new Error('DocumentReference.onSnapshot failed: Observer.next must be a valid function.');\n        }\n      } else if (Object.prototype.hasOwnProperty.call(optionsOrObserverOrOnNext, 'includeMetadataChanges')) {\n        docListenOptions = optionsOrObserverOrOnNext; // Called with: Options, onNext, ?onError\n\n        if (isFunction(observerOrOnNextOrOnError)) {\n          if (onError && !isFunction(onError)) {\n            throw new Error('DocumentReference.onSnapshot failed: Third argument must be a valid function.');\n          } // $FlowExpectedError: Not coping with the overloaded method signature\n\n          observer = {\n            next: observerOrOnNextOrOnError,\n            error: onError\n          }; // Called with Options, Observer\n        } else if (observerOrOnNextOrOnError && isObject(observerOrOnNextOrOnError) && observerOrOnNextOrOnError.next) {\n          if (isFunction(observerOrOnNextOrOnError.next)) {\n            if (observerOrOnNextOrOnError.error && !isFunction(observerOrOnNextOrOnError.error)) {\n              throw new Error('DocumentReference.onSnapshot failed: Observer.error must be a valid function.');\n            }\n            observer = {\n              next: observerOrOnNextOrOnError.next,\n              error: observerOrOnNextOrOnError.error\n            };\n          } else {\n            throw new Error('DocumentReference.onSnapshot failed: Observer.next must be a valid function.');\n          }\n        } else {\n          throw new Error('DocumentReference.onSnapshot failed: Second argument must be a function or observer.');\n        }\n      } else {\n        throw new Error('DocumentReference.onSnapshot failed: First argument must be a function, observer or options.');\n      }\n    } else {\n      throw new Error('DocumentReference.onSnapshot failed: Called with invalid arguments.');\n    }\n    const listenerId = firestoreAutoId();\n    const listener = nativeDocumentSnapshot => {\n      const documentSnapshot = new DocumentSnapshot(this.firestore, nativeDocumentSnapshot);\n      observer.next(documentSnapshot);\n    }; // Listen to snapshot events\n\n    const snapshotSubscription = SharedEventEmitter.addListener(getAppEventName(this._firestore, `onDocumentSnapshot:${listenerId}`), listener);\n    let unsubscribe; // listen for snapshot error events\n\n    const errorSubscription = SharedEventEmitter.addListener(getAppEventName(this._firestore, `onDocumentSnapshotError:${listenerId}`), e => {\n      if (unsubscribe) unsubscribe();\n      const error = new SnapshotError(e);\n      if (observer.error) observer.error(error);else this.firestore.log.error(error);\n    }); // Add the native listener\n\n    getNativeModule(this._firestore).documentOnSnapshot(this.path, listenerId, docListenOptions); // return an unsubscribe method\n\n    unsubscribe = () => {\n      snapshotSubscription.remove();\n      errorSubscription.remove(); // cancel native listener\n\n      getNativeModule(this._firestore).documentOffSnapshot(this.path, listenerId);\n    };\n    return unsubscribe;\n  }\n  set(data, options) {\n    const nativeData = buildNativeMap(data);\n    return getNativeModule(this._firestore).documentSet(this.path, nativeData, options);\n  }\n  update(...args) {\n    const data = parseUpdateArgs(args, 'DocumentReference.update');\n    const nativeData = buildNativeMap(data);\n    return getNativeModule(this._firestore).documentUpdate(this.path, nativeData);\n  }\n}","map":{"version":3,"names":["SnapshotError","DocumentSnapshot","CollectionReference","parseUpdateArgs","buildNativeMap","getNativeModule","firestoreAutoId","isFunction","isObject","getAppEventName","SharedEventEmitter","DocumentReference","constructor","firestore","documentPath","_documentPath","_firestore","id","parent","parentPath","path","relativeName","isEqual","otherDocumentReference","Error","app","name","options","projectId","collection","collectionPath","child","isCollection","delete","documentDelete","get","Promise","reject","source","documentGet","then","result","onSnapshot","optionsOrObserverOrOnNext","observerOrOnNextOrOnError","onError","observer","docListenOptions","next","error","Object","prototype","hasOwnProperty","call","listenerId","listener","nativeDocumentSnapshot","documentSnapshot","snapshotSubscription","addListener","unsubscribe","errorSubscription","e","log","documentOnSnapshot","remove","documentOffSnapshot","set","data","nativeData","documentSet","update","args","documentUpdate"],"sources":["/Users/sharusan/MeetMyCar/myapp/node_modules/react-native-firebase/dist/modules/firestore/DocumentReference.js"],"sourcesContent":["/**\n * \n * DocumentReference representation wrapper\n */\nimport SnapshotError from './SnapshotError';\nimport DocumentSnapshot from './DocumentSnapshot';\nimport CollectionReference from './CollectionReference';\nimport { parseUpdateArgs } from './utils';\nimport { buildNativeMap } from './utils/serialize';\nimport { getNativeModule } from '../../utils/native';\nimport { firestoreAutoId, isFunction, isObject } from '../../utils';\nimport { getAppEventName, SharedEventEmitter } from '../../utils/events';\n\n/**\n * @class DocumentReference\n */\nexport default class DocumentReference {\n  constructor(firestore, documentPath) {\n    this._documentPath = documentPath;\n    this._firestore = firestore;\n  }\n\n  get firestore() {\n    return this._firestore;\n  }\n\n  get id() {\n    return this._documentPath.id;\n  }\n\n  get parent() {\n    const parentPath = this._documentPath.parent(); // $FlowExpectedError: parentPath can never be null\n\n\n    return new CollectionReference(this._firestore, parentPath);\n  }\n\n  get path() {\n    return this._documentPath.relativeName;\n  }\n\n  isEqual(otherDocumentReference) {\n    if (!(otherDocumentReference instanceof DocumentReference)) {\n      throw new Error('firebase.firestore.DocumentReference.isEqual(*) expects an instance of DocumentReference.');\n    } // check paths match\n\n\n    if (this.path !== otherDocumentReference.path) return false; // check same firestore app name\n\n    if (this._firestore.app.name !== otherDocumentReference._firestore.app.name) {\n      return false;\n    } // check same firestore app projectId\n    // noinspection RedundantIfStatementJS\n\n\n    if (this._firestore.app.options.projectId !== otherDocumentReference._firestore.app.options.projectId) {\n      return false;\n    }\n\n    return true;\n  }\n\n  collection(collectionPath) {\n    const path = this._documentPath.child(collectionPath);\n\n    if (!path.isCollection) {\n      throw new Error('Argument \"collectionPath\" must point to a collection.');\n    }\n\n    return new CollectionReference(this._firestore, path);\n  }\n\n  delete() {\n    return getNativeModule(this._firestore).documentDelete(this.path);\n  }\n\n  get(options) {\n    if (options) {\n      if (!isObject(options)) {\n        return Promise.reject(new Error('DocumentReference.get failed: First argument must be an object.'));\n      }\n\n      if (options.source && options.source !== 'default' && options.source !== 'server' && options.source !== 'cache') {\n        return Promise.reject(new Error('DocumentReference.get failed: GetOptions.source must be one of `default`, `server` or `cache`.'));\n      }\n    }\n\n    return getNativeModule(this._firestore).documentGet(this.path, options).then(result => new DocumentSnapshot(this._firestore, result));\n  }\n\n  onSnapshot(optionsOrObserverOrOnNext, observerOrOnNextOrOnError, onError) {\n    let observer;\n    let docListenOptions = {}; // Called with: onNext, ?onError\n\n    if (isFunction(optionsOrObserverOrOnNext)) {\n      if (observerOrOnNextOrOnError && !isFunction(observerOrOnNextOrOnError)) {\n        throw new Error('DocumentReference.onSnapshot failed: Second argument must be a valid function.');\n      } // $FlowExpectedError: Not coping with the overloaded method signature\n\n\n      observer = {\n        next: optionsOrObserverOrOnNext,\n        error: observerOrOnNextOrOnError\n      };\n    } else if (optionsOrObserverOrOnNext && isObject(optionsOrObserverOrOnNext)) {\n      // Called with: Observer\n      if (optionsOrObserverOrOnNext.next) {\n        if (isFunction(optionsOrObserverOrOnNext.next)) {\n          if (optionsOrObserverOrOnNext.error && !isFunction(optionsOrObserverOrOnNext.error)) {\n            throw new Error('DocumentReference.onSnapshot failed: Observer.error must be a valid function.');\n          } // $FlowExpectedError: Not coping with the overloaded method signature\n\n\n          observer = {\n            next: optionsOrObserverOrOnNext.next,\n            error: optionsOrObserverOrOnNext.error\n          };\n        } else {\n          throw new Error('DocumentReference.onSnapshot failed: Observer.next must be a valid function.');\n        }\n      } else if (Object.prototype.hasOwnProperty.call(optionsOrObserverOrOnNext, 'includeMetadataChanges')) {\n        docListenOptions = optionsOrObserverOrOnNext; // Called with: Options, onNext, ?onError\n\n        if (isFunction(observerOrOnNextOrOnError)) {\n          if (onError && !isFunction(onError)) {\n            throw new Error('DocumentReference.onSnapshot failed: Third argument must be a valid function.');\n          } // $FlowExpectedError: Not coping with the overloaded method signature\n\n\n          observer = {\n            next: observerOrOnNextOrOnError,\n            error: onError\n          }; // Called with Options, Observer\n        } else if (observerOrOnNextOrOnError && isObject(observerOrOnNextOrOnError) && observerOrOnNextOrOnError.next) {\n          if (isFunction(observerOrOnNextOrOnError.next)) {\n            if (observerOrOnNextOrOnError.error && !isFunction(observerOrOnNextOrOnError.error)) {\n              throw new Error('DocumentReference.onSnapshot failed: Observer.error must be a valid function.');\n            }\n\n            observer = {\n              next: observerOrOnNextOrOnError.next,\n              error: observerOrOnNextOrOnError.error\n            };\n          } else {\n            throw new Error('DocumentReference.onSnapshot failed: Observer.next must be a valid function.');\n          }\n        } else {\n          throw new Error('DocumentReference.onSnapshot failed: Second argument must be a function or observer.');\n        }\n      } else {\n        throw new Error('DocumentReference.onSnapshot failed: First argument must be a function, observer or options.');\n      }\n    } else {\n      throw new Error('DocumentReference.onSnapshot failed: Called with invalid arguments.');\n    }\n\n    const listenerId = firestoreAutoId();\n\n    const listener = nativeDocumentSnapshot => {\n      const documentSnapshot = new DocumentSnapshot(this.firestore, nativeDocumentSnapshot);\n      observer.next(documentSnapshot);\n    }; // Listen to snapshot events\n\n\n    const snapshotSubscription = SharedEventEmitter.addListener(getAppEventName(this._firestore, `onDocumentSnapshot:${listenerId}`), listener);\n    let unsubscribe; // listen for snapshot error events\n\n    const errorSubscription = SharedEventEmitter.addListener(getAppEventName(this._firestore, `onDocumentSnapshotError:${listenerId}`), e => {\n      if (unsubscribe) unsubscribe();\n      const error = new SnapshotError(e);\n      if (observer.error) observer.error(error);else this.firestore.log.error(error);\n    }); // Add the native listener\n\n    getNativeModule(this._firestore).documentOnSnapshot(this.path, listenerId, docListenOptions); // return an unsubscribe method\n\n    unsubscribe = () => {\n      snapshotSubscription.remove();\n      errorSubscription.remove(); // cancel native listener\n\n      getNativeModule(this._firestore).documentOffSnapshot(this.path, listenerId);\n    };\n\n    return unsubscribe;\n  }\n\n  set(data, options) {\n    const nativeData = buildNativeMap(data);\n    return getNativeModule(this._firestore).documentSet(this.path, nativeData, options);\n  }\n\n  update(...args) {\n    const data = parseUpdateArgs(args, 'DocumentReference.update');\n    const nativeData = buildNativeMap(data);\n    return getNativeModule(this._firestore).documentUpdate(this.path, nativeData);\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}