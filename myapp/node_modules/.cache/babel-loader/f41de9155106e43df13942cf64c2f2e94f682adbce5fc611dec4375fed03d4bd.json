{"ast":null,"code":"/**\n * \n * AndroidNotification representation wrapper\n */\nimport AndroidAction, { fromNativeAndroidAction } from './AndroidAction';\nimport { BadgeIconType, Category, GroupAlert, Priority } from './types';\nexport default class AndroidNotification {\n  // _publicVersion: Notification;\n  // TODO: style: Style; // Need to figure out if this can work\n  // android unsupported\n  // content: RemoteViews\n  // contentIntent: PendingIntent - need to look at what this is\n  // customBigContentView: RemoteViews\n  // customContentView: RemoteViews\n  // customHeadsUpContentView: RemoteViews\n  // deleteIntent: PendingIntent\n  // fullScreenIntent: PendingIntent\n  // sound.streamType\n  constructor(notification, data) {\n    this._notification = notification;\n    if (data) {\n      this._actions = data.actions ? data.actions.map(action => fromNativeAndroidAction(action)) : [];\n      this._autoCancel = data.autoCancel;\n      this._badgeIconType = data.badgeIconType;\n      this._bigPicture = data.bigPicture;\n      this._bigText = data.bigText;\n      this._category = data.category;\n      this._channelId = data.channelId;\n      this._clickAction = data.clickAction;\n      this._color = data.color;\n      this._colorized = data.colorized;\n      this._contentInfo = data.contentInfo;\n      this._defaults = data.defaults;\n      this._group = data.group;\n      this._groupAlertBehaviour = data.groupAlertBehaviour;\n      this._groupSummary = data.groupSummary;\n      this._largeIcon = data.largeIcon;\n      this._lights = data.lights;\n      this._localOnly = data.localOnly;\n      this._number = data.number;\n      this._ongoing = data.ongoing;\n      this._onlyAlertOnce = data.onlyAlertOnce;\n      this._people = data.people;\n      this._priority = data.priority;\n      this._progress = data.progress; // _publicVersion: Notification;\n\n      this._remoteInputHistory = data.remoteInputHistory;\n      this._shortcutId = data.shortcutId;\n      this._showWhen = data.showWhen;\n      this._smallIcon = data.smallIcon;\n      this._sortKey = data.sortKey;\n      this._tag = data.tag;\n      this._ticker = data.ticker;\n      this._timeoutAfter = data.timeoutAfter;\n      this._usesChronometer = data.usesChronometer;\n      this._vibrate = data.vibrate;\n      this._visibility = data.visibility;\n      this._when = data.when;\n    } // Defaults\n\n    this._actions = this._actions || [];\n    this._people = this._people || [];\n    this._smallIcon = this._smallIcon || {\n      icon: 'ic_launcher'\n    };\n  }\n  get actions() {\n    return this._actions;\n  }\n  get autoCancel() {\n    return this._autoCancel;\n  }\n  get badgeIconType() {\n    return this._badgeIconType;\n  }\n  get bigPicture() {\n    return this._bigPicture;\n  }\n  get bigText() {\n    return this._bigText;\n  }\n  get category() {\n    return this._category;\n  }\n  get channelId() {\n    return this._channelId;\n  }\n  get clickAction() {\n    return this._clickAction;\n  }\n  get color() {\n    return this._color;\n  }\n  get colorized() {\n    return this._colorized;\n  }\n  get contentInfo() {\n    return this._contentInfo;\n  }\n  get defaults() {\n    return this._defaults;\n  }\n  get group() {\n    return this._group;\n  }\n  get groupAlertBehaviour() {\n    return this._groupAlertBehaviour;\n  }\n  get groupSummary() {\n    return this._groupSummary;\n  }\n  get largeIcon() {\n    return this._largeIcon;\n  }\n  get lights() {\n    return this._lights;\n  }\n  get localOnly() {\n    return this._localOnly;\n  }\n  get number() {\n    return this._number;\n  }\n  get ongoing() {\n    return this._ongoing;\n  }\n  get onlyAlertOnce() {\n    return this._onlyAlertOnce;\n  }\n  get people() {\n    return this._people;\n  }\n  get priority() {\n    return this._priority;\n  }\n  get progress() {\n    return this._progress;\n  }\n  get remoteInputHistory() {\n    return this._remoteInputHistory;\n  }\n  get shortcutId() {\n    return this._shortcutId;\n  }\n  get showWhen() {\n    return this._showWhen;\n  }\n  get smallIcon() {\n    return this._smallIcon;\n  }\n  get sortKey() {\n    return this._sortKey;\n  }\n  get tag() {\n    return this._tag;\n  }\n  get ticker() {\n    return this._ticker;\n  }\n  get timeoutAfter() {\n    return this._timeoutAfter;\n  }\n  get usesChronometer() {\n    return this._usesChronometer;\n  }\n  get vibrate() {\n    return this._vibrate;\n  }\n  get visibility() {\n    return this._visibility;\n  }\n  get when() {\n    return this._when;\n  }\n  /**\n   *\n   * @param action\n   * @returns {Notification}\n   */\n\n  addAction(action) {\n    if (!(action instanceof AndroidAction)) {\n      throw new Error(`AndroidNotification:addAction expects an 'AndroidAction' but got type ${typeof action}`);\n    }\n    this._actions.push(action);\n    return this._notification;\n  }\n  /**\n   *\n   * @param person\n   * @returns {Notification}\n   */\n\n  addPerson(person) {\n    this._people.push(person);\n    return this._notification;\n  }\n  /**\n   *\n   * @param autoCancel\n   * @returns {Notification}\n   */\n\n  setAutoCancel(autoCancel) {\n    this._autoCancel = autoCancel;\n    return this._notification;\n  }\n  /**\n   *\n   * @param badgeIconType\n   * @returns {Notification}\n   */\n\n  setBadgeIconType(badgeIconType) {\n    if (!Object.values(BadgeIconType).includes(badgeIconType)) {\n      throw new Error(`AndroidNotification:setBadgeIconType Invalid BadgeIconType: ${badgeIconType}`);\n    }\n    this._badgeIconType = badgeIconType;\n    return this._notification;\n  }\n  setBigPicture(picture, largeIcon, contentTitle, summaryText) {\n    this._bigPicture = {\n      contentTitle,\n      largeIcon,\n      picture,\n      summaryText\n    };\n    return this._notification;\n  }\n  setBigText(text, contentTitle, summaryText) {\n    this._bigText = {\n      contentTitle,\n      summaryText,\n      text\n    };\n    return this._notification;\n  }\n  /**\n   *\n   * @param category\n   * @returns {Notification}\n   */\n\n  setCategory(category) {\n    if (!Object.values(Category).includes(category)) {\n      throw new Error(`AndroidNotification:setCategory Invalid Category: ${category}`);\n    }\n    this._category = category;\n    return this._notification;\n  }\n  /**\n   *\n   * @param channelId\n   * @returns {Notification}\n   */\n\n  setChannelId(channelId) {\n    this._channelId = channelId;\n    return this._notification;\n  }\n  /**\n   *\n   * @param clickAction\n   * @returns {Notification}\n   */\n\n  setClickAction(clickAction) {\n    this._clickAction = clickAction;\n    return this._notification;\n  }\n  /**\n   *\n   * @param color\n   * @returns {Notification}\n   */\n\n  setColor(color) {\n    this._color = color;\n    return this._notification;\n  }\n  /**\n   *\n   * @param colorized\n   * @returns {Notification}\n   */\n\n  setColorized(colorized) {\n    this._colorized = colorized;\n    return this._notification;\n  }\n  /**\n   *\n   * @param contentInfo\n   * @returns {Notification}\n   */\n\n  setContentInfo(contentInfo) {\n    this._contentInfo = contentInfo;\n    return this._notification;\n  }\n  /**\n   *\n   * @param defaults\n   * @returns {Notification}\n   */\n\n  setDefaults(defaults) {\n    this._defaults = defaults;\n    return this._notification;\n  }\n  /**\n   *\n   * @param group\n   * @returns {Notification}\n   */\n\n  setGroup(group) {\n    this._group = group;\n    return this._notification;\n  }\n  /**\n   *\n   * @param groupAlertBehaviour\n   * @returns {Notification}\n   */\n\n  setGroupAlertBehaviour(groupAlertBehaviour) {\n    if (!Object.values(GroupAlert).includes(groupAlertBehaviour)) {\n      throw new Error(`AndroidNotification:setGroupAlertBehaviour Invalid GroupAlert: ${groupAlertBehaviour}`);\n    }\n    this._groupAlertBehaviour = groupAlertBehaviour;\n    return this._notification;\n  }\n  /**\n   *\n   * @param groupSummary\n   * @returns {Notification}\n   */\n\n  setGroupSummary(groupSummary) {\n    this._groupSummary = groupSummary;\n    return this._notification;\n  }\n  /**\n   *\n   * @param largeIcon\n   * @returns {Notification}\n   */\n\n  setLargeIcon(largeIcon) {\n    this._largeIcon = largeIcon;\n    return this._notification;\n  }\n  /**\n   *\n   * @param argb\n   * @param onMs\n   * @param offMs\n   * @returns {Notification}\n   */\n\n  setLights(argb, onMs, offMs) {\n    this._lights = {\n      argb,\n      onMs,\n      offMs\n    };\n    return this._notification;\n  }\n  /**\n   *\n   * @param localOnly\n   * @returns {Notification}\n   */\n\n  setLocalOnly(localOnly) {\n    this._localOnly = localOnly;\n    return this._notification;\n  }\n  /**\n   *\n   * @param number\n   * @returns {Notification}\n   */\n\n  setNumber(number) {\n    this._number = number;\n    return this._notification;\n  }\n  /**\n   *\n   * @param ongoing\n   * @returns {Notification}\n   */\n\n  setOngoing(ongoing) {\n    this._ongoing = ongoing;\n    return this._notification;\n  }\n  /**\n   *\n   * @param onlyAlertOnce\n   * @returns {Notification}\n   */\n\n  setOnlyAlertOnce(onlyAlertOnce) {\n    this._onlyAlertOnce = onlyAlertOnce;\n    return this._notification;\n  }\n  /**\n   *\n   * @param priority\n   * @returns {Notification}\n   */\n\n  setPriority(priority) {\n    if (!Object.values(Priority).includes(priority)) {\n      throw new Error(`AndroidNotification:setPriority Invalid Priority: ${priority}`);\n    }\n    this._priority = priority;\n    return this._notification;\n  }\n  /**\n   *\n   * @param max\n   * @param progress\n   * @param indeterminate\n   * @returns {Notification}\n   */\n\n  setProgress(max, progress, indeterminate) {\n    this._progress = {\n      max,\n      progress,\n      indeterminate\n    };\n    return this._notification;\n  }\n  /**\n   *\n   * @param publicVersion\n   * @returns {Notification}\n   */\n\n  /* setPublicVersion(publicVersion: Notification): Notification {\n    this._publicVersion = publicVersion;\n    return this._notification;\n  } */\n\n  /**\n   *\n   * @param remoteInputHistory\n   * @returns {Notification}\n   */\n\n  setRemoteInputHistory(remoteInputHistory) {\n    this._remoteInputHistory = remoteInputHistory;\n    return this._notification;\n  }\n  /**\n   *\n   * @param shortcutId\n   * @returns {Notification}\n   */\n\n  setShortcutId(shortcutId) {\n    this._shortcutId = shortcutId;\n    return this._notification;\n  }\n  /**\n   *\n   * @param showWhen\n   * @returns {Notification}\n   */\n\n  setShowWhen(showWhen) {\n    this._showWhen = showWhen;\n    return this._notification;\n  }\n  /**\n   *\n   * @param icon\n   * @param level\n   * @returns {Notification}\n   */\n\n  setSmallIcon(icon, level) {\n    this._smallIcon = {\n      icon,\n      level\n    };\n    return this._notification;\n  }\n  /**\n   *\n   * @param sortKey\n   * @returns {Notification}\n   */\n\n  setSortKey(sortKey) {\n    this._sortKey = sortKey;\n    return this._notification;\n  }\n  /**\n   *\n   * @param tag\n   * @returns {Notification}\n   */\n\n  setTag(tag) {\n    this._tag = tag;\n    return this._notification;\n  }\n  /**\n   *\n   * @param ticker\n   * @returns {Notification}\n   */\n\n  setTicker(ticker) {\n    this._ticker = ticker;\n    return this._notification;\n  }\n  /**\n   *\n   * @param timeoutAfter\n   * @returns {Notification}\n   */\n\n  setTimeoutAfter(timeoutAfter) {\n    this._timeoutAfter = timeoutAfter;\n    return this._notification;\n  }\n  /**\n   *\n   * @param usesChronometer\n   * @returns {Notification}\n   */\n\n  setUsesChronometer(usesChronometer) {\n    this._usesChronometer = usesChronometer;\n    return this._notification;\n  }\n  /**\n   *\n   * @param vibrate\n   * @returns {Notification}\n   */\n\n  setVibrate(vibrate) {\n    this._vibrate = vibrate;\n    return this._notification;\n  }\n  /**\n   *\n   * @param visibility\n   * @returns {Notification}\n   */\n\n  setVisibility(visibility) {\n    this._visibility = visibility;\n    return this._notification;\n  }\n  /**\n   *\n   * @param when\n   * @returns {Notification}\n   */\n\n  setWhen(when) {\n    this._when = when;\n    return this._notification;\n  }\n  build() {\n    // TODO: Validation of required fields\n    if (!this._channelId) {\n      throw new Error('AndroidNotification: Missing required `channelId` property');\n    } else if (!this._smallIcon) {\n      throw new Error('AndroidNotification: Missing required `smallIcon` property');\n    }\n    return {\n      actions: this._actions.map(action => action.build()),\n      autoCancel: this._autoCancel,\n      badgeIconType: this._badgeIconType,\n      bigPicture: this._bigPicture,\n      bigText: this._bigText,\n      category: this._category,\n      channelId: this._channelId,\n      clickAction: this._clickAction,\n      color: this._color,\n      colorized: this._colorized,\n      contentInfo: this._contentInfo,\n      defaults: this._defaults,\n      group: this._group,\n      groupAlertBehaviour: this._groupAlertBehaviour,\n      groupSummary: this._groupSummary,\n      largeIcon: this._largeIcon,\n      lights: this._lights,\n      localOnly: this._localOnly,\n      number: this._number,\n      ongoing: this._ongoing,\n      onlyAlertOnce: this._onlyAlertOnce,\n      people: this._people,\n      priority: this._priority,\n      progress: this._progress,\n      // publicVersion: this._publicVersion,\n      remoteInputHistory: this._remoteInputHistory,\n      shortcutId: this._shortcutId,\n      showWhen: this._showWhen,\n      smallIcon: this._smallIcon,\n      sortKey: this._sortKey,\n      // TODO: style: Style,\n      tag: this._tag,\n      ticker: this._ticker,\n      timeoutAfter: this._timeoutAfter,\n      usesChronometer: this._usesChronometer,\n      vibrate: this._vibrate,\n      visibility: this._visibility,\n      when: this._when\n    };\n  }\n}","map":{"version":3,"names":["AndroidAction","fromNativeAndroidAction","BadgeIconType","Category","GroupAlert","Priority","AndroidNotification","constructor","notification","data","_notification","_actions","actions","map","action","_autoCancel","autoCancel","_badgeIconType","badgeIconType","_bigPicture","bigPicture","_bigText","bigText","_category","category","_channelId","channelId","_clickAction","clickAction","_color","color","_colorized","colorized","_contentInfo","contentInfo","_defaults","defaults","_group","group","_groupAlertBehaviour","groupAlertBehaviour","_groupSummary","groupSummary","_largeIcon","largeIcon","_lights","lights","_localOnly","localOnly","_number","number","_ongoing","ongoing","_onlyAlertOnce","onlyAlertOnce","_people","people","_priority","priority","_progress","progress","_remoteInputHistory","remoteInputHistory","_shortcutId","shortcutId","_showWhen","showWhen","_smallIcon","smallIcon","_sortKey","sortKey","_tag","tag","_ticker","ticker","_timeoutAfter","timeoutAfter","_usesChronometer","usesChronometer","_vibrate","vibrate","_visibility","visibility","_when","when","icon","addAction","Error","push","addPerson","person","setAutoCancel","setBadgeIconType","Object","values","includes","setBigPicture","picture","contentTitle","summaryText","setBigText","text","setCategory","setChannelId","setClickAction","setColor","setColorized","setContentInfo","setDefaults","setGroup","setGroupAlertBehaviour","setGroupSummary","setLargeIcon","setLights","argb","onMs","offMs","setLocalOnly","setNumber","setOngoing","setOnlyAlertOnce","setPriority","setProgress","max","indeterminate","setRemoteInputHistory","setShortcutId","setShowWhen","setSmallIcon","level","setSortKey","setTag","setTicker","setTimeoutAfter","setUsesChronometer","setVibrate","setVisibility","setWhen","build"],"sources":["/Users/sharusan/MeetMyCar/myapp/node_modules/react-native-firebase/dist/modules/notifications/AndroidNotification.js"],"sourcesContent":["/**\n * \n * AndroidNotification representation wrapper\n */\nimport AndroidAction, { fromNativeAndroidAction } from './AndroidAction';\nimport { BadgeIconType, Category, GroupAlert, Priority } from './types';\nexport default class AndroidNotification {\n  // _publicVersion: Notification;\n  // TODO: style: Style; // Need to figure out if this can work\n  // android unsupported\n  // content: RemoteViews\n  // contentIntent: PendingIntent - need to look at what this is\n  // customBigContentView: RemoteViews\n  // customContentView: RemoteViews\n  // customHeadsUpContentView: RemoteViews\n  // deleteIntent: PendingIntent\n  // fullScreenIntent: PendingIntent\n  // sound.streamType\n  constructor(notification, data) {\n    this._notification = notification;\n\n    if (data) {\n      this._actions = data.actions ? data.actions.map(action => fromNativeAndroidAction(action)) : [];\n      this._autoCancel = data.autoCancel;\n      this._badgeIconType = data.badgeIconType;\n      this._bigPicture = data.bigPicture;\n      this._bigText = data.bigText;\n      this._category = data.category;\n      this._channelId = data.channelId;\n      this._clickAction = data.clickAction;\n      this._color = data.color;\n      this._colorized = data.colorized;\n      this._contentInfo = data.contentInfo;\n      this._defaults = data.defaults;\n      this._group = data.group;\n      this._groupAlertBehaviour = data.groupAlertBehaviour;\n      this._groupSummary = data.groupSummary;\n      this._largeIcon = data.largeIcon;\n      this._lights = data.lights;\n      this._localOnly = data.localOnly;\n      this._number = data.number;\n      this._ongoing = data.ongoing;\n      this._onlyAlertOnce = data.onlyAlertOnce;\n      this._people = data.people;\n      this._priority = data.priority;\n      this._progress = data.progress; // _publicVersion: Notification;\n\n      this._remoteInputHistory = data.remoteInputHistory;\n      this._shortcutId = data.shortcutId;\n      this._showWhen = data.showWhen;\n      this._smallIcon = data.smallIcon;\n      this._sortKey = data.sortKey;\n      this._tag = data.tag;\n      this._ticker = data.ticker;\n      this._timeoutAfter = data.timeoutAfter;\n      this._usesChronometer = data.usesChronometer;\n      this._vibrate = data.vibrate;\n      this._visibility = data.visibility;\n      this._when = data.when;\n    } // Defaults\n\n\n    this._actions = this._actions || [];\n    this._people = this._people || [];\n    this._smallIcon = this._smallIcon || {\n      icon: 'ic_launcher'\n    };\n  }\n\n  get actions() {\n    return this._actions;\n  }\n\n  get autoCancel() {\n    return this._autoCancel;\n  }\n\n  get badgeIconType() {\n    return this._badgeIconType;\n  }\n\n  get bigPicture() {\n    return this._bigPicture;\n  }\n\n  get bigText() {\n    return this._bigText;\n  }\n\n  get category() {\n    return this._category;\n  }\n\n  get channelId() {\n    return this._channelId;\n  }\n\n  get clickAction() {\n    return this._clickAction;\n  }\n\n  get color() {\n    return this._color;\n  }\n\n  get colorized() {\n    return this._colorized;\n  }\n\n  get contentInfo() {\n    return this._contentInfo;\n  }\n\n  get defaults() {\n    return this._defaults;\n  }\n\n  get group() {\n    return this._group;\n  }\n\n  get groupAlertBehaviour() {\n    return this._groupAlertBehaviour;\n  }\n\n  get groupSummary() {\n    return this._groupSummary;\n  }\n\n  get largeIcon() {\n    return this._largeIcon;\n  }\n\n  get lights() {\n    return this._lights;\n  }\n\n  get localOnly() {\n    return this._localOnly;\n  }\n\n  get number() {\n    return this._number;\n  }\n\n  get ongoing() {\n    return this._ongoing;\n  }\n\n  get onlyAlertOnce() {\n    return this._onlyAlertOnce;\n  }\n\n  get people() {\n    return this._people;\n  }\n\n  get priority() {\n    return this._priority;\n  }\n\n  get progress() {\n    return this._progress;\n  }\n\n  get remoteInputHistory() {\n    return this._remoteInputHistory;\n  }\n\n  get shortcutId() {\n    return this._shortcutId;\n  }\n\n  get showWhen() {\n    return this._showWhen;\n  }\n\n  get smallIcon() {\n    return this._smallIcon;\n  }\n\n  get sortKey() {\n    return this._sortKey;\n  }\n\n  get tag() {\n    return this._tag;\n  }\n\n  get ticker() {\n    return this._ticker;\n  }\n\n  get timeoutAfter() {\n    return this._timeoutAfter;\n  }\n\n  get usesChronometer() {\n    return this._usesChronometer;\n  }\n\n  get vibrate() {\n    return this._vibrate;\n  }\n\n  get visibility() {\n    return this._visibility;\n  }\n\n  get when() {\n    return this._when;\n  }\n  /**\n   *\n   * @param action\n   * @returns {Notification}\n   */\n\n\n  addAction(action) {\n    if (!(action instanceof AndroidAction)) {\n      throw new Error(`AndroidNotification:addAction expects an 'AndroidAction' but got type ${typeof action}`);\n    }\n\n    this._actions.push(action);\n\n    return this._notification;\n  }\n  /**\n   *\n   * @param person\n   * @returns {Notification}\n   */\n\n\n  addPerson(person) {\n    this._people.push(person);\n\n    return this._notification;\n  }\n  /**\n   *\n   * @param autoCancel\n   * @returns {Notification}\n   */\n\n\n  setAutoCancel(autoCancel) {\n    this._autoCancel = autoCancel;\n    return this._notification;\n  }\n  /**\n   *\n   * @param badgeIconType\n   * @returns {Notification}\n   */\n\n\n  setBadgeIconType(badgeIconType) {\n    if (!Object.values(BadgeIconType).includes(badgeIconType)) {\n      throw new Error(`AndroidNotification:setBadgeIconType Invalid BadgeIconType: ${badgeIconType}`);\n    }\n\n    this._badgeIconType = badgeIconType;\n    return this._notification;\n  }\n\n  setBigPicture(picture, largeIcon, contentTitle, summaryText) {\n    this._bigPicture = {\n      contentTitle,\n      largeIcon,\n      picture,\n      summaryText\n    };\n    return this._notification;\n  }\n\n  setBigText(text, contentTitle, summaryText) {\n    this._bigText = {\n      contentTitle,\n      summaryText,\n      text\n    };\n    return this._notification;\n  }\n  /**\n   *\n   * @param category\n   * @returns {Notification}\n   */\n\n\n  setCategory(category) {\n    if (!Object.values(Category).includes(category)) {\n      throw new Error(`AndroidNotification:setCategory Invalid Category: ${category}`);\n    }\n\n    this._category = category;\n    return this._notification;\n  }\n  /**\n   *\n   * @param channelId\n   * @returns {Notification}\n   */\n\n\n  setChannelId(channelId) {\n    this._channelId = channelId;\n    return this._notification;\n  }\n  /**\n   *\n   * @param clickAction\n   * @returns {Notification}\n   */\n\n\n  setClickAction(clickAction) {\n    this._clickAction = clickAction;\n    return this._notification;\n  }\n  /**\n   *\n   * @param color\n   * @returns {Notification}\n   */\n\n\n  setColor(color) {\n    this._color = color;\n    return this._notification;\n  }\n  /**\n   *\n   * @param colorized\n   * @returns {Notification}\n   */\n\n\n  setColorized(colorized) {\n    this._colorized = colorized;\n    return this._notification;\n  }\n  /**\n   *\n   * @param contentInfo\n   * @returns {Notification}\n   */\n\n\n  setContentInfo(contentInfo) {\n    this._contentInfo = contentInfo;\n    return this._notification;\n  }\n  /**\n   *\n   * @param defaults\n   * @returns {Notification}\n   */\n\n\n  setDefaults(defaults) {\n    this._defaults = defaults;\n    return this._notification;\n  }\n  /**\n   *\n   * @param group\n   * @returns {Notification}\n   */\n\n\n  setGroup(group) {\n    this._group = group;\n    return this._notification;\n  }\n  /**\n   *\n   * @param groupAlertBehaviour\n   * @returns {Notification}\n   */\n\n\n  setGroupAlertBehaviour(groupAlertBehaviour) {\n    if (!Object.values(GroupAlert).includes(groupAlertBehaviour)) {\n      throw new Error(`AndroidNotification:setGroupAlertBehaviour Invalid GroupAlert: ${groupAlertBehaviour}`);\n    }\n\n    this._groupAlertBehaviour = groupAlertBehaviour;\n    return this._notification;\n  }\n  /**\n   *\n   * @param groupSummary\n   * @returns {Notification}\n   */\n\n\n  setGroupSummary(groupSummary) {\n    this._groupSummary = groupSummary;\n    return this._notification;\n  }\n  /**\n   *\n   * @param largeIcon\n   * @returns {Notification}\n   */\n\n\n  setLargeIcon(largeIcon) {\n    this._largeIcon = largeIcon;\n    return this._notification;\n  }\n  /**\n   *\n   * @param argb\n   * @param onMs\n   * @param offMs\n   * @returns {Notification}\n   */\n\n\n  setLights(argb, onMs, offMs) {\n    this._lights = {\n      argb,\n      onMs,\n      offMs\n    };\n    return this._notification;\n  }\n  /**\n   *\n   * @param localOnly\n   * @returns {Notification}\n   */\n\n\n  setLocalOnly(localOnly) {\n    this._localOnly = localOnly;\n    return this._notification;\n  }\n  /**\n   *\n   * @param number\n   * @returns {Notification}\n   */\n\n\n  setNumber(number) {\n    this._number = number;\n    return this._notification;\n  }\n  /**\n   *\n   * @param ongoing\n   * @returns {Notification}\n   */\n\n\n  setOngoing(ongoing) {\n    this._ongoing = ongoing;\n    return this._notification;\n  }\n  /**\n   *\n   * @param onlyAlertOnce\n   * @returns {Notification}\n   */\n\n\n  setOnlyAlertOnce(onlyAlertOnce) {\n    this._onlyAlertOnce = onlyAlertOnce;\n    return this._notification;\n  }\n  /**\n   *\n   * @param priority\n   * @returns {Notification}\n   */\n\n\n  setPriority(priority) {\n    if (!Object.values(Priority).includes(priority)) {\n      throw new Error(`AndroidNotification:setPriority Invalid Priority: ${priority}`);\n    }\n\n    this._priority = priority;\n    return this._notification;\n  }\n  /**\n   *\n   * @param max\n   * @param progress\n   * @param indeterminate\n   * @returns {Notification}\n   */\n\n\n  setProgress(max, progress, indeterminate) {\n    this._progress = {\n      max,\n      progress,\n      indeterminate\n    };\n    return this._notification;\n  }\n  /**\n   *\n   * @param publicVersion\n   * @returns {Notification}\n   */\n\n  /* setPublicVersion(publicVersion: Notification): Notification {\n    this._publicVersion = publicVersion;\n    return this._notification;\n  } */\n\n  /**\n   *\n   * @param remoteInputHistory\n   * @returns {Notification}\n   */\n\n\n  setRemoteInputHistory(remoteInputHistory) {\n    this._remoteInputHistory = remoteInputHistory;\n    return this._notification;\n  }\n  /**\n   *\n   * @param shortcutId\n   * @returns {Notification}\n   */\n\n\n  setShortcutId(shortcutId) {\n    this._shortcutId = shortcutId;\n    return this._notification;\n  }\n  /**\n   *\n   * @param showWhen\n   * @returns {Notification}\n   */\n\n\n  setShowWhen(showWhen) {\n    this._showWhen = showWhen;\n    return this._notification;\n  }\n  /**\n   *\n   * @param icon\n   * @param level\n   * @returns {Notification}\n   */\n\n\n  setSmallIcon(icon, level) {\n    this._smallIcon = {\n      icon,\n      level\n    };\n    return this._notification;\n  }\n  /**\n   *\n   * @param sortKey\n   * @returns {Notification}\n   */\n\n\n  setSortKey(sortKey) {\n    this._sortKey = sortKey;\n    return this._notification;\n  }\n  /**\n   *\n   * @param tag\n   * @returns {Notification}\n   */\n\n\n  setTag(tag) {\n    this._tag = tag;\n    return this._notification;\n  }\n  /**\n   *\n   * @param ticker\n   * @returns {Notification}\n   */\n\n\n  setTicker(ticker) {\n    this._ticker = ticker;\n    return this._notification;\n  }\n  /**\n   *\n   * @param timeoutAfter\n   * @returns {Notification}\n   */\n\n\n  setTimeoutAfter(timeoutAfter) {\n    this._timeoutAfter = timeoutAfter;\n    return this._notification;\n  }\n  /**\n   *\n   * @param usesChronometer\n   * @returns {Notification}\n   */\n\n\n  setUsesChronometer(usesChronometer) {\n    this._usesChronometer = usesChronometer;\n    return this._notification;\n  }\n  /**\n   *\n   * @param vibrate\n   * @returns {Notification}\n   */\n\n\n  setVibrate(vibrate) {\n    this._vibrate = vibrate;\n    return this._notification;\n  }\n  /**\n   *\n   * @param visibility\n   * @returns {Notification}\n   */\n\n\n  setVisibility(visibility) {\n    this._visibility = visibility;\n    return this._notification;\n  }\n  /**\n   *\n   * @param when\n   * @returns {Notification}\n   */\n\n\n  setWhen(when) {\n    this._when = when;\n    return this._notification;\n  }\n\n  build() {\n    // TODO: Validation of required fields\n    if (!this._channelId) {\n      throw new Error('AndroidNotification: Missing required `channelId` property');\n    } else if (!this._smallIcon) {\n      throw new Error('AndroidNotification: Missing required `smallIcon` property');\n    }\n\n    return {\n      actions: this._actions.map(action => action.build()),\n      autoCancel: this._autoCancel,\n      badgeIconType: this._badgeIconType,\n      bigPicture: this._bigPicture,\n      bigText: this._bigText,\n      category: this._category,\n      channelId: this._channelId,\n      clickAction: this._clickAction,\n      color: this._color,\n      colorized: this._colorized,\n      contentInfo: this._contentInfo,\n      defaults: this._defaults,\n      group: this._group,\n      groupAlertBehaviour: this._groupAlertBehaviour,\n      groupSummary: this._groupSummary,\n      largeIcon: this._largeIcon,\n      lights: this._lights,\n      localOnly: this._localOnly,\n      number: this._number,\n      ongoing: this._ongoing,\n      onlyAlertOnce: this._onlyAlertOnce,\n      people: this._people,\n      priority: this._priority,\n      progress: this._progress,\n      // publicVersion: this._publicVersion,\n      remoteInputHistory: this._remoteInputHistory,\n      shortcutId: this._shortcutId,\n      showWhen: this._showWhen,\n      smallIcon: this._smallIcon,\n      sortKey: this._sortKey,\n      // TODO: style: Style,\n      tag: this._tag,\n      ticker: this._ticker,\n      timeoutAfter: this._timeoutAfter,\n      usesChronometer: this._usesChronometer,\n      vibrate: this._vibrate,\n      visibility: this._visibility,\n      when: this._when\n    };\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}