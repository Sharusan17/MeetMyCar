{"ast":null,"code":"/**\n * \n * Remote Config representation wrapper\n */\nimport { getLogger } from '../../utils/log';\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nexport const MODULE_NAME = 'RNFirebaseRemoteConfig';\nexport const NAMESPACE = 'config';\n\n/**\n * @class Config\n */\nexport default class RemoteConfig extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n    this._developerModeEnabled = false;\n  }\n  /**\n   * Converts a native map to single JS value\n   * @param nativeValue\n   * @returns {*}\n   * @private\n   */\n\n  _nativeValueToJS(nativeValue) {\n    return {\n      source: nativeValue.source,\n      val() {\n        if (nativeValue.boolValue !== null && (nativeValue.stringValue === 'true' || nativeValue.stringValue === 'false' || nativeValue.stringValue === null)) return nativeValue.boolValue;\n        if (nativeValue.numberValue !== null && nativeValue.numberValue !== undefined && (nativeValue.stringValue == null || nativeValue.stringValue === '' || nativeValue.numberValue.toString() === nativeValue.stringValue)) return nativeValue.numberValue;\n        if (nativeValue.dataValue !== nativeValue.stringValue && (nativeValue.stringValue == null || nativeValue.stringValue === '')) return nativeValue.dataValue;\n        return nativeValue.stringValue;\n      }\n    };\n  }\n  /**\n   * Enable Remote Config developer mode to allow for frequent refreshes of the cache\n   */\n\n  enableDeveloperMode() {\n    if (!this._developerModeEnabled) {\n      getLogger(this).debug('Enabled developer mode');\n      getNativeModule(this).enableDeveloperMode();\n      this._developerModeEnabled = true;\n    }\n  }\n  /**\n   * Fetches Remote Config data\n   * Call activateFetched to make fetched data available in app\n   * @returns {*|Promise.<String>}:\n   */\n\n  fetch(expiration) {\n    if (expiration !== undefined) {\n      getLogger(this).debug(`Fetching remote config data with expiration ${expiration.toString()}`);\n      return getNativeModule(this).fetchWithExpirationDuration(expiration);\n    }\n    getLogger(this).debug('Fetching remote config data');\n    return getNativeModule(this).fetch();\n  }\n  /**\n   * Applies Fetched Config data to the Active Config\n   * @returns {*|Promise.<Bool>}\n   * resolves if there was a Fetched Config, and it was activated,\n   * rejects if no Fetched Config was found, or the Fetched Config was already activated.\n   */\n\n  activateFetched() {\n    getLogger(this).debug('Activating remote config');\n    return getNativeModule(this).activateFetched();\n  }\n  /**\n   * Gets the config value of the default namespace.\n   * @param key: Config key\n   * @returns {*|Promise.<Object>}, will always resolve\n   * Object looks like\n   *  {\n   *    \"stringValue\" : stringValue,\n   *    \"numberValue\" : numberValue,\n   *    \"dataValue\" : dataValue,\n   *    \"boolValue\" : boolValue,\n   *    \"source\" : OneOf<String>(remoteConfigSourceRemote|remoteConfigSourceDefault|remoteConfigSourceStatic)\n   *  }\n   */\n\n  getValue(key) {\n    return getNativeModule(this).getValue(key || '').then(this._nativeValueToJS);\n  }\n  /**\n   * Gets the config value of the default namespace.\n   * @param keys: Config key\n   * @returns {*|Promise.<Object>}, will always resolve.\n   * Result will be a dictionary of key and config objects\n   * Object looks like\n   *  {\n   *    \"stringValue\" : stringValue,\n   *    \"numberValue\" : numberValue,\n   *    \"dataValue\" : dataValue,\n   *    \"boolValue\" : boolValue,\n   *    \"source\" : OneOf<String>(remoteConfigSourceRemote|remoteConfigSourceDefault|remoteConfigSourceStatic)\n   *  }\n   */\n\n  getValues(keys) {\n    return getNativeModule(this).getValues(keys || []).then(nativeValues => {\n      const values = {};\n      for (let i = 0, len = keys.length; i < len; i++) {\n        values[keys[i]] = this._nativeValueToJS(nativeValues[i]);\n      }\n      return values;\n    });\n  }\n  /**\n   * Get the set of parameter keys that start with the given prefix, from the default namespace\n   * @param prefix: The key prefix to look for. If prefix is nil or empty, returns all the keys.\n   * @returns {*|Promise.<Array<String>>}\n   */\n\n  getKeysByPrefix(prefix) {\n    return getNativeModule(this).getKeysByPrefix(prefix);\n  }\n  /**\n   * Sets config defaults for parameter keys and values in the default namespace config.\n   * @param defaults: A dictionary mapping a String key to a Object values.\n   */\n\n  setDefaults(defaults) {\n    getNativeModule(this).setDefaults(defaults);\n  }\n  /**\n   * Sets default configs from plist for default namespace;\n   * @param resource: The plist file name or resource ID\n   */\n\n  setDefaultsFromResource(resource) {\n    getNativeModule(this).setDefaultsFromResource(resource);\n  }\n}\nexport const statics = {};","map":{"version":3,"names":["getLogger","ModuleBase","getNativeModule","MODULE_NAME","NAMESPACE","RemoteConfig","constructor","app","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","_developerModeEnabled","_nativeValueToJS","nativeValue","source","val","boolValue","stringValue","numberValue","undefined","toString","dataValue","enableDeveloperMode","debug","fetch","expiration","fetchWithExpirationDuration","activateFetched","getValue","key","then","getValues","keys","nativeValues","values","i","len","length","getKeysByPrefix","prefix","setDefaults","defaults","setDefaultsFromResource","resource","statics"],"sources":["/Users/sharusan/MeetMyCar/myapp/node_modules/react-native-firebase/dist/modules/config/index.js"],"sourcesContent":["/**\n * \n * Remote Config representation wrapper\n */\nimport { getLogger } from '../../utils/log';\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nexport const MODULE_NAME = 'RNFirebaseRemoteConfig';\nexport const NAMESPACE = 'config';\n\n/**\n * @class Config\n */\nexport default class RemoteConfig extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n    this._developerModeEnabled = false;\n  }\n  /**\n   * Converts a native map to single JS value\n   * @param nativeValue\n   * @returns {*}\n   * @private\n   */\n\n\n  _nativeValueToJS(nativeValue) {\n    return {\n      source: nativeValue.source,\n\n      val() {\n        if (nativeValue.boolValue !== null && (nativeValue.stringValue === 'true' || nativeValue.stringValue === 'false' || nativeValue.stringValue === null)) return nativeValue.boolValue;\n        if (nativeValue.numberValue !== null && nativeValue.numberValue !== undefined && (nativeValue.stringValue == null || nativeValue.stringValue === '' || nativeValue.numberValue.toString() === nativeValue.stringValue)) return nativeValue.numberValue;\n        if (nativeValue.dataValue !== nativeValue.stringValue && (nativeValue.stringValue == null || nativeValue.stringValue === '')) return nativeValue.dataValue;\n        return nativeValue.stringValue;\n      }\n\n    };\n  }\n  /**\n   * Enable Remote Config developer mode to allow for frequent refreshes of the cache\n   */\n\n\n  enableDeveloperMode() {\n    if (!this._developerModeEnabled) {\n      getLogger(this).debug('Enabled developer mode');\n      getNativeModule(this).enableDeveloperMode();\n      this._developerModeEnabled = true;\n    }\n  }\n  /**\n   * Fetches Remote Config data\n   * Call activateFetched to make fetched data available in app\n   * @returns {*|Promise.<String>}:\n   */\n\n\n  fetch(expiration) {\n    if (expiration !== undefined) {\n      getLogger(this).debug(`Fetching remote config data with expiration ${expiration.toString()}`);\n      return getNativeModule(this).fetchWithExpirationDuration(expiration);\n    }\n\n    getLogger(this).debug('Fetching remote config data');\n    return getNativeModule(this).fetch();\n  }\n  /**\n   * Applies Fetched Config data to the Active Config\n   * @returns {*|Promise.<Bool>}\n   * resolves if there was a Fetched Config, and it was activated,\n   * rejects if no Fetched Config was found, or the Fetched Config was already activated.\n   */\n\n\n  activateFetched() {\n    getLogger(this).debug('Activating remote config');\n    return getNativeModule(this).activateFetched();\n  }\n  /**\n   * Gets the config value of the default namespace.\n   * @param key: Config key\n   * @returns {*|Promise.<Object>}, will always resolve\n   * Object looks like\n   *  {\n   *    \"stringValue\" : stringValue,\n   *    \"numberValue\" : numberValue,\n   *    \"dataValue\" : dataValue,\n   *    \"boolValue\" : boolValue,\n   *    \"source\" : OneOf<String>(remoteConfigSourceRemote|remoteConfigSourceDefault|remoteConfigSourceStatic)\n   *  }\n   */\n\n\n  getValue(key) {\n    return getNativeModule(this).getValue(key || '').then(this._nativeValueToJS);\n  }\n  /**\n   * Gets the config value of the default namespace.\n   * @param keys: Config key\n   * @returns {*|Promise.<Object>}, will always resolve.\n   * Result will be a dictionary of key and config objects\n   * Object looks like\n   *  {\n   *    \"stringValue\" : stringValue,\n   *    \"numberValue\" : numberValue,\n   *    \"dataValue\" : dataValue,\n   *    \"boolValue\" : boolValue,\n   *    \"source\" : OneOf<String>(remoteConfigSourceRemote|remoteConfigSourceDefault|remoteConfigSourceStatic)\n   *  }\n   */\n\n\n  getValues(keys) {\n    return getNativeModule(this).getValues(keys || []).then(nativeValues => {\n      const values = {};\n\n      for (let i = 0, len = keys.length; i < len; i++) {\n        values[keys[i]] = this._nativeValueToJS(nativeValues[i]);\n      }\n\n      return values;\n    });\n  }\n  /**\n   * Get the set of parameter keys that start with the given prefix, from the default namespace\n   * @param prefix: The key prefix to look for. If prefix is nil or empty, returns all the keys.\n   * @returns {*|Promise.<Array<String>>}\n   */\n\n\n  getKeysByPrefix(prefix) {\n    return getNativeModule(this).getKeysByPrefix(prefix);\n  }\n  /**\n   * Sets config defaults for parameter keys and values in the default namespace config.\n   * @param defaults: A dictionary mapping a String key to a Object values.\n   */\n\n\n  setDefaults(defaults) {\n    getNativeModule(this).setDefaults(defaults);\n  }\n  /**\n   * Sets default configs from plist for default namespace;\n   * @param resource: The plist file name or resource ID\n   */\n\n\n  setDefaultsFromResource(resource) {\n    getNativeModule(this).setDefaultsFromResource(resource);\n  }\n\n}\nexport const statics = {};"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,SAASC,eAAe,QAAQ,oBAAoB;AACpD,OAAO,MAAMC,WAAW,GAAG,wBAAwB;AACnD,OAAO,MAAMC,SAAS,GAAG,QAAQ;;AAEjC;AACA;AACA;AACA,eAAe,MAAMC,YAAY,SAASJ,UAAU,CAAC;EACnDK,WAAWA,CAACC,GAAG,EAAE;IACf,KAAK,CAACA,GAAG,EAAE;MACTC,UAAU,EAAEL,WAAW;MACvBM,kBAAkB,EAAE,KAAK;MACzBC,mBAAmB,EAAE,KAAK;MAC1BC,SAAS,EAAEP;IACb,CAAC,CAAC;IACF,IAAI,CAACQ,qBAAqB,GAAG,KAAK;EACpC;EACA;AACF;AACA;AACA;AACA;AACA;;EAGEC,gBAAgBA,CAACC,WAAW,EAAE;IAC5B,OAAO;MACLC,MAAM,EAAED,WAAW,CAACC,MAAM;MAE1BC,GAAGA,CAAA,EAAG;QACJ,IAAIF,WAAW,CAACG,SAAS,KAAK,IAAI,KAAKH,WAAW,CAACI,WAAW,KAAK,MAAM,IAAIJ,WAAW,CAACI,WAAW,KAAK,OAAO,IAAIJ,WAAW,CAACI,WAAW,KAAK,IAAI,CAAC,EAAE,OAAOJ,WAAW,CAACG,SAAS;QACnL,IAAIH,WAAW,CAACK,WAAW,KAAK,IAAI,IAAIL,WAAW,CAACK,WAAW,KAAKC,SAAS,KAAKN,WAAW,CAACI,WAAW,IAAI,IAAI,IAAIJ,WAAW,CAACI,WAAW,KAAK,EAAE,IAAIJ,WAAW,CAACK,WAAW,CAACE,QAAQ,CAAC,CAAC,KAAKP,WAAW,CAACI,WAAW,CAAC,EAAE,OAAOJ,WAAW,CAACK,WAAW;QACtP,IAAIL,WAAW,CAACQ,SAAS,KAAKR,WAAW,CAACI,WAAW,KAAKJ,WAAW,CAACI,WAAW,IAAI,IAAI,IAAIJ,WAAW,CAACI,WAAW,KAAK,EAAE,CAAC,EAAE,OAAOJ,WAAW,CAACQ,SAAS;QAC1J,OAAOR,WAAW,CAACI,WAAW;MAChC;IAEF,CAAC;EACH;EACA;AACF;AACA;;EAGEK,mBAAmBA,CAAA,EAAG;IACpB,IAAI,CAAC,IAAI,CAACX,qBAAqB,EAAE;MAC/BZ,SAAS,CAAC,IAAI,CAAC,CAACwB,KAAK,CAAC,wBAAwB,CAAC;MAC/CtB,eAAe,CAAC,IAAI,CAAC,CAACqB,mBAAmB,CAAC,CAAC;MAC3C,IAAI,CAACX,qBAAqB,GAAG,IAAI;IACnC;EACF;EACA;AACF;AACA;AACA;AACA;;EAGEa,KAAKA,CAACC,UAAU,EAAE;IAChB,IAAIA,UAAU,KAAKN,SAAS,EAAE;MAC5BpB,SAAS,CAAC,IAAI,CAAC,CAACwB,KAAK,CAAE,+CAA8CE,UAAU,CAACL,QAAQ,CAAC,CAAE,EAAC,CAAC;MAC7F,OAAOnB,eAAe,CAAC,IAAI,CAAC,CAACyB,2BAA2B,CAACD,UAAU,CAAC;IACtE;IAEA1B,SAAS,CAAC,IAAI,CAAC,CAACwB,KAAK,CAAC,6BAA6B,CAAC;IACpD,OAAOtB,eAAe,CAAC,IAAI,CAAC,CAACuB,KAAK,CAAC,CAAC;EACtC;EACA;AACF;AACA;AACA;AACA;AACA;;EAGEG,eAAeA,CAAA,EAAG;IAChB5B,SAAS,CAAC,IAAI,CAAC,CAACwB,KAAK,CAAC,0BAA0B,CAAC;IACjD,OAAOtB,eAAe,CAAC,IAAI,CAAC,CAAC0B,eAAe,CAAC,CAAC;EAChD;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEC,QAAQA,CAACC,GAAG,EAAE;IACZ,OAAO5B,eAAe,CAAC,IAAI,CAAC,CAAC2B,QAAQ,CAACC,GAAG,IAAI,EAAE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAClB,gBAAgB,CAAC;EAC9E;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEmB,SAASA,CAACC,IAAI,EAAE;IACd,OAAO/B,eAAe,CAAC,IAAI,CAAC,CAAC8B,SAAS,CAACC,IAAI,IAAI,EAAE,CAAC,CAACF,IAAI,CAACG,YAAY,IAAI;MACtE,MAAMC,MAAM,GAAG,CAAC,CAAC;MAEjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGJ,IAAI,CAACK,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;QAC/CD,MAAM,CAACF,IAAI,CAACG,CAAC,CAAC,CAAC,GAAG,IAAI,CAACvB,gBAAgB,CAACqB,YAAY,CAACE,CAAC,CAAC,CAAC;MAC1D;MAEA,OAAOD,MAAM;IACf,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;;EAGEI,eAAeA,CAACC,MAAM,EAAE;IACtB,OAAOtC,eAAe,CAAC,IAAI,CAAC,CAACqC,eAAe,CAACC,MAAM,CAAC;EACtD;EACA;AACF;AACA;AACA;;EAGEC,WAAWA,CAACC,QAAQ,EAAE;IACpBxC,eAAe,CAAC,IAAI,CAAC,CAACuC,WAAW,CAACC,QAAQ,CAAC;EAC7C;EACA;AACF;AACA;AACA;;EAGEC,uBAAuBA,CAACC,QAAQ,EAAE;IAChC1C,eAAe,CAAC,IAAI,CAAC,CAACyC,uBAAuB,CAACC,QAAQ,CAAC;EACzD;AAEF;AACA,OAAO,MAAMC,OAAO,GAAG,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}