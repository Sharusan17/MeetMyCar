{"ast":null,"code":"/**\n * \n * AndroidNotifications representation wrapper\n */\nimport { Platform } from 'react-native';\nimport AndroidChannel from './AndroidChannel';\nimport AndroidChannelGroup from './AndroidChannelGroup';\nimport { getNativeModule } from '../../utils/native';\nexport default class AndroidNotifications {\n  constructor(notifications) {\n    this._notifications = notifications;\n  }\n  createChannel(channel) {\n    if (Platform.OS === 'android') {\n      if (!(channel instanceof AndroidChannel)) {\n        throw new Error(`AndroidNotifications:createChannel expects an 'AndroidChannel' but got type ${typeof channel}`);\n      }\n      return getNativeModule(this._notifications).createChannel(channel.build());\n    }\n    return Promise.resolve();\n  }\n  createChannelGroup(channelGroup) {\n    if (Platform.OS === 'android') {\n      if (!(channelGroup instanceof AndroidChannelGroup)) {\n        throw new Error(`AndroidNotifications:createChannelGroup expects an 'AndroidChannelGroup' but got type ${typeof channelGroup}`);\n      }\n      return getNativeModule(this._notifications).createChannelGroup(channelGroup.build());\n    }\n    return Promise.resolve();\n  }\n  createChannelGroups(channelGroups) {\n    if (Platform.OS === 'android') {\n      if (!Array.isArray(channelGroups)) {\n        throw new Error(`AndroidNotifications:createChannelGroups expects an 'Array' but got type ${typeof channelGroups}`);\n      }\n      const nativeChannelGroups = [];\n      for (let i = 0; i < channelGroups.length; i++) {\n        const channelGroup = channelGroups[i];\n        if (!(channelGroup instanceof AndroidChannelGroup)) {\n          throw new Error(`AndroidNotifications:createChannelGroups expects array items of type 'AndroidChannelGroup' but got type ${typeof channelGroup}`);\n        }\n        nativeChannelGroups.push(channelGroup.build());\n      }\n      return getNativeModule(this._notifications).createChannelGroups(nativeChannelGroups);\n    }\n    return Promise.resolve();\n  }\n  createChannels(channels) {\n    if (Platform.OS === 'android') {\n      if (!Array.isArray(channels)) {\n        throw new Error(`AndroidNotifications:createChannels expects an 'Array' but got type ${typeof channels}`);\n      }\n      const nativeChannels = [];\n      for (let i = 0; i < channels.length; i++) {\n        const channel = channels[i];\n        if (!(channel instanceof AndroidChannel)) {\n          throw new Error(`AndroidNotifications:createChannels expects array items of type 'AndroidChannel' but got type ${typeof channel}`);\n        }\n        nativeChannels.push(channel.build());\n      }\n      return getNativeModule(this._notifications).createChannels(nativeChannels);\n    }\n    return Promise.resolve();\n  }\n  removeDeliveredNotificationsByTag(tag) {\n    if (Platform.OS === 'android') {\n      if (typeof tag !== 'string') {\n        throw new Error(`AndroidNotifications:removeDeliveredNotificationsByTag expects an 'string' but got type ${typeof tag}`);\n      }\n      return getNativeModule(this._notifications).removeDeliveredNotificationsByTag(tag);\n    }\n    return Promise.resolve();\n  }\n  deleteChannelGroup(groupId) {\n    if (Platform.OS === 'android') {\n      if (typeof groupId !== 'string') {\n        throw new Error(`AndroidNotifications:deleteChannelGroup expects an 'string' but got type ${typeof groupId}`);\n      }\n      return getNativeModule(this._notifications).deleteChannelGroup(groupId);\n    }\n    return Promise.resolve();\n  }\n  deleteChannel(channelId) {\n    if (Platform.OS === 'android') {\n      if (typeof channelId !== 'string') {\n        throw new Error(`AndroidNotifications:deleteChannel expects an 'string' but got type ${typeof channelId}`);\n      }\n      return getNativeModule(this._notifications).deleteChannel(channelId);\n    }\n    return Promise.resolve();\n  }\n  getChannel(channelId) {\n    if (Platform.OS === 'android') {\n      if (typeof channelId !== 'string') {\n        throw new Error(`AndroidNotifications:getChannel expects an 'string' but got type ${typeof channelId}`);\n      }\n      return Promise.resolve(getNativeModule(this._notifications).getChannel(channelId));\n    }\n    return Promise.resolve(null);\n  }\n  getChannels() {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(getNativeModule(this._notifications).getChannels());\n    }\n    return Promise.resolve([]);\n  }\n  getChannelGroup(channelGroupId) {\n    if (Platform.OS === 'android') {\n      if (typeof channelGroupId !== 'string') {\n        throw new Error(`AndroidNotifications:getChannel expects an 'string' but got type ${typeof channelGroupId}`);\n      }\n      return Promise.resolve(getNativeModule(this._notifications).getChannelGroup(channelGroupId));\n    }\n    return Promise.resolve(null);\n  }\n  getChannelGroups() {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(getNativeModule(this._notifications).getChannelGroups());\n    }\n    return Promise.resolve([]);\n  }\n}","map":{"version":3,"names":["Platform","AndroidChannel","AndroidChannelGroup","getNativeModule","AndroidNotifications","constructor","notifications","_notifications","createChannel","channel","OS","Error","build","Promise","resolve","createChannelGroup","channelGroup","createChannelGroups","channelGroups","Array","isArray","nativeChannelGroups","i","length","push","createChannels","channels","nativeChannels","removeDeliveredNotificationsByTag","tag","deleteChannelGroup","groupId","deleteChannel","channelId","getChannel","getChannels","getChannelGroup","channelGroupId","getChannelGroups"],"sources":["/Users/sharusan/MeetMyCar/myapp/node_modules/react-native-firebase/dist/modules/notifications/AndroidNotifications.js"],"sourcesContent":["/**\n * \n * AndroidNotifications representation wrapper\n */\nimport { Platform } from 'react-native';\nimport AndroidChannel from './AndroidChannel';\nimport AndroidChannelGroup from './AndroidChannelGroup';\nimport { getNativeModule } from '../../utils/native';\nexport default class AndroidNotifications {\n  constructor(notifications) {\n    this._notifications = notifications;\n  }\n\n  createChannel(channel) {\n    if (Platform.OS === 'android') {\n      if (!(channel instanceof AndroidChannel)) {\n        throw new Error(`AndroidNotifications:createChannel expects an 'AndroidChannel' but got type ${typeof channel}`);\n      }\n\n      return getNativeModule(this._notifications).createChannel(channel.build());\n    }\n\n    return Promise.resolve();\n  }\n\n  createChannelGroup(channelGroup) {\n    if (Platform.OS === 'android') {\n      if (!(channelGroup instanceof AndroidChannelGroup)) {\n        throw new Error(`AndroidNotifications:createChannelGroup expects an 'AndroidChannelGroup' but got type ${typeof channelGroup}`);\n      }\n\n      return getNativeModule(this._notifications).createChannelGroup(channelGroup.build());\n    }\n\n    return Promise.resolve();\n  }\n\n  createChannelGroups(channelGroups) {\n    if (Platform.OS === 'android') {\n      if (!Array.isArray(channelGroups)) {\n        throw new Error(`AndroidNotifications:createChannelGroups expects an 'Array' but got type ${typeof channelGroups}`);\n      }\n\n      const nativeChannelGroups = [];\n\n      for (let i = 0; i < channelGroups.length; i++) {\n        const channelGroup = channelGroups[i];\n\n        if (!(channelGroup instanceof AndroidChannelGroup)) {\n          throw new Error(`AndroidNotifications:createChannelGroups expects array items of type 'AndroidChannelGroup' but got type ${typeof channelGroup}`);\n        }\n\n        nativeChannelGroups.push(channelGroup.build());\n      }\n\n      return getNativeModule(this._notifications).createChannelGroups(nativeChannelGroups);\n    }\n\n    return Promise.resolve();\n  }\n\n  createChannels(channels) {\n    if (Platform.OS === 'android') {\n      if (!Array.isArray(channels)) {\n        throw new Error(`AndroidNotifications:createChannels expects an 'Array' but got type ${typeof channels}`);\n      }\n\n      const nativeChannels = [];\n\n      for (let i = 0; i < channels.length; i++) {\n        const channel = channels[i];\n\n        if (!(channel instanceof AndroidChannel)) {\n          throw new Error(`AndroidNotifications:createChannels expects array items of type 'AndroidChannel' but got type ${typeof channel}`);\n        }\n\n        nativeChannels.push(channel.build());\n      }\n\n      return getNativeModule(this._notifications).createChannels(nativeChannels);\n    }\n\n    return Promise.resolve();\n  }\n\n  removeDeliveredNotificationsByTag(tag) {\n    if (Platform.OS === 'android') {\n      if (typeof tag !== 'string') {\n        throw new Error(`AndroidNotifications:removeDeliveredNotificationsByTag expects an 'string' but got type ${typeof tag}`);\n      }\n\n      return getNativeModule(this._notifications).removeDeliveredNotificationsByTag(tag);\n    }\n\n    return Promise.resolve();\n  }\n\n  deleteChannelGroup(groupId) {\n    if (Platform.OS === 'android') {\n      if (typeof groupId !== 'string') {\n        throw new Error(`AndroidNotifications:deleteChannelGroup expects an 'string' but got type ${typeof groupId}`);\n      }\n\n      return getNativeModule(this._notifications).deleteChannelGroup(groupId);\n    }\n\n    return Promise.resolve();\n  }\n\n  deleteChannel(channelId) {\n    if (Platform.OS === 'android') {\n      if (typeof channelId !== 'string') {\n        throw new Error(`AndroidNotifications:deleteChannel expects an 'string' but got type ${typeof channelId}`);\n      }\n\n      return getNativeModule(this._notifications).deleteChannel(channelId);\n    }\n\n    return Promise.resolve();\n  }\n\n  getChannel(channelId) {\n    if (Platform.OS === 'android') {\n      if (typeof channelId !== 'string') {\n        throw new Error(`AndroidNotifications:getChannel expects an 'string' but got type ${typeof channelId}`);\n      }\n\n      return Promise.resolve(getNativeModule(this._notifications).getChannel(channelId));\n    }\n\n    return Promise.resolve(null);\n  }\n\n  getChannels() {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(getNativeModule(this._notifications).getChannels());\n    }\n\n    return Promise.resolve([]);\n  }\n\n  getChannelGroup(channelGroupId) {\n    if (Platform.OS === 'android') {\n      if (typeof channelGroupId !== 'string') {\n        throw new Error(`AndroidNotifications:getChannel expects an 'string' but got type ${typeof channelGroupId}`);\n      }\n\n      return Promise.resolve(getNativeModule(this._notifications).getChannelGroup(channelGroupId));\n    }\n\n    return Promise.resolve(null);\n  }\n\n  getChannelGroups() {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(getNativeModule(this._notifications).getChannelGroups());\n    }\n\n    return Promise.resolve([]);\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}