{"ast":null,"code":"import { NativeEventEmitter, NativeModules } from 'react-native';\nimport { SharedEventEmitter } from './events';\nimport DataSnapshot from '../modules/database/DataSnapshot';\nimport DatabaseReference from '../modules/database/Reference';\nimport { isString, nativeToJSError } from './';\n\n/**\n * Internally used to manage firebase database realtime event\n * subscriptions and keep the listeners in sync in js vs native.\n */\nclass SyncTree {\n  constructor() {\n    this._tree = {};\n    this._reverseLookup = {};\n    if (NativeModules.RNFirebaseDatabase) {\n      this._nativeEmitter = new NativeEventEmitter(NativeModules.RNFirebaseDatabase);\n      this._nativeEmitter.addListener('database_sync_event', this._handleSyncEvent.bind(this));\n    }\n  }\n  /**\n   *\n   * @param event\n   * @private\n   */\n\n  _handleSyncEvent(event) {\n    if (event.error) {\n      this._handleErrorEvent(event);\n    } else {\n      this._handleValueEvent(event);\n    }\n  }\n  /**\n   * Routes native database 'on' events to their js equivalent counterpart.\n   * If there is no longer any listeners remaining for this event we internally\n   * call the native unsub method to prevent further events coming through.\n   *\n   * @param event\n   * @private\n   */\n\n  _handleValueEvent(event) {\n    // console.log('SyncTree.VALUE >>>', event);\n    const {\n      key,\n      eventRegistrationKey\n    } = event.registration;\n    const registration = this.getRegistration(eventRegistrationKey);\n    if (!registration) {\n      // registration previously revoked\n      // notify native that the registration\n      // no longer exists so it can remove\n      // the native listeners\n      return NativeModules.RNFirebaseDatabase.off(key, eventRegistrationKey);\n    }\n    const {\n      snapshot,\n      previousChildName\n    } = event.data; // forward on to users .on(successCallback <-- listener\n\n    return SharedEventEmitter.emit(eventRegistrationKey, new DataSnapshot(registration.ref, snapshot), previousChildName);\n  }\n  /**\n   * Routes native database query listener cancellation events to their js counterparts.\n   *\n   * @param event\n   * @private\n   */\n\n  _handleErrorEvent(event) {\n    // console.log('SyncTree.ERROR >>>', event);\n    const {\n      code,\n      message\n    } = event.error;\n    const {\n      eventRegistrationKey,\n      registrationCancellationKey\n    } = event.registration;\n    const registration = this.getRegistration(registrationCancellationKey);\n    if (registration) {\n      // build a new js error - we additionally attach\n      // the ref as a property for easier debugging\n      const error = nativeToJSError(code, message, {\n        ref: registration.ref\n      }); // forward on to users .on(successCallback, cancellationCallback <-- listener\n\n      SharedEventEmitter.emit(registrationCancellationKey, error); // remove the paired event registration - if we received a cancellation\n      // event then it's guaranteed that they'll be no further value events\n\n      this.removeRegistration(eventRegistrationKey);\n    }\n  }\n  /**\n   * Returns registration information such as appName, ref, path and registration keys.\n   *\n   * @param registration\n   * @return {null}\n   */\n\n  getRegistration(registration) {\n    return this._reverseLookup[registration] ? Object.assign({}, this._reverseLookup[registration]) : null;\n  }\n  /**\n   * Removes all listeners for the specified registration keys.\n   *\n   * @param registrations\n   * @return {number}\n   */\n\n  removeListenersForRegistrations(registrations) {\n    if (isString(registrations)) {\n      this.removeRegistration(registrations);\n      SharedEventEmitter.removeAllListeners(registrations);\n      return 1;\n    }\n    if (!Array.isArray(registrations)) return 0;\n    for (let i = 0, len = registrations.length; i < len; i++) {\n      this.removeRegistration(registrations[i]);\n      SharedEventEmitter.removeAllListeners(registrations[i]);\n    }\n    return registrations.length;\n  }\n  /**\n   * Removes a specific listener from the specified registrations.\n   *\n   * @param listener\n   * @param registrations\n   * @return {Array} array of registrations removed\n   */\n\n  removeListenerRegistrations(listener, registrations) {\n    if (!Array.isArray(registrations)) return [];\n    const removed = [];\n    for (let i = 0, len = registrations.length; i < len; i++) {\n      const registration = registrations[i];\n      const subscriptions = SharedEventEmitter._subscriber.getSubscriptionsForType(registration);\n      if (subscriptions) {\n        for (let j = 0, l = subscriptions.length; j < l; j++) {\n          const subscription = subscriptions[j]; // The subscription may have been removed during this event loop.\n          // its listener matches the listener in method parameters\n\n          if (subscription && subscription.listener === listener) {\n            subscription.remove();\n            removed.push(registration);\n            this.removeRegistration(registration);\n          }\n        }\n      }\n    }\n    return removed;\n  }\n  /**\n   * Returns an array of all registration keys for the specified path.\n   *\n   * @param path\n   * @return {Array}\n   */\n\n  getRegistrationsByPath(path) {\n    const out = [];\n    const eventKeys = Object.keys(this._tree[path] || {});\n    for (let i = 0, len = eventKeys.length; i < len; i++) {\n      Array.prototype.push.apply(out, Object.keys(this._tree[path][eventKeys[i]]));\n    }\n    return out;\n  }\n  /**\n   * Returns an array of all registration keys for the specified path and eventType.\n   *\n   * @param path\n   * @param eventType\n   * @return {Array}\n   */\n\n  getRegistrationsByPathEvent(path, eventType) {\n    if (!this._tree[path]) return [];\n    if (!this._tree[path][eventType]) return [];\n    return Object.keys(this._tree[path][eventType]);\n  }\n  /**\n   * Returns a single registration key for the specified path, eventType, and listener\n   *\n   * @param path\n   * @param eventType\n   * @param listener\n   * @return {Array}\n   */\n\n  getOneByPathEventListener(path, eventType, listener) {\n    if (!this._tree[path]) return null;\n    if (!this._tree[path][eventType]) return null;\n    const registrationsForPathEvent = Object.entries(this._tree[path][eventType]);\n    for (let i = 0; i < registrationsForPathEvent.length; i++) {\n      const registration = registrationsForPathEvent[i];\n      if (registration[1] === listener) return registration[0];\n    }\n    return null;\n  }\n  /**\n   * Register a new listener.\n   *\n   * @param parameters\n   * @param listener\n   * @return {String}\n   */\n\n  addRegistration(registration) {\n    const {\n      eventRegistrationKey,\n      eventType,\n      listener,\n      once,\n      path\n    } = registration;\n    if (!this._tree[path]) this._tree[path] = {};\n    if (!this._tree[path][eventType]) this._tree[path][eventType] = {};\n    this._tree[path][eventType][eventRegistrationKey] = listener;\n    this._reverseLookup[eventRegistrationKey] = registration;\n    if (once) {\n      SharedEventEmitter.once(eventRegistrationKey, this._onOnceRemoveRegistration(eventRegistrationKey, listener));\n    } else {\n      SharedEventEmitter.addListener(eventRegistrationKey, listener);\n    }\n    return eventRegistrationKey;\n  }\n  /**\n   * Remove a registration, if it's not a `once` registration then instructs native\n   * to also remove the underlying database query listener.\n   *\n   * @param registration\n   * @return {boolean}\n   */\n\n  removeRegistration(registration) {\n    if (!this._reverseLookup[registration]) return false;\n    const {\n      path,\n      eventType,\n      once\n    } = this._reverseLookup[registration];\n    if (!this._tree[path]) {\n      delete this._reverseLookup[registration];\n      return false;\n    }\n    if (!this._tree[path][eventType]) {\n      delete this._reverseLookup[registration];\n      return false;\n    } // we don't want `once` events to notify native as they're already\n    // automatically unsubscribed on native when the first event is sent\n\n    const registrationObj = this._reverseLookup[registration];\n    if (registrationObj && !once) {\n      NativeModules.RNFirebaseDatabase.off(registrationObj.key, registration);\n    }\n    delete this._tree[path][eventType][registration];\n    delete this._reverseLookup[registration];\n    return !!registrationObj;\n  }\n  /**\n   * Wraps a `once` listener with a new function that self de-registers.\n   *\n   * @param registration\n   * @param listener\n   * @return {function(...[*])}\n   * @private\n   */\n\n  _onOnceRemoveRegistration(registration, listener) {\n    return (...args) => {\n      this.removeRegistration(registration);\n      listener(...args);\n    };\n  }\n}\nexport default new SyncTree();","map":{"version":3,"names":["NativeEventEmitter","NativeModules","SharedEventEmitter","DataSnapshot","DatabaseReference","isString","nativeToJSError","SyncTree","constructor","_tree","_reverseLookup","RNFirebaseDatabase","_nativeEmitter","addListener","_handleSyncEvent","bind","event","error","_handleErrorEvent","_handleValueEvent","key","eventRegistrationKey","registration","getRegistration","off","snapshot","previousChildName","data","emit","ref","code","message","registrationCancellationKey","removeRegistration","Object","assign","removeListenersForRegistrations","registrations","removeAllListeners","Array","isArray","i","len","length","removeListenerRegistrations","listener","removed","subscriptions","_subscriber","getSubscriptionsForType","j","l","subscription","remove","push","getRegistrationsByPath","path","out","eventKeys","keys","prototype","apply","getRegistrationsByPathEvent","eventType","getOneByPathEventListener","registrationsForPathEvent","entries","addRegistration","once","_onOnceRemoveRegistration","registrationObj","args"],"sources":["/Users/sharusan/MeetMyCar/myapp/node_modules/react-native-firebase/dist/utils/SyncTree.js"],"sourcesContent":["import { NativeEventEmitter, NativeModules } from 'react-native';\nimport { SharedEventEmitter } from './events';\nimport DataSnapshot from '../modules/database/DataSnapshot';\nimport DatabaseReference from '../modules/database/Reference';\nimport { isString, nativeToJSError } from './';\n\n/**\n * Internally used to manage firebase database realtime event\n * subscriptions and keep the listeners in sync in js vs native.\n */\nclass SyncTree {\n  constructor() {\n    this._tree = {};\n    this._reverseLookup = {};\n\n    if (NativeModules.RNFirebaseDatabase) {\n      this._nativeEmitter = new NativeEventEmitter(NativeModules.RNFirebaseDatabase);\n\n      this._nativeEmitter.addListener('database_sync_event', this._handleSyncEvent.bind(this));\n    }\n  }\n  /**\n   *\n   * @param event\n   * @private\n   */\n\n\n  _handleSyncEvent(event) {\n    if (event.error) {\n      this._handleErrorEvent(event);\n    } else {\n      this._handleValueEvent(event);\n    }\n  }\n  /**\n   * Routes native database 'on' events to their js equivalent counterpart.\n   * If there is no longer any listeners remaining for this event we internally\n   * call the native unsub method to prevent further events coming through.\n   *\n   * @param event\n   * @private\n   */\n\n\n  _handleValueEvent(event) {\n    // console.log('SyncTree.VALUE >>>', event);\n    const {\n      key,\n      eventRegistrationKey\n    } = event.registration;\n    const registration = this.getRegistration(eventRegistrationKey);\n\n    if (!registration) {\n      // registration previously revoked\n      // notify native that the registration\n      // no longer exists so it can remove\n      // the native listeners\n      return NativeModules.RNFirebaseDatabase.off(key, eventRegistrationKey);\n    }\n\n    const {\n      snapshot,\n      previousChildName\n    } = event.data; // forward on to users .on(successCallback <-- listener\n\n    return SharedEventEmitter.emit(eventRegistrationKey, new DataSnapshot(registration.ref, snapshot), previousChildName);\n  }\n  /**\n   * Routes native database query listener cancellation events to their js counterparts.\n   *\n   * @param event\n   * @private\n   */\n\n\n  _handleErrorEvent(event) {\n    // console.log('SyncTree.ERROR >>>', event);\n    const {\n      code,\n      message\n    } = event.error;\n    const {\n      eventRegistrationKey,\n      registrationCancellationKey\n    } = event.registration;\n    const registration = this.getRegistration(registrationCancellationKey);\n\n    if (registration) {\n      // build a new js error - we additionally attach\n      // the ref as a property for easier debugging\n      const error = nativeToJSError(code, message, {\n        ref: registration.ref\n      }); // forward on to users .on(successCallback, cancellationCallback <-- listener\n\n      SharedEventEmitter.emit(registrationCancellationKey, error); // remove the paired event registration - if we received a cancellation\n      // event then it's guaranteed that they'll be no further value events\n\n      this.removeRegistration(eventRegistrationKey);\n    }\n  }\n  /**\n   * Returns registration information such as appName, ref, path and registration keys.\n   *\n   * @param registration\n   * @return {null}\n   */\n\n\n  getRegistration(registration) {\n    return this._reverseLookup[registration] ? Object.assign({}, this._reverseLookup[registration]) : null;\n  }\n  /**\n   * Removes all listeners for the specified registration keys.\n   *\n   * @param registrations\n   * @return {number}\n   */\n\n\n  removeListenersForRegistrations(registrations) {\n    if (isString(registrations)) {\n      this.removeRegistration(registrations);\n      SharedEventEmitter.removeAllListeners(registrations);\n      return 1;\n    }\n\n    if (!Array.isArray(registrations)) return 0;\n\n    for (let i = 0, len = registrations.length; i < len; i++) {\n      this.removeRegistration(registrations[i]);\n      SharedEventEmitter.removeAllListeners(registrations[i]);\n    }\n\n    return registrations.length;\n  }\n  /**\n   * Removes a specific listener from the specified registrations.\n   *\n   * @param listener\n   * @param registrations\n   * @return {Array} array of registrations removed\n   */\n\n\n  removeListenerRegistrations(listener, registrations) {\n    if (!Array.isArray(registrations)) return [];\n    const removed = [];\n\n    for (let i = 0, len = registrations.length; i < len; i++) {\n      const registration = registrations[i];\n\n      const subscriptions = SharedEventEmitter._subscriber.getSubscriptionsForType(registration);\n\n      if (subscriptions) {\n        for (let j = 0, l = subscriptions.length; j < l; j++) {\n          const subscription = subscriptions[j]; // The subscription may have been removed during this event loop.\n          // its listener matches the listener in method parameters\n\n          if (subscription && subscription.listener === listener) {\n            subscription.remove();\n            removed.push(registration);\n            this.removeRegistration(registration);\n          }\n        }\n      }\n    }\n\n    return removed;\n  }\n  /**\n   * Returns an array of all registration keys for the specified path.\n   *\n   * @param path\n   * @return {Array}\n   */\n\n\n  getRegistrationsByPath(path) {\n    const out = [];\n    const eventKeys = Object.keys(this._tree[path] || {});\n\n    for (let i = 0, len = eventKeys.length; i < len; i++) {\n      Array.prototype.push.apply(out, Object.keys(this._tree[path][eventKeys[i]]));\n    }\n\n    return out;\n  }\n  /**\n   * Returns an array of all registration keys for the specified path and eventType.\n   *\n   * @param path\n   * @param eventType\n   * @return {Array}\n   */\n\n\n  getRegistrationsByPathEvent(path, eventType) {\n    if (!this._tree[path]) return [];\n    if (!this._tree[path][eventType]) return [];\n    return Object.keys(this._tree[path][eventType]);\n  }\n  /**\n   * Returns a single registration key for the specified path, eventType, and listener\n   *\n   * @param path\n   * @param eventType\n   * @param listener\n   * @return {Array}\n   */\n\n\n  getOneByPathEventListener(path, eventType, listener) {\n    if (!this._tree[path]) return null;\n    if (!this._tree[path][eventType]) return null;\n    const registrationsForPathEvent = Object.entries(this._tree[path][eventType]);\n\n    for (let i = 0; i < registrationsForPathEvent.length; i++) {\n      const registration = registrationsForPathEvent[i];\n      if (registration[1] === listener) return registration[0];\n    }\n\n    return null;\n  }\n  /**\n   * Register a new listener.\n   *\n   * @param parameters\n   * @param listener\n   * @return {String}\n   */\n\n\n  addRegistration(registration) {\n    const {\n      eventRegistrationKey,\n      eventType,\n      listener,\n      once,\n      path\n    } = registration;\n    if (!this._tree[path]) this._tree[path] = {};\n    if (!this._tree[path][eventType]) this._tree[path][eventType] = {};\n    this._tree[path][eventType][eventRegistrationKey] = listener;\n    this._reverseLookup[eventRegistrationKey] = registration;\n\n    if (once) {\n      SharedEventEmitter.once(eventRegistrationKey, this._onOnceRemoveRegistration(eventRegistrationKey, listener));\n    } else {\n      SharedEventEmitter.addListener(eventRegistrationKey, listener);\n    }\n\n    return eventRegistrationKey;\n  }\n  /**\n   * Remove a registration, if it's not a `once` registration then instructs native\n   * to also remove the underlying database query listener.\n   *\n   * @param registration\n   * @return {boolean}\n   */\n\n\n  removeRegistration(registration) {\n    if (!this._reverseLookup[registration]) return false;\n    const {\n      path,\n      eventType,\n      once\n    } = this._reverseLookup[registration];\n\n    if (!this._tree[path]) {\n      delete this._reverseLookup[registration];\n      return false;\n    }\n\n    if (!this._tree[path][eventType]) {\n      delete this._reverseLookup[registration];\n      return false;\n    } // we don't want `once` events to notify native as they're already\n    // automatically unsubscribed on native when the first event is sent\n\n\n    const registrationObj = this._reverseLookup[registration];\n\n    if (registrationObj && !once) {\n      NativeModules.RNFirebaseDatabase.off(registrationObj.key, registration);\n    }\n\n    delete this._tree[path][eventType][registration];\n    delete this._reverseLookup[registration];\n    return !!registrationObj;\n  }\n  /**\n   * Wraps a `once` listener with a new function that self de-registers.\n   *\n   * @param registration\n   * @param listener\n   * @return {function(...[*])}\n   * @private\n   */\n\n\n  _onOnceRemoveRegistration(registration, listener) {\n    return (...args) => {\n      this.removeRegistration(registration);\n      listener(...args);\n    };\n  }\n\n}\n\nexport default new SyncTree();"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}