{"ast":null,"code":"/**\n * \n * Firestore Transaction representation wrapper\n */\nimport { parseUpdateArgs } from './utils';\nimport { buildNativeMap } from './utils/serialize';\nimport DocumentSnapshot from './DocumentSnapshot';\nimport { getNativeModule } from '../../utils/native';\n// TODO docs state all get requests must be made FIRST before any modifications\n// TODO so need to validate that\n\n/**\n * @class Transaction\n */\nexport default class Transaction {\n  constructor(firestore, meta) {\n    this._meta = meta;\n    this._commandBuffer = [];\n    this._firestore = firestore;\n    this._pendingResult = undefined;\n  }\n  /**\n   * -------------\n   * INTERNAL API\n   * -------------\n   */\n\n  /**\n   * Clears the command buffer and any pending result in prep for\n   * the next transaction iteration attempt.\n   *\n   * @private\n   */\n\n  _prepare() {\n    this._commandBuffer = [];\n    this._pendingResult = undefined;\n  }\n  /**\n   * -------------\n   *  PUBLIC API\n   * -------------\n   */\n\n  /**\n   * Reads the document referenced by the provided DocumentReference.\n   *\n   * @param documentRef DocumentReference A reference to the document to be retrieved. Value must not be null.\n   *\n   * @returns Promise<DocumentSnapshot>\n   */\n\n  get(documentRef) {\n    // todo validate doc ref\n    return getNativeModule(this._firestore).transactionGetDocument(this._meta.id, documentRef.path).then(result => new DocumentSnapshot(this._firestore, result));\n  }\n  /**\n   * Writes to the document referred to by the provided DocumentReference.\n   * If the document does not exist yet, it will be created. If you pass options,\n   * the provided data can be merged into the existing document.\n   *\n   * @param documentRef DocumentReference A reference to the document to be created. Value must not be null.\n   * @param data Object An object of the fields and values for the document.\n   * @param options SetOptions An object to configure the set behavior.\n   *        Pass {merge: true} to only replace the values specified in the data argument.\n   *        Fields omitted will remain untouched.\n   *\n   * @returns {Transaction}\n   */\n\n  set(documentRef, data, options) {\n    // todo validate doc ref\n    // todo validate data is object\n    this._commandBuffer.push({\n      type: 'set',\n      path: documentRef.path,\n      data: buildNativeMap(data),\n      options: options || {}\n    });\n    return this;\n  }\n  /**\n   * Updates fields in the document referred to by this DocumentReference.\n   * The update will fail if applied to a document that does not exist. Nested\n   * fields can be updated by providing dot-separated field path strings or by providing FieldPath objects.\n   *\n   * @param documentRef DocumentReference A reference to the document to be updated. Value must not be null.\n   * @param args any Either an object containing all of the fields and values to update,\n   *        or a series of arguments alternating between fields (as string or FieldPath\n   *        objects) and values.\n   *\n   * @returns {Transaction}\n   */\n\n  update(documentRef, ...args) {\n    // todo validate doc ref\n    const data = parseUpdateArgs(args, 'Transaction.update');\n    this._commandBuffer.push({\n      type: 'update',\n      path: documentRef.path,\n      data: buildNativeMap(data)\n    });\n    return this;\n  }\n  /**\n   * Deletes the document referred to by the provided DocumentReference.\n   *\n   * @param documentRef DocumentReference A reference to the document to be deleted. Value must not be null.\n   *\n   * @returns {Transaction}\n   */\n\n  delete(documentRef) {\n    // todo validate doc ref\n    this._commandBuffer.push({\n      type: 'delete',\n      path: documentRef.path\n    });\n    return this;\n  }\n}","map":{"version":3,"names":["parseUpdateArgs","buildNativeMap","DocumentSnapshot","getNativeModule","Transaction","constructor","firestore","meta","_meta","_commandBuffer","_firestore","_pendingResult","undefined","_prepare","get","documentRef","transactionGetDocument","id","path","then","result","set","data","options","push","type","update","args","delete"],"sources":["/Users/sharusan/MeetMyCar/myapp/node_modules/react-native-firebase/dist/modules/firestore/Transaction.js"],"sourcesContent":["/**\n * \n * Firestore Transaction representation wrapper\n */\nimport { parseUpdateArgs } from './utils';\nimport { buildNativeMap } from './utils/serialize';\nimport DocumentSnapshot from './DocumentSnapshot';\nimport { getNativeModule } from '../../utils/native';\n// TODO docs state all get requests must be made FIRST before any modifications\n// TODO so need to validate that\n\n/**\n * @class Transaction\n */\nexport default class Transaction {\n  constructor(firestore, meta) {\n    this._meta = meta;\n    this._commandBuffer = [];\n    this._firestore = firestore;\n    this._pendingResult = undefined;\n  }\n  /**\n   * -------------\n   * INTERNAL API\n   * -------------\n   */\n\n  /**\n   * Clears the command buffer and any pending result in prep for\n   * the next transaction iteration attempt.\n   *\n   * @private\n   */\n\n\n  _prepare() {\n    this._commandBuffer = [];\n    this._pendingResult = undefined;\n  }\n  /**\n   * -------------\n   *  PUBLIC API\n   * -------------\n   */\n\n  /**\n   * Reads the document referenced by the provided DocumentReference.\n   *\n   * @param documentRef DocumentReference A reference to the document to be retrieved. Value must not be null.\n   *\n   * @returns Promise<DocumentSnapshot>\n   */\n\n\n  get(documentRef) {\n    // todo validate doc ref\n    return getNativeModule(this._firestore).transactionGetDocument(this._meta.id, documentRef.path).then(result => new DocumentSnapshot(this._firestore, result));\n  }\n  /**\n   * Writes to the document referred to by the provided DocumentReference.\n   * If the document does not exist yet, it will be created. If you pass options,\n   * the provided data can be merged into the existing document.\n   *\n   * @param documentRef DocumentReference A reference to the document to be created. Value must not be null.\n   * @param data Object An object of the fields and values for the document.\n   * @param options SetOptions An object to configure the set behavior.\n   *        Pass {merge: true} to only replace the values specified in the data argument.\n   *        Fields omitted will remain untouched.\n   *\n   * @returns {Transaction}\n   */\n\n\n  set(documentRef, data, options) {\n    // todo validate doc ref\n    // todo validate data is object\n    this._commandBuffer.push({\n      type: 'set',\n      path: documentRef.path,\n      data: buildNativeMap(data),\n      options: options || {}\n    });\n\n    return this;\n  }\n  /**\n   * Updates fields in the document referred to by this DocumentReference.\n   * The update will fail if applied to a document that does not exist. Nested\n   * fields can be updated by providing dot-separated field path strings or by providing FieldPath objects.\n   *\n   * @param documentRef DocumentReference A reference to the document to be updated. Value must not be null.\n   * @param args any Either an object containing all of the fields and values to update,\n   *        or a series of arguments alternating between fields (as string or FieldPath\n   *        objects) and values.\n   *\n   * @returns {Transaction}\n   */\n\n\n  update(documentRef, ...args) {\n    // todo validate doc ref\n    const data = parseUpdateArgs(args, 'Transaction.update');\n\n    this._commandBuffer.push({\n      type: 'update',\n      path: documentRef.path,\n      data: buildNativeMap(data)\n    });\n\n    return this;\n  }\n  /**\n   * Deletes the document referred to by the provided DocumentReference.\n   *\n   * @param documentRef DocumentReference A reference to the document to be deleted. Value must not be null.\n   *\n   * @returns {Transaction}\n   */\n\n\n  delete(documentRef) {\n    // todo validate doc ref\n    this._commandBuffer.push({\n      type: 'delete',\n      path: documentRef.path\n    });\n\n    return this;\n  }\n\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,eAAe,QAAQ,SAAS;AACzC,SAASC,cAAc,QAAQ,mBAAmB;AAClD,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,SAASC,eAAe,QAAQ,oBAAoB;AACpD;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAMC,WAAW,CAAC;EAC/BC,WAAWA,CAACC,SAAS,EAAEC,IAAI,EAAE;IAC3B,IAAI,CAACC,KAAK,GAAGD,IAAI;IACjB,IAAI,CAACE,cAAc,GAAG,EAAE;IACxB,IAAI,CAACC,UAAU,GAAGJ,SAAS;IAC3B,IAAI,CAACK,cAAc,GAAGC,SAAS;EACjC;EACA;AACF;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;;EAGEC,QAAQA,CAAA,EAAG;IACT,IAAI,CAACJ,cAAc,GAAG,EAAE;IACxB,IAAI,CAACE,cAAc,GAAGC,SAAS;EACjC;EACA;AACF;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;;EAGEE,GAAGA,CAACC,WAAW,EAAE;IACf;IACA,OAAOZ,eAAe,CAAC,IAAI,CAACO,UAAU,CAAC,CAACM,sBAAsB,CAAC,IAAI,CAACR,KAAK,CAACS,EAAE,EAAEF,WAAW,CAACG,IAAI,CAAC,CAACC,IAAI,CAACC,MAAM,IAAI,IAAIlB,gBAAgB,CAAC,IAAI,CAACQ,UAAU,EAAEU,MAAM,CAAC,CAAC;EAC/J;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEC,GAAGA,CAACN,WAAW,EAAEO,IAAI,EAAEC,OAAO,EAAE;IAC9B;IACA;IACA,IAAI,CAACd,cAAc,CAACe,IAAI,CAAC;MACvBC,IAAI,EAAE,KAAK;MACXP,IAAI,EAAEH,WAAW,CAACG,IAAI;MACtBI,IAAI,EAAErB,cAAc,CAACqB,IAAI,CAAC;MAC1BC,OAAO,EAAEA,OAAO,IAAI,CAAC;IACvB,CAAC,CAAC;IAEF,OAAO,IAAI;EACb;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEG,MAAMA,CAACX,WAAW,EAAE,GAAGY,IAAI,EAAE;IAC3B;IACA,MAAML,IAAI,GAAGtB,eAAe,CAAC2B,IAAI,EAAE,oBAAoB,CAAC;IAExD,IAAI,CAAClB,cAAc,CAACe,IAAI,CAAC;MACvBC,IAAI,EAAE,QAAQ;MACdP,IAAI,EAAEH,WAAW,CAACG,IAAI;MACtBI,IAAI,EAAErB,cAAc,CAACqB,IAAI;IAC3B,CAAC,CAAC;IAEF,OAAO,IAAI;EACb;EACA;AACF;AACA;AACA;AACA;AACA;AACA;;EAGEM,MAAMA,CAACb,WAAW,EAAE;IAClB;IACA,IAAI,CAACN,cAAc,CAACe,IAAI,CAAC;MACvBC,IAAI,EAAE,QAAQ;MACdP,IAAI,EAAEH,WAAW,CAACG;IACpB,CAAC,CAAC;IAEF,OAAO,IAAI;EACb;AAEF"},"metadata":{},"sourceType":"module","externalDependencies":[]}