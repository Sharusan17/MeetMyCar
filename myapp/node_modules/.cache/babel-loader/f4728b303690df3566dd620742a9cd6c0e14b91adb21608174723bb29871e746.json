{"ast":null,"code":"/**\n * \n * Messaging (FCM) representation wrapper\n */\nimport { Platform } from 'react-native';\nimport { SharedEventEmitter } from '../../utils/events';\nimport INTERNALS from '../../utils/internals';\nimport { getLogger } from '../../utils/log';\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nimport { isFunction, isObject } from '../../utils';\nimport IOSMessaging from './IOSMessaging';\nimport RemoteMessage from './RemoteMessage';\nconst NATIVE_EVENTS = ['messaging_message_received', 'messaging_token_refreshed'];\nexport const MODULE_NAME = 'RNFirebaseMessaging';\nexport const NAMESPACE = 'messaging';\n/**\n * @class Messaging\n */\n\nexport default class Messaging extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n    this._ios = new IOSMessaging(this);\n    SharedEventEmitter.addListener(\n    // sub to internal native event - this fans out to\n    // public event name: onMessage\n    'messaging_message_received', message => {\n      SharedEventEmitter.emit('onMessage', new RemoteMessage(message));\n    });\n    SharedEventEmitter.addListener(\n    // sub to internal native event - this fans out to\n    // public event name: onMessage\n    'messaging_token_refreshed', token => {\n      SharedEventEmitter.emit('onTokenRefresh', token);\n    }); // Tell the native module that we're ready to receive events\n\n    if (Platform.OS === 'ios') {\n      getNativeModule(this).jsInitialised();\n    }\n  }\n  get ios() {\n    return this._ios;\n  }\n  getToken() {\n    return getNativeModule(this).getToken();\n  }\n  deleteToken() {\n    return getNativeModule(this).deleteToken();\n  }\n  onMessage(nextOrObserver) {\n    let listener;\n    if (isFunction(nextOrObserver)) {\n      // $FlowExpectedError: Not coping with the overloaded method signature\n      listener = nextOrObserver;\n    } else if (isObject(nextOrObserver) && isFunction(nextOrObserver.next)) {\n      listener = nextOrObserver.next;\n    } else {\n      throw new Error('Messaging.onMessage failed: First argument must be a function or observer object with a `next` function.');\n    }\n    getLogger(this).info('Creating onMessage listener');\n    SharedEventEmitter.addListener('onMessage', listener);\n    return () => {\n      getLogger(this).info('Removing onMessage listener');\n      SharedEventEmitter.removeListener('onMessage', listener);\n    };\n  }\n  onTokenRefresh(nextOrObserver) {\n    let listener;\n    if (isFunction(nextOrObserver)) {\n      // $FlowExpectedError: Not coping with the overloaded method signature\n      listener = nextOrObserver;\n    } else if (isObject(nextOrObserver) && isFunction(nextOrObserver.next)) {\n      listener = nextOrObserver.next;\n    } else {\n      throw new Error('Messaging.onTokenRefresh failed: First argument must be a function or observer object with a `next` function.');\n    }\n    getLogger(this).info('Creating onTokenRefresh listener');\n    SharedEventEmitter.addListener('onTokenRefresh', listener);\n    return () => {\n      getLogger(this).info('Removing onTokenRefresh listener');\n      SharedEventEmitter.removeListener('onTokenRefresh', listener);\n    };\n  }\n  requestPermission() {\n    return getNativeModule(this).requestPermission();\n  }\n  /**\n   * NON WEB-SDK METHODS\n   */\n\n  hasPermission() {\n    return getNativeModule(this).hasPermission();\n  }\n  sendMessage(remoteMessage) {\n    if (!(remoteMessage instanceof RemoteMessage)) {\n      return Promise.reject(new Error(`Messaging:sendMessage expects a 'RemoteMessage' but got type ${typeof remoteMessage}`));\n    }\n    try {\n      return getNativeModule(this).sendMessage(remoteMessage.build());\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n  subscribeToTopic(topic) {\n    return getNativeModule(this).subscribeToTopic(topic);\n  }\n  unsubscribeFromTopic(topic) {\n    return getNativeModule(this).unsubscribeFromTopic(topic);\n  }\n  /**\n   * KNOWN UNSUPPORTED METHODS\n   */\n\n  setBackgroundMessageHandler() {\n    throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('messaging', 'setBackgroundMessageHandler'));\n  }\n  useServiceWorker() {\n    throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('messaging', 'useServiceWorker'));\n  }\n}\nexport const statics = {\n  RemoteMessage\n};","map":{"version":3,"names":["Platform","SharedEventEmitter","INTERNALS","getLogger","ModuleBase","getNativeModule","isFunction","isObject","IOSMessaging","RemoteMessage","NATIVE_EVENTS","MODULE_NAME","NAMESPACE","Messaging","constructor","app","events","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","_ios","addListener","message","emit","token","OS","jsInitialised","ios","getToken","deleteToken","onMessage","nextOrObserver","listener","next","Error","info","removeListener","onTokenRefresh","requestPermission","hasPermission","sendMessage","remoteMessage","Promise","reject","build","error","subscribeToTopic","topic","unsubscribeFromTopic","setBackgroundMessageHandler","STRINGS","ERROR_UNSUPPORTED_MODULE_METHOD","useServiceWorker","statics"],"sources":["/Users/sharusan/MeetMyCar/myapp/node_modules/react-native-firebase/dist/modules/messaging/index.js"],"sourcesContent":["/**\n * \n * Messaging (FCM) representation wrapper\n */\nimport { Platform } from 'react-native';\nimport { SharedEventEmitter } from '../../utils/events';\nimport INTERNALS from '../../utils/internals';\nimport { getLogger } from '../../utils/log';\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nimport { isFunction, isObject } from '../../utils';\nimport IOSMessaging from './IOSMessaging';\nimport RemoteMessage from './RemoteMessage';\nconst NATIVE_EVENTS = ['messaging_message_received', 'messaging_token_refreshed'];\nexport const MODULE_NAME = 'RNFirebaseMessaging';\nexport const NAMESPACE = 'messaging';\n/**\n * @class Messaging\n */\n\nexport default class Messaging extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n    this._ios = new IOSMessaging(this);\n    SharedEventEmitter.addListener( // sub to internal native event - this fans out to\n    // public event name: onMessage\n    'messaging_message_received', message => {\n      SharedEventEmitter.emit('onMessage', new RemoteMessage(message));\n    });\n    SharedEventEmitter.addListener( // sub to internal native event - this fans out to\n    // public event name: onMessage\n    'messaging_token_refreshed', token => {\n      SharedEventEmitter.emit('onTokenRefresh', token);\n    }); // Tell the native module that we're ready to receive events\n\n    if (Platform.OS === 'ios') {\n      getNativeModule(this).jsInitialised();\n    }\n  }\n\n  get ios() {\n    return this._ios;\n  }\n\n  getToken() {\n    return getNativeModule(this).getToken();\n  }\n\n  deleteToken() {\n    return getNativeModule(this).deleteToken();\n  }\n\n  onMessage(nextOrObserver) {\n    let listener;\n\n    if (isFunction(nextOrObserver)) {\n      // $FlowExpectedError: Not coping with the overloaded method signature\n      listener = nextOrObserver;\n    } else if (isObject(nextOrObserver) && isFunction(nextOrObserver.next)) {\n      listener = nextOrObserver.next;\n    } else {\n      throw new Error('Messaging.onMessage failed: First argument must be a function or observer object with a `next` function.');\n    }\n\n    getLogger(this).info('Creating onMessage listener');\n    SharedEventEmitter.addListener('onMessage', listener);\n    return () => {\n      getLogger(this).info('Removing onMessage listener');\n      SharedEventEmitter.removeListener('onMessage', listener);\n    };\n  }\n\n  onTokenRefresh(nextOrObserver) {\n    let listener;\n\n    if (isFunction(nextOrObserver)) {\n      // $FlowExpectedError: Not coping with the overloaded method signature\n      listener = nextOrObserver;\n    } else if (isObject(nextOrObserver) && isFunction(nextOrObserver.next)) {\n      listener = nextOrObserver.next;\n    } else {\n      throw new Error('Messaging.onTokenRefresh failed: First argument must be a function or observer object with a `next` function.');\n    }\n\n    getLogger(this).info('Creating onTokenRefresh listener');\n    SharedEventEmitter.addListener('onTokenRefresh', listener);\n    return () => {\n      getLogger(this).info('Removing onTokenRefresh listener');\n      SharedEventEmitter.removeListener('onTokenRefresh', listener);\n    };\n  }\n\n  requestPermission() {\n    return getNativeModule(this).requestPermission();\n  }\n  /**\n   * NON WEB-SDK METHODS\n   */\n\n\n  hasPermission() {\n    return getNativeModule(this).hasPermission();\n  }\n\n  sendMessage(remoteMessage) {\n    if (!(remoteMessage instanceof RemoteMessage)) {\n      return Promise.reject(new Error(`Messaging:sendMessage expects a 'RemoteMessage' but got type ${typeof remoteMessage}`));\n    }\n\n    try {\n      return getNativeModule(this).sendMessage(remoteMessage.build());\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n\n  subscribeToTopic(topic) {\n    return getNativeModule(this).subscribeToTopic(topic);\n  }\n\n  unsubscribeFromTopic(topic) {\n    return getNativeModule(this).unsubscribeFromTopic(topic);\n  }\n  /**\n   * KNOWN UNSUPPORTED METHODS\n   */\n\n\n  setBackgroundMessageHandler() {\n    throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('messaging', 'setBackgroundMessageHandler'));\n  }\n\n  useServiceWorker() {\n    throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('messaging', 'useServiceWorker'));\n  }\n\n}\nexport const statics = {\n  RemoteMessage\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}