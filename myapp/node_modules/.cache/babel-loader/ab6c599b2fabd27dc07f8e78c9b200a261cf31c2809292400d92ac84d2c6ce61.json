{"ast":null,"code":"import { NativeModules } from 'react-native';\nimport INTERNALS from '../../utils/internals';\nimport { isIOS } from '../../utils';\nimport ModuleBase from '../../utils/ModuleBase';\nimport DatabaseUtils from './database';\nconst FirebaseCoreModule = NativeModules.RNFirebase;\nexport const MODULE_NAME = 'RNFirebaseUtils';\nexport const NAMESPACE = 'utils';\nexport default class RNFirebaseUtils extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n  }\n  get database() {\n    return DatabaseUtils;\n  }\n  /**\n   *\n   */\n\n  checkPlayServicesAvailability() {\n    if (isIOS) return;\n    const {\n      status\n    } = this.playServicesAvailability;\n    if (!this.playServicesAvailability.isAvailable) {\n      if (INTERNALS.OPTIONS.promptOnMissingPlayServices && this.playServicesAvailability.isUserResolvableError) {\n        this.promptForPlayServices();\n      } else {\n        const error = INTERNALS.STRINGS.ERROR_PLAY_SERVICES(status);\n        if (INTERNALS.OPTIONS.errorOnMissingPlayServices) {\n          if (status === 2) console.warn(error); // only warn if it exists but may need an update\n          else throw new Error(error);\n        } else {\n          console.warn(error);\n        }\n      }\n    }\n  }\n  getPlayServicesStatus() {\n    if (isIOS) return Promise.resolve(null);\n    return FirebaseCoreModule.getPlayServicesStatus();\n  }\n  promptForPlayServices() {\n    if (isIOS) return null;\n    return FirebaseCoreModule.promptForPlayServices();\n  }\n  resolutionForPlayServices() {\n    if (isIOS) return null;\n    return FirebaseCoreModule.resolutionForPlayServices();\n  }\n  makePlayServicesAvailable() {\n    if (isIOS) return null;\n    return FirebaseCoreModule.makePlayServicesAvailable();\n  }\n  /**\n   * Set the global logging level for all logs.\n   *\n   * @param logLevel\n   */\n\n  set logLevel(logLevel) {\n    INTERNALS.OPTIONS.logLevel = logLevel;\n  }\n  /**\n   * Returns props from the android GoogleApiAvailability sdk\n   * @android\n   * @return {RNFirebase.GoogleApiAvailabilityType|{isAvailable: boolean, status: number}}\n   */\n\n  get playServicesAvailability() {\n    return FirebaseCoreModule.playServicesAvailability || {\n      isAvailable: true,\n      status: 0\n    };\n  }\n  /**\n   * Enable/Disable throwing an error or warning on detecting a play services problem\n   * @android\n   * @param bool\n   */\n\n  set errorOnMissingPlayServices(bool) {\n    INTERNALS.OPTIONS.errorOnMissingPlayServices = bool;\n  }\n  /**\n   * Enable/Disable automatic prompting of the play services update dialog\n   * @android\n   * @param bool\n   */\n\n  set promptOnMissingPlayServices(bool) {\n    INTERNALS.OPTIONS.promptOnMissingPlayServices = bool;\n  }\n}\nexport const statics = {};","map":{"version":3,"names":["NativeModules","INTERNALS","isIOS","ModuleBase","DatabaseUtils","FirebaseCoreModule","RNFirebase","MODULE_NAME","NAMESPACE","RNFirebaseUtils","constructor","app","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","database","checkPlayServicesAvailability","status","playServicesAvailability","isAvailable","OPTIONS","promptOnMissingPlayServices","isUserResolvableError","promptForPlayServices","error","STRINGS","ERROR_PLAY_SERVICES","errorOnMissingPlayServices","console","warn","Error","getPlayServicesStatus","Promise","resolve","resolutionForPlayServices","makePlayServicesAvailable","logLevel","bool","statics"],"sources":["/Users/sharusan/MeetMyCar/myapp/node_modules/react-native-firebase/dist/modules/utils/index.js"],"sourcesContent":["import { NativeModules } from 'react-native';\nimport INTERNALS from '../../utils/internals';\nimport { isIOS } from '../../utils';\nimport ModuleBase from '../../utils/ModuleBase';\nimport DatabaseUtils from './database';\nconst FirebaseCoreModule = NativeModules.RNFirebase;\nexport const MODULE_NAME = 'RNFirebaseUtils';\nexport const NAMESPACE = 'utils';\nexport default class RNFirebaseUtils extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n  }\n\n  get database() {\n    return DatabaseUtils;\n  }\n  /**\n   *\n   */\n\n\n  checkPlayServicesAvailability() {\n    if (isIOS) return;\n    const {\n      status\n    } = this.playServicesAvailability;\n\n    if (!this.playServicesAvailability.isAvailable) {\n      if (INTERNALS.OPTIONS.promptOnMissingPlayServices && this.playServicesAvailability.isUserResolvableError) {\n        this.promptForPlayServices();\n      } else {\n        const error = INTERNALS.STRINGS.ERROR_PLAY_SERVICES(status);\n\n        if (INTERNALS.OPTIONS.errorOnMissingPlayServices) {\n          if (status === 2) console.warn(error); // only warn if it exists but may need an update\n          else throw new Error(error);\n        } else {\n          console.warn(error);\n        }\n      }\n    }\n  }\n\n  getPlayServicesStatus() {\n    if (isIOS) return Promise.resolve(null);\n    return FirebaseCoreModule.getPlayServicesStatus();\n  }\n\n  promptForPlayServices() {\n    if (isIOS) return null;\n    return FirebaseCoreModule.promptForPlayServices();\n  }\n\n  resolutionForPlayServices() {\n    if (isIOS) return null;\n    return FirebaseCoreModule.resolutionForPlayServices();\n  }\n\n  makePlayServicesAvailable() {\n    if (isIOS) return null;\n    return FirebaseCoreModule.makePlayServicesAvailable();\n  }\n  /**\n   * Set the global logging level for all logs.\n   *\n   * @param logLevel\n   */\n\n\n  set logLevel(logLevel) {\n    INTERNALS.OPTIONS.logLevel = logLevel;\n  }\n  /**\n   * Returns props from the android GoogleApiAvailability sdk\n   * @android\n   * @return {RNFirebase.GoogleApiAvailabilityType|{isAvailable: boolean, status: number}}\n   */\n\n\n  get playServicesAvailability() {\n    return FirebaseCoreModule.playServicesAvailability || {\n      isAvailable: true,\n      status: 0\n    };\n  }\n  /**\n   * Enable/Disable throwing an error or warning on detecting a play services problem\n   * @android\n   * @param bool\n   */\n\n\n  set errorOnMissingPlayServices(bool) {\n    INTERNALS.OPTIONS.errorOnMissingPlayServices = bool;\n  }\n  /**\n   * Enable/Disable automatic prompting of the play services update dialog\n   * @android\n   * @param bool\n   */\n\n\n  set promptOnMissingPlayServices(bool) {\n    INTERNALS.OPTIONS.promptOnMissingPlayServices = bool;\n  }\n\n}\nexport const statics = {};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}