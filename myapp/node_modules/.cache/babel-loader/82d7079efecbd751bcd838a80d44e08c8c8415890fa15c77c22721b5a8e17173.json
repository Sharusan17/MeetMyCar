{"ast":null,"code":"/**\n * \n * Storage representation wrapper\n */\nimport { NativeModules } from 'react-native';\nimport StorageRef from './reference';\nimport { getAppEventName, SharedEventEmitter } from '../../utils/events';\nimport { getLogger } from '../../utils/log';\nimport { stripTrailingSlash } from '../../utils';\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nconst FirebaseStorage = NativeModules.RNFirebaseStorage;\nconst NATIVE_EVENTS = ['storage_event', 'storage_error'];\nexport const MODULE_NAME = 'RNFirebaseStorage';\nexport const NAMESPACE = 'storage';\nexport default class Storage extends ModuleBase {\n  /**\n   *\n   * @param app\n   * @param options\n   */\n  constructor(app) {\n    super(app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: true,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n    SharedEventEmitter.addListener(getAppEventName(this, 'storage_event'), this._handleStorageEvent.bind(this));\n    SharedEventEmitter.addListener(getAppEventName(this, 'storage_error'), this._handleStorageEvent.bind(this));\n  }\n  /**\n   * Returns a reference for the given path in the default bucket.\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#ref\n   * @param path\n   * @returns {StorageReference}\n   */\n\n  ref(path) {\n    return new StorageRef(this, path);\n  }\n  /**\n   * Returns a reference for the given absolute URL.\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#refFromURL\n   * @param url\n   * @returns {StorageReference}\n   */\n\n  refFromURL(url) {\n    // TODO don't think this is correct?\n    return new StorageRef(this, `url::${url}`);\n  }\n  /**\n   * setMaxOperationRetryTime\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setMaxOperationRetryTime\n   * @param time The new maximum operation retry time in milliseconds.\n   */\n\n  setMaxOperationRetryTime(time) {\n    getNativeModule(this).setMaxOperationRetryTime(time);\n  }\n  /**\n   * setMaxUploadRetryTime\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setMaxUploadRetryTime\n   * @param time The new maximum upload retry time in milliseconds.\n   */\n\n  setMaxUploadRetryTime(time) {\n    getNativeModule(this).setMaxUploadRetryTime(time);\n  }\n  /**\n   * setMaxDownloadRetryTime\n   * @url N/A\n   * @param time The new maximum download retry time in milliseconds.\n   */\n\n  setMaxDownloadRetryTime(time) {\n    getNativeModule(this).setMaxDownloadRetryTime(time);\n  }\n  /**\n   * INTERNALS\n   */\n\n  _getSubEventName(path, eventName) {\n    return getAppEventName(this, `${path}-${eventName}`);\n  }\n  _handleStorageEvent(event) {\n    const {\n      path,\n      eventName\n    } = event;\n    const body = event.body || {};\n    getLogger(this).debug('_handleStorageEvent: ', path, eventName, body);\n    SharedEventEmitter.emit(this._getSubEventName(path, eventName), body);\n  }\n  _handleStorageError(err) {\n    const {\n      path,\n      eventName\n    } = err;\n    const body = err.body || {};\n    getLogger(this).debug('_handleStorageError ->', err);\n    SharedEventEmitter.emit(this._getSubEventName(path, eventName), body);\n  }\n  _addListener(path, eventName, cb) {\n    SharedEventEmitter.addListener(this._getSubEventName(path, eventName), cb);\n  }\n  _removeListener(path, eventName, origCB) {\n    SharedEventEmitter.removeListener(this._getSubEventName(path, eventName), origCB);\n  }\n}\nexport const statics = {\n  TaskEvent: {\n    STATE_CHANGED: 'state_changed'\n  },\n  TaskState: {\n    RUNNING: 'running',\n    PAUSED: 'paused',\n    SUCCESS: 'success',\n    CANCELLED: 'cancelled',\n    ERROR: 'error'\n  },\n  Native: FirebaseStorage ? {\n    MAIN_BUNDLE_PATH: stripTrailingSlash(FirebaseStorage.MAIN_BUNDLE_PATH),\n    CACHES_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.CACHES_DIRECTORY_PATH),\n    DOCUMENT_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.DOCUMENT_DIRECTORY_PATH),\n    EXTERNAL_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.EXTERNAL_DIRECTORY_PATH),\n    EXTERNAL_STORAGE_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.EXTERNAL_STORAGE_DIRECTORY_PATH),\n    TEMP_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.TEMP_DIRECTORY_PATH),\n    LIBRARY_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.LIBRARY_DIRECTORY_PATH),\n    FILETYPE_REGULAR: stripTrailingSlash(FirebaseStorage.FILETYPE_REGULAR),\n    FILETYPE_DIRECTORY: stripTrailingSlash(FirebaseStorage.FILETYPE_DIRECTORY)\n  } : {}\n};","map":{"version":3,"names":["NativeModules","StorageRef","getAppEventName","SharedEventEmitter","getLogger","stripTrailingSlash","ModuleBase","getNativeModule","FirebaseStorage","RNFirebaseStorage","NATIVE_EVENTS","MODULE_NAME","NAMESPACE","Storage","constructor","app","events","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","addListener","_handleStorageEvent","bind","ref","path","refFromURL","url","setMaxOperationRetryTime","time","setMaxUploadRetryTime","setMaxDownloadRetryTime","_getSubEventName","eventName","event","body","debug","emit","_handleStorageError","err","_addListener","cb","_removeListener","origCB","removeListener","statics","TaskEvent","STATE_CHANGED","TaskState","RUNNING","PAUSED","SUCCESS","CANCELLED","ERROR","Native","MAIN_BUNDLE_PATH","CACHES_DIRECTORY_PATH","DOCUMENT_DIRECTORY_PATH","EXTERNAL_DIRECTORY_PATH","EXTERNAL_STORAGE_DIRECTORY_PATH","TEMP_DIRECTORY_PATH","LIBRARY_DIRECTORY_PATH","FILETYPE_REGULAR","FILETYPE_DIRECTORY"],"sources":["/Users/sharusan/MeetMyCar/myapp/node_modules/react-native-firebase/dist/modules/storage/index.js"],"sourcesContent":["/**\n * \n * Storage representation wrapper\n */\nimport { NativeModules } from 'react-native';\nimport StorageRef from './reference';\nimport { getAppEventName, SharedEventEmitter } from '../../utils/events';\nimport { getLogger } from '../../utils/log';\nimport { stripTrailingSlash } from '../../utils';\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nconst FirebaseStorage = NativeModules.RNFirebaseStorage;\nconst NATIVE_EVENTS = ['storage_event', 'storage_error'];\nexport const MODULE_NAME = 'RNFirebaseStorage';\nexport const NAMESPACE = 'storage';\nexport default class Storage extends ModuleBase {\n  /**\n   *\n   * @param app\n   * @param options\n   */\n  constructor(app) {\n    super(app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: true,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n    SharedEventEmitter.addListener(getAppEventName(this, 'storage_event'), this._handleStorageEvent.bind(this));\n    SharedEventEmitter.addListener(getAppEventName(this, 'storage_error'), this._handleStorageEvent.bind(this));\n  }\n  /**\n   * Returns a reference for the given path in the default bucket.\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#ref\n   * @param path\n   * @returns {StorageReference}\n   */\n\n\n  ref(path) {\n    return new StorageRef(this, path);\n  }\n  /**\n   * Returns a reference for the given absolute URL.\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#refFromURL\n   * @param url\n   * @returns {StorageReference}\n   */\n\n\n  refFromURL(url) {\n    // TODO don't think this is correct?\n    return new StorageRef(this, `url::${url}`);\n  }\n  /**\n   * setMaxOperationRetryTime\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setMaxOperationRetryTime\n   * @param time The new maximum operation retry time in milliseconds.\n   */\n\n\n  setMaxOperationRetryTime(time) {\n    getNativeModule(this).setMaxOperationRetryTime(time);\n  }\n  /**\n   * setMaxUploadRetryTime\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setMaxUploadRetryTime\n   * @param time The new maximum upload retry time in milliseconds.\n   */\n\n\n  setMaxUploadRetryTime(time) {\n    getNativeModule(this).setMaxUploadRetryTime(time);\n  }\n  /**\n   * setMaxDownloadRetryTime\n   * @url N/A\n   * @param time The new maximum download retry time in milliseconds.\n   */\n\n\n  setMaxDownloadRetryTime(time) {\n    getNativeModule(this).setMaxDownloadRetryTime(time);\n  }\n  /**\n   * INTERNALS\n   */\n\n\n  _getSubEventName(path, eventName) {\n    return getAppEventName(this, `${path}-${eventName}`);\n  }\n\n  _handleStorageEvent(event) {\n    const {\n      path,\n      eventName\n    } = event;\n    const body = event.body || {};\n    getLogger(this).debug('_handleStorageEvent: ', path, eventName, body);\n    SharedEventEmitter.emit(this._getSubEventName(path, eventName), body);\n  }\n\n  _handleStorageError(err) {\n    const {\n      path,\n      eventName\n    } = err;\n    const body = err.body || {};\n    getLogger(this).debug('_handleStorageError ->', err);\n    SharedEventEmitter.emit(this._getSubEventName(path, eventName), body);\n  }\n\n  _addListener(path, eventName, cb) {\n    SharedEventEmitter.addListener(this._getSubEventName(path, eventName), cb);\n  }\n\n  _removeListener(path, eventName, origCB) {\n    SharedEventEmitter.removeListener(this._getSubEventName(path, eventName), origCB);\n  }\n\n}\nexport const statics = {\n  TaskEvent: {\n    STATE_CHANGED: 'state_changed'\n  },\n  TaskState: {\n    RUNNING: 'running',\n    PAUSED: 'paused',\n    SUCCESS: 'success',\n    CANCELLED: 'cancelled',\n    ERROR: 'error'\n  },\n  Native: FirebaseStorage ? {\n    MAIN_BUNDLE_PATH: stripTrailingSlash(FirebaseStorage.MAIN_BUNDLE_PATH),\n    CACHES_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.CACHES_DIRECTORY_PATH),\n    DOCUMENT_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.DOCUMENT_DIRECTORY_PATH),\n    EXTERNAL_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.EXTERNAL_DIRECTORY_PATH),\n    EXTERNAL_STORAGE_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.EXTERNAL_STORAGE_DIRECTORY_PATH),\n    TEMP_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.TEMP_DIRECTORY_PATH),\n    LIBRARY_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.LIBRARY_DIRECTORY_PATH),\n    FILETYPE_REGULAR: stripTrailingSlash(FirebaseStorage.FILETYPE_REGULAR),\n    FILETYPE_DIRECTORY: stripTrailingSlash(FirebaseStorage.FILETYPE_DIRECTORY)\n  } : {}\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}