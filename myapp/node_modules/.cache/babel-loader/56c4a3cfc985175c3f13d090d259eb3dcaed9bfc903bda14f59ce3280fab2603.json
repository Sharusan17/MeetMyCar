{"ast":null,"code":"/**\n * \n * Crash Reporting representation wrapper\n */\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nexport const MODULE_NAME = 'RNFirebaseCrashlytics';\nexport const NAMESPACE = 'crashlytics';\nexport default class Crashlytics extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n  }\n  /**\n   * Forces a crash. Useful for testing your application is set up correctly.\n   */\n\n  crash() {\n    getNativeModule(this).crash();\n  }\n  /**\n   * Logs a message that will appear in any subsequent crash reports.\n   * @param {string} message\n   */\n\n  log(message) {\n    if (typeof message === 'string') {\n      getNativeModule(this).log(message);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Logs a non fatal exception.\n   * @param {number} code\n   * @param {string} message\n   */\n\n  recordError(code, message) {\n    if (typeof code === 'number' && typeof message === 'string') {\n      getNativeModule(this).recordError(code, message);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Logs a custom non fatal exception.\n   * @param {string} name\n   * @param {string} message\n   * @param {Object[]} stack Optional\n   */\n\n  recordCustomError(name, message, stack) {\n    if (typeof stack === 'undefined') {\n      if (typeof name === 'string' && typeof message === 'string') {\n        getNativeModule(this).recordCustomError(name, message, []);\n      } else {\n        throw new Error('Invalid parameter type!');\n      }\n    } else if (typeof name === 'string' && typeof message === 'string' && Array.isArray(stack)) {\n      let hasKey = true;\n      stack.forEach(v => {\n        if (!Object.prototype.hasOwnProperty.call(v, 'fileName')) {\n          hasKey = false;\n        }\n      });\n      if (hasKey) {\n        getNativeModule(this).recordCustomError(name, message, stack);\n      } else {\n        throw new Error('Missing required argument fileName!');\n      }\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Set a boolean value to show alongside any subsequent crash reports.\n   */\n\n  setBoolValue(key, value) {\n    if (typeof key === 'string' && typeof value === 'boolean') {\n      getNativeModule(this).setBoolValue(key, value);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Set a float value to show alongside any subsequent crash reports.\n   */\n\n  setFloatValue(key, value) {\n    if (typeof key === 'string' && typeof value === 'number') {\n      getNativeModule(this).setFloatValue(key, value);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Set an integer value to show alongside any subsequent crash reports.\n   */\n\n  setIntValue(key, value) {\n    if (typeof key === 'string' && typeof value === 'number') {\n      getNativeModule(this).setIntValue(key, value);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Set a string value to show alongside any subsequent crash reports.\n   */\n\n  setStringValue(key, value) {\n    if (typeof key === 'string' && typeof value === 'string') {\n      getNativeModule(this).setStringValue(key, value);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Set the user ID to show alongside any subsequent crash reports.\n   */\n\n  setUserIdentifier(userId) {\n    if (typeof userId === 'string') {\n      getNativeModule(this).setUserIdentifier(userId);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Set the user name to show alongside any subsequent crash reports.\n   */\n\n  setUserName(userName) {\n    if (typeof userName === 'string') {\n      return getNativeModule(this).setUserName(userName);\n    }\n    throw new Error('Invalid parameter type!');\n  }\n  /**\n   * Set the user email to show alongside any subsequent crash reports.\n   */\n\n  setUserEmail(userEmail) {\n    if (typeof userEmail === 'string') {\n      getNativeModule(this).setUserEmail(userEmail);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Enable Crashlytics reporting. Only avaliable when disabled automatic initialization\n   */\n\n  enableCrashlyticsCollection() {\n    getNativeModule(this).enableCrashlyticsCollection();\n  }\n}\nexport const statics = {};","map":{"version":3,"names":["ModuleBase","getNativeModule","MODULE_NAME","NAMESPACE","Crashlytics","constructor","app","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","crash","log","message","Error","recordError","code","recordCustomError","name","stack","Array","isArray","hasKey","forEach","v","Object","prototype","hasOwnProperty","call","setBoolValue","key","value","setFloatValue","setIntValue","setStringValue","setUserIdentifier","userId","setUserName","userName","setUserEmail","userEmail","enableCrashlyticsCollection","statics"],"sources":["/Users/sharusan/MeetMyCar/myapp/node_modules/react-native-firebase/dist/modules/crashlytics/index.js"],"sourcesContent":["/**\n * \n * Crash Reporting representation wrapper\n */\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nexport const MODULE_NAME = 'RNFirebaseCrashlytics';\nexport const NAMESPACE = 'crashlytics';\nexport default class Crashlytics extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n  }\n  /**\n   * Forces a crash. Useful for testing your application is set up correctly.\n   */\n\n\n  crash() {\n    getNativeModule(this).crash();\n  }\n  /**\n   * Logs a message that will appear in any subsequent crash reports.\n   * @param {string} message\n   */\n\n\n  log(message) {\n    if (typeof message === 'string') {\n      getNativeModule(this).log(message);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Logs a non fatal exception.\n   * @param {number} code\n   * @param {string} message\n   */\n\n\n  recordError(code, message) {\n    if (typeof code === 'number' && typeof message === 'string') {\n      getNativeModule(this).recordError(code, message);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Logs a custom non fatal exception.\n   * @param {string} name\n   * @param {string} message\n   * @param {Object[]} stack Optional\n   */\n\n\n  recordCustomError(name, message, stack) {\n    if (typeof stack === 'undefined') {\n      if (typeof name === 'string' && typeof message === 'string') {\n        getNativeModule(this).recordCustomError(name, message, []);\n      } else {\n        throw new Error('Invalid parameter type!');\n      }\n    } else if (typeof name === 'string' && typeof message === 'string' && Array.isArray(stack)) {\n      let hasKey = true;\n      stack.forEach(v => {\n        if (!Object.prototype.hasOwnProperty.call(v, 'fileName')) {\n          hasKey = false;\n        }\n      });\n\n      if (hasKey) {\n        getNativeModule(this).recordCustomError(name, message, stack);\n      } else {\n        throw new Error('Missing required argument fileName!');\n      }\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Set a boolean value to show alongside any subsequent crash reports.\n   */\n\n\n  setBoolValue(key, value) {\n    if (typeof key === 'string' && typeof value === 'boolean') {\n      getNativeModule(this).setBoolValue(key, value);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Set a float value to show alongside any subsequent crash reports.\n   */\n\n\n  setFloatValue(key, value) {\n    if (typeof key === 'string' && typeof value === 'number') {\n      getNativeModule(this).setFloatValue(key, value);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Set an integer value to show alongside any subsequent crash reports.\n   */\n\n\n  setIntValue(key, value) {\n    if (typeof key === 'string' && typeof value === 'number') {\n      getNativeModule(this).setIntValue(key, value);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Set a string value to show alongside any subsequent crash reports.\n   */\n\n\n  setStringValue(key, value) {\n    if (typeof key === 'string' && typeof value === 'string') {\n      getNativeModule(this).setStringValue(key, value);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Set the user ID to show alongside any subsequent crash reports.\n   */\n\n\n  setUserIdentifier(userId) {\n    if (typeof userId === 'string') {\n      getNativeModule(this).setUserIdentifier(userId);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Set the user name to show alongside any subsequent crash reports.\n   */\n\n\n  setUserName(userName) {\n    if (typeof userName === 'string') {\n      return getNativeModule(this).setUserName(userName);\n    }\n\n    throw new Error('Invalid parameter type!');\n  }\n  /**\n   * Set the user email to show alongside any subsequent crash reports.\n   */\n\n\n  setUserEmail(userEmail) {\n    if (typeof userEmail === 'string') {\n      getNativeModule(this).setUserEmail(userEmail);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Enable Crashlytics reporting. Only avaliable when disabled automatic initialization\n   */\n\n\n  enableCrashlyticsCollection() {\n    getNativeModule(this).enableCrashlyticsCollection();\n  }\n\n}\nexport const statics = {};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}