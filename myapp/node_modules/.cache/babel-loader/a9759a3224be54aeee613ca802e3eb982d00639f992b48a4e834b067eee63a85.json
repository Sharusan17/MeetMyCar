{"ast":null,"code":"/**\n * \n * Database representation wrapper\n */\nimport { NativeModules } from 'react-native';\nimport Reference from './Reference';\nimport TransactionHandler from './transaction';\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nimport firebase from '../core/firebase';\nconst NATIVE_EVENTS = ['database_transaction_event' // 'database_server_offset', // TODO\n];\n\nexport const MODULE_NAME = 'RNFirebaseDatabase';\nexport const NAMESPACE = 'database';\n/**\n * @class Database\n */\n\nexport default class Database extends ModuleBase {\n  constructor(appOrCustomUrl, customUrl) {\n    let app;\n    let url;\n    if (typeof appOrCustomUrl === 'string') {\n      app = firebase.app();\n      url = appOrCustomUrl;\n    } else {\n      app = appOrCustomUrl;\n      url = customUrl || app.options.databaseURL;\n    } // enforce trailing slash\n\n    url = url.endsWith('/') ? url : `${url}/`;\n    super(app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: true,\n      hasCustomUrlSupport: true,\n      namespace: NAMESPACE\n    }, url);\n    this._serverTimeOffset = 0;\n    this._databaseURL = url;\n    this._transactionHandler = new TransactionHandler(this);\n    if (app.options.persistence) {\n      getNativeModule(this).setPersistence(app.options.persistence);\n    } // server time listener\n    // setTimeout used to avoid setPersistence race conditions\n    // todo move this and persistence to native side, create a db configure() method natively perhaps?\n    // todo and then native can call setPersistence and then emit offset events\n\n    setTimeout(() => {\n      this._offsetRef = this.ref('.info/serverTimeOffset');\n      this._offsetRef.on('value', snapshot => {\n        this._serverTimeOffset = snapshot.val() || this._serverTimeOffset;\n      });\n    }, 1);\n  }\n  /**\n   *\n   * @return {Date}\n   */\n\n  getServerTime() {\n    return new Date(Date.now() + this._serverTimeOffset);\n  }\n  /**\n   *\n   */\n\n  goOnline() {\n    getNativeModule(this).goOnline();\n  }\n  /**\n   *\n   */\n\n  goOffline() {\n    getNativeModule(this).goOffline();\n  }\n  /**\n   * Returns a new firebase reference instance\n   * @param path\n   * @returns {Reference}\n   */\n\n  ref(path) {\n    return new Reference(this, path);\n  }\n  /**\n   * Returns the database url\n   * @returns {string}\n   */\n\n  get databaseUrl() {\n    return this._databaseURL;\n  }\n}\nexport const statics = {\n  ServerValue: NativeModules.RNFirebaseDatabase ? {\n    TIMESTAMP: NativeModules.RNFirebaseDatabase.serverValueTimestamp || {\n      '.sv': 'timestamp'\n    }\n  } : {},\n  enableLogging(enabled) {\n    if (NativeModules[MODULE_NAME]) {\n      NativeModules[MODULE_NAME].enableLogging(enabled);\n    }\n  }\n};","map":{"version":3,"names":["NativeModules","Reference","TransactionHandler","ModuleBase","getNativeModule","firebase","NATIVE_EVENTS","MODULE_NAME","NAMESPACE","Database","constructor","appOrCustomUrl","customUrl","app","url","options","databaseURL","endsWith","events","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","_serverTimeOffset","_databaseURL","_transactionHandler","persistence","setPersistence","setTimeout","_offsetRef","ref","on","snapshot","val","getServerTime","Date","now","goOnline","goOffline","path","databaseUrl","statics","ServerValue","RNFirebaseDatabase","TIMESTAMP","serverValueTimestamp","enableLogging","enabled"],"sources":["/Users/sharusan/MeetMyCar/myapp/node_modules/react-native-firebase/dist/modules/database/index.js"],"sourcesContent":["/**\n * \n * Database representation wrapper\n */\nimport { NativeModules } from 'react-native';\nimport Reference from './Reference';\nimport TransactionHandler from './transaction';\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nimport firebase from '../core/firebase';\nconst NATIVE_EVENTS = ['database_transaction_event' // 'database_server_offset', // TODO\n];\nexport const MODULE_NAME = 'RNFirebaseDatabase';\nexport const NAMESPACE = 'database';\n/**\n * @class Database\n */\n\nexport default class Database extends ModuleBase {\n  constructor(appOrCustomUrl, customUrl) {\n    let app;\n    let url;\n\n    if (typeof appOrCustomUrl === 'string') {\n      app = firebase.app();\n      url = appOrCustomUrl;\n    } else {\n      app = appOrCustomUrl;\n      url = customUrl || app.options.databaseURL;\n    } // enforce trailing slash\n\n\n    url = url.endsWith('/') ? url : `${url}/`;\n    super(app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: true,\n      hasCustomUrlSupport: true,\n      namespace: NAMESPACE\n    }, url);\n    this._serverTimeOffset = 0;\n    this._databaseURL = url;\n    this._transactionHandler = new TransactionHandler(this);\n\n    if (app.options.persistence) {\n      getNativeModule(this).setPersistence(app.options.persistence);\n    } // server time listener\n    // setTimeout used to avoid setPersistence race conditions\n    // todo move this and persistence to native side, create a db configure() method natively perhaps?\n    // todo and then native can call setPersistence and then emit offset events\n\n\n    setTimeout(() => {\n      this._offsetRef = this.ref('.info/serverTimeOffset');\n\n      this._offsetRef.on('value', snapshot => {\n        this._serverTimeOffset = snapshot.val() || this._serverTimeOffset;\n      });\n    }, 1);\n  }\n  /**\n   *\n   * @return {Date}\n   */\n\n\n  getServerTime() {\n    return new Date(Date.now() + this._serverTimeOffset);\n  }\n  /**\n   *\n   */\n\n\n  goOnline() {\n    getNativeModule(this).goOnline();\n  }\n  /**\n   *\n   */\n\n\n  goOffline() {\n    getNativeModule(this).goOffline();\n  }\n  /**\n   * Returns a new firebase reference instance\n   * @param path\n   * @returns {Reference}\n   */\n\n\n  ref(path) {\n    return new Reference(this, path);\n  }\n  /**\n   * Returns the database url\n   * @returns {string}\n   */\n\n\n  get databaseUrl() {\n    return this._databaseURL;\n  }\n\n}\nexport const statics = {\n  ServerValue: NativeModules.RNFirebaseDatabase ? {\n    TIMESTAMP: NativeModules.RNFirebaseDatabase.serverValueTimestamp || {\n      '.sv': 'timestamp'\n    }\n  } : {},\n\n  enableLogging(enabled) {\n    if (NativeModules[MODULE_NAME]) {\n      NativeModules[MODULE_NAME].enableLogging(enabled);\n    }\n  }\n\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,aAAa,QAAQ,cAAc;AAC5C,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,kBAAkB,MAAM,eAAe;AAC9C,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,SAASC,eAAe,QAAQ,oBAAoB;AACpD,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,MAAMC,aAAa,GAAG,CAAC,4BAA4B,CAAC;AAAA,CACnD;;AACD,OAAO,MAAMC,WAAW,GAAG,oBAAoB;AAC/C,OAAO,MAAMC,SAAS,GAAG,UAAU;AACnC;AACA;AACA;;AAEA,eAAe,MAAMC,QAAQ,SAASN,UAAU,CAAC;EAC/CO,WAAWA,CAACC,cAAc,EAAEC,SAAS,EAAE;IACrC,IAAIC,GAAG;IACP,IAAIC,GAAG;IAEP,IAAI,OAAOH,cAAc,KAAK,QAAQ,EAAE;MACtCE,GAAG,GAAGR,QAAQ,CAACQ,GAAG,CAAC,CAAC;MACpBC,GAAG,GAAGH,cAAc;IACtB,CAAC,MAAM;MACLE,GAAG,GAAGF,cAAc;MACpBG,GAAG,GAAGF,SAAS,IAAIC,GAAG,CAACE,OAAO,CAACC,WAAW;IAC5C,CAAC,CAAC;;IAGFF,GAAG,GAAGA,GAAG,CAACG,QAAQ,CAAC,GAAG,CAAC,GAAGH,GAAG,GAAI,GAAEA,GAAI,GAAE;IACzC,KAAK,CAACD,GAAG,EAAE;MACTK,MAAM,EAAEZ,aAAa;MACrBa,UAAU,EAAEZ,WAAW;MACvBa,kBAAkB,EAAE,IAAI;MACxBC,mBAAmB,EAAE,IAAI;MACzBC,SAAS,EAAEd;IACb,CAAC,EAAEM,GAAG,CAAC;IACP,IAAI,CAACS,iBAAiB,GAAG,CAAC;IAC1B,IAAI,CAACC,YAAY,GAAGV,GAAG;IACvB,IAAI,CAACW,mBAAmB,GAAG,IAAIvB,kBAAkB,CAAC,IAAI,CAAC;IAEvD,IAAIW,GAAG,CAACE,OAAO,CAACW,WAAW,EAAE;MAC3BtB,eAAe,CAAC,IAAI,CAAC,CAACuB,cAAc,CAACd,GAAG,CAACE,OAAO,CAACW,WAAW,CAAC;IAC/D,CAAC,CAAC;IACF;IACA;IACA;;IAGAE,UAAU,CAAC,MAAM;MACf,IAAI,CAACC,UAAU,GAAG,IAAI,CAACC,GAAG,CAAC,wBAAwB,CAAC;MAEpD,IAAI,CAACD,UAAU,CAACE,EAAE,CAAC,OAAO,EAAEC,QAAQ,IAAI;QACtC,IAAI,CAACT,iBAAiB,GAAGS,QAAQ,CAACC,GAAG,CAAC,CAAC,IAAI,IAAI,CAACV,iBAAiB;MACnE,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,CAAC;EACP;EACA;AACF;AACA;AACA;;EAGEW,aAAaA,CAAA,EAAG;IACd,OAAO,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACb,iBAAiB,CAAC;EACtD;EACA;AACF;AACA;;EAGEc,QAAQA,CAAA,EAAG;IACTjC,eAAe,CAAC,IAAI,CAAC,CAACiC,QAAQ,CAAC,CAAC;EAClC;EACA;AACF;AACA;;EAGEC,SAASA,CAAA,EAAG;IACVlC,eAAe,CAAC,IAAI,CAAC,CAACkC,SAAS,CAAC,CAAC;EACnC;EACA;AACF;AACA;AACA;AACA;;EAGER,GAAGA,CAACS,IAAI,EAAE;IACR,OAAO,IAAItC,SAAS,CAAC,IAAI,EAAEsC,IAAI,CAAC;EAClC;EACA;AACF;AACA;AACA;;EAGE,IAAIC,WAAWA,CAAA,EAAG;IAChB,OAAO,IAAI,CAAChB,YAAY;EAC1B;AAEF;AACA,OAAO,MAAMiB,OAAO,GAAG;EACrBC,WAAW,EAAE1C,aAAa,CAAC2C,kBAAkB,GAAG;IAC9CC,SAAS,EAAE5C,aAAa,CAAC2C,kBAAkB,CAACE,oBAAoB,IAAI;MAClE,KAAK,EAAE;IACT;EACF,CAAC,GAAG,CAAC,CAAC;EAENC,aAAaA,CAACC,OAAO,EAAE;IACrB,IAAI/C,aAAa,CAACO,WAAW,CAAC,EAAE;MAC9BP,aAAa,CAACO,WAAW,CAAC,CAACuC,aAAa,CAACC,OAAO,CAAC;IACnD;EACF;AAEF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}