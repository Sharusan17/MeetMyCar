{"ast":null,"code":"/**\n * \n * Performance monitoring representation wrapper\n */\nimport Trace from './Trace';\nimport HttpMetric from './HttpMetric';\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nexport const MODULE_NAME = 'RNFirebasePerformance';\nexport const NAMESPACE = 'perf';\nconst HTTP_METHODS = {\n  CONNECT: true,\n  DELETE: true,\n  GET: true,\n  HEAD: true,\n  OPTIONS: true,\n  PATCH: true,\n  POST: true,\n  PUT: true,\n  TRACE: true\n};\nexport default class PerformanceMonitoring extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n  }\n  /**\n   * Globally enable or disable performance monitoring\n   * @param enabled\n   * @returns {*}\n   */\n\n  setPerformanceCollectionEnabled(enabled) {\n    if (typeof enabled !== 'boolean') {\n      throw new Error('firebase.perf().setPerformanceCollectionEnabled() requires a boolean value');\n    }\n    return getNativeModule(this).setPerformanceCollectionEnabled(enabled);\n  }\n  /**\n   * Returns a new trace instance\n   * @param trace\n   */\n\n  newTrace(trace) {\n    if (typeof trace !== 'string') {\n      throw new Error('firebase.perf().newTrace() requires a string value');\n    }\n    return new Trace(this, trace);\n  }\n  /**\n   * Return a new HttpMetric instance\n   * @param url\n   * @param httpMethod\n   * @returns {HttpMetric}\n   */\n\n  newHttpMetric(url, httpMethod) {\n    if (typeof url !== 'string' || typeof httpMethod !== 'string') {\n      throw new Error('firebase.perf().newHttpMetric() requires url and httpMethod string values');\n    }\n    if (!HTTP_METHODS[httpMethod]) {\n      throw new Error(`firebase.perf().newHttpMetric() httpMethod should be one of ${Object.keys(HTTP_METHODS).join(', ')}`);\n    }\n    return new HttpMetric(this, url, httpMethod);\n  }\n}\nexport const statics = {};","map":{"version":3,"names":["Trace","HttpMetric","ModuleBase","getNativeModule","MODULE_NAME","NAMESPACE","HTTP_METHODS","CONNECT","DELETE","GET","HEAD","OPTIONS","PATCH","POST","PUT","TRACE","PerformanceMonitoring","constructor","app","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","setPerformanceCollectionEnabled","enabled","Error","newTrace","trace","newHttpMetric","url","httpMethod","Object","keys","join","statics"],"sources":["/Users/sharusan/MeetMyCar/myapp/node_modules/react-native-firebase/dist/modules/perf/index.js"],"sourcesContent":["/**\n * \n * Performance monitoring representation wrapper\n */\nimport Trace from './Trace';\nimport HttpMetric from './HttpMetric';\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nexport const MODULE_NAME = 'RNFirebasePerformance';\nexport const NAMESPACE = 'perf';\nconst HTTP_METHODS = {\n  CONNECT: true,\n  DELETE: true,\n  GET: true,\n  HEAD: true,\n  OPTIONS: true,\n  PATCH: true,\n  POST: true,\n  PUT: true,\n  TRACE: true\n};\nexport default class PerformanceMonitoring extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n  }\n  /**\n   * Globally enable or disable performance monitoring\n   * @param enabled\n   * @returns {*}\n   */\n\n\n  setPerformanceCollectionEnabled(enabled) {\n    if (typeof enabled !== 'boolean') {\n      throw new Error('firebase.perf().setPerformanceCollectionEnabled() requires a boolean value');\n    }\n\n    return getNativeModule(this).setPerformanceCollectionEnabled(enabled);\n  }\n  /**\n   * Returns a new trace instance\n   * @param trace\n   */\n\n\n  newTrace(trace) {\n    if (typeof trace !== 'string') {\n      throw new Error('firebase.perf().newTrace() requires a string value');\n    }\n\n    return new Trace(this, trace);\n  }\n  /**\n   * Return a new HttpMetric instance\n   * @param url\n   * @param httpMethod\n   * @returns {HttpMetric}\n   */\n\n\n  newHttpMetric(url, httpMethod) {\n    if (typeof url !== 'string' || typeof httpMethod !== 'string') {\n      throw new Error('firebase.perf().newHttpMetric() requires url and httpMethod string values');\n    }\n\n    if (!HTTP_METHODS[httpMethod]) {\n      throw new Error(`firebase.perf().newHttpMetric() httpMethod should be one of ${Object.keys(HTTP_METHODS).join(', ')}`);\n    }\n\n    return new HttpMetric(this, url, httpMethod);\n  }\n\n}\nexport const statics = {};"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,SAAS;AAC3B,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,SAASC,eAAe,QAAQ,oBAAoB;AACpD,OAAO,MAAMC,WAAW,GAAG,uBAAuB;AAClD,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC/B,MAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE,IAAI;EACbC,MAAM,EAAE,IAAI;EACZC,GAAG,EAAE,IAAI;EACTC,IAAI,EAAE,IAAI;EACVC,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE,IAAI;EACXC,IAAI,EAAE,IAAI;EACVC,GAAG,EAAE,IAAI;EACTC,KAAK,EAAE;AACT,CAAC;AACD,eAAe,MAAMC,qBAAqB,SAASd,UAAU,CAAC;EAC5De,WAAWA,CAACC,GAAG,EAAE;IACf,KAAK,CAACA,GAAG,EAAE;MACTC,UAAU,EAAEf,WAAW;MACvBgB,kBAAkB,EAAE,KAAK;MACzBC,mBAAmB,EAAE,KAAK;MAC1BC,SAAS,EAAEjB;IACb,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;;EAGEkB,+BAA+BA,CAACC,OAAO,EAAE;IACvC,IAAI,OAAOA,OAAO,KAAK,SAAS,EAAE;MAChC,MAAM,IAAIC,KAAK,CAAC,4EAA4E,CAAC;IAC/F;IAEA,OAAOtB,eAAe,CAAC,IAAI,CAAC,CAACoB,+BAA+B,CAACC,OAAO,CAAC;EACvE;EACA;AACF;AACA;AACA;;EAGEE,QAAQA,CAACC,KAAK,EAAE;IACd,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B,MAAM,IAAIF,KAAK,CAAC,oDAAoD,CAAC;IACvE;IAEA,OAAO,IAAIzB,KAAK,CAAC,IAAI,EAAE2B,KAAK,CAAC;EAC/B;EACA;AACF;AACA;AACA;AACA;AACA;;EAGEC,aAAaA,CAACC,GAAG,EAAEC,UAAU,EAAE;IAC7B,IAAI,OAAOD,GAAG,KAAK,QAAQ,IAAI,OAAOC,UAAU,KAAK,QAAQ,EAAE;MAC7D,MAAM,IAAIL,KAAK,CAAC,2EAA2E,CAAC;IAC9F;IAEA,IAAI,CAACnB,YAAY,CAACwB,UAAU,CAAC,EAAE;MAC7B,MAAM,IAAIL,KAAK,CAAE,+DAA8DM,MAAM,CAACC,IAAI,CAAC1B,YAAY,CAAC,CAAC2B,IAAI,CAAC,IAAI,CAAE,EAAC,CAAC;IACxH;IAEA,OAAO,IAAIhC,UAAU,CAAC,IAAI,EAAE4B,GAAG,EAAEC,UAAU,CAAC;EAC9C;AAEF;AACA,OAAO,MAAMI,OAAO,GAAG,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}