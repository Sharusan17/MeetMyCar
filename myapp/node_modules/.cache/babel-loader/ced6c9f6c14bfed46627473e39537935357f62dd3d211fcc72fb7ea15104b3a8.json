{"ast":null,"code":"/**\n * \n * Database Reference representation wrapper\n */\nimport Query from './Query';\nimport DataSnapshot from './DataSnapshot';\nimport OnDisconnect from './OnDisconnect';\nimport { getLogger } from '../../utils/log';\nimport { getNativeModule } from '../../utils/native';\nimport ReferenceBase from '../../utils/ReferenceBase';\nimport { promiseOrCallback, isFunction, isObject, isString, tryJSONParse, tryJSONStringify, generatePushID } from '../../utils';\nimport SyncTree from '../../utils/SyncTree';\n// track all event registrations by path\nlet listeners = 0;\n/**\n * Enum for event types\n * @readonly\n * @enum {String}\n */\n\nconst ReferenceEventTypes = {\n  value: 'value',\n  child_added: 'child_added',\n  child_removed: 'child_removed',\n  child_changed: 'child_changed',\n  child_moved: 'child_moved'\n};\n\n/**\n * @typedef {String} ReferenceLocation - Path to location in the database, relative\n * to the root reference. Consists of a path where segments are separated by a\n * forward slash (/) and ends in a ReferenceKey - except the root location, which\n * has no ReferenceKey.\n *\n * @example\n * // root reference location: '/'\n * // non-root reference: '/path/to/referenceKey'\n */\n\n/**\n * @typedef {String} ReferenceKey - Identifier for each location that is unique to that\n * location, within the scope of its parent. The last part of a ReferenceLocation.\n */\n\n/**\n * Represents a specific location in your Database that can be used for\n * reading or writing data.\n *\n * You can reference the root using firebase.database().ref() or a child location\n * by calling firebase.database().ref(\"child/path\").\n *\n * @link https://firebase.google.com/docs/reference/js/firebase.database.Reference\n * @class Reference\n * @extends ReferenceBase\n */\nexport default class Reference extends ReferenceBase {\n  constructor(database, path, existingModifiers) {\n    super(path);\n    this._refListeners = {};\n    this._database = database;\n    this._query = new Query(this, existingModifiers);\n    getLogger(database).debug('Created new Reference', this._getRefKey());\n  }\n  /**\n   * By calling `keepSynced(true)` on a location, the data for that location will\n   * automatically be downloaded and kept in sync, even when no listeners are\n   * attached for that location. Additionally, while a location is kept synced,\n   *  it will not be evicted from the persistent disk cache.\n   *\n   * @link https://firebase.google.com/docs/reference/android/com/google/firebase/database/Query.html#keepSynced(boolean)\n   * @param bool\n   * @returns {*}\n   */\n\n  keepSynced(bool) {\n    return getNativeModule(this._database).keepSynced(this._getRefKey(), this.path, this._query.getModifiers(), bool);\n  }\n  /**\n   * Writes data to this Database location.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.database.Reference#set\n   * @param value\n   * @param onComplete\n   * @returns {Promise}\n   */\n\n  set(value, onComplete) {\n    return promiseOrCallback(getNativeModule(this._database).set(this.path, this._serializeAnyType(value)), onComplete);\n  }\n  /**\n   * Sets a priority for the data at this Database location.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.database.Reference#setPriority\n   * @param priority\n   * @param onComplete\n   * @returns {Promise}\n   */\n\n  setPriority(priority, onComplete) {\n    const _priority = this._serializeAnyType(priority);\n    return promiseOrCallback(getNativeModule(this._database).setPriority(this.path, _priority), onComplete);\n  }\n  /**\n   * Writes data the Database location. Like set() but also specifies the priority for that data.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.database.Reference#setWithPriority\n   * @param value\n   * @param priority\n   * @param onComplete\n   * @returns {Promise}\n   */\n\n  setWithPriority(value, priority, onComplete) {\n    const _value = this._serializeAnyType(value);\n    const _priority = this._serializeAnyType(priority);\n    return promiseOrCallback(getNativeModule(this._database).setWithPriority(this.path, _value, _priority), onComplete);\n  }\n  /**\n   * Writes multiple values to the Database at once.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.database.Reference#update\n   * @param val\n   * @param onComplete\n   * @returns {Promise}\n   */\n\n  update(val, onComplete) {\n    const value = this._serializeObject(val);\n    return promiseOrCallback(getNativeModule(this._database).update(this.path, value), onComplete);\n  }\n  /**\n   * Removes the data at this Database location.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.database.Reference#remove\n   * @param onComplete\n   * @return {Promise}\n   */\n\n  remove(onComplete) {\n    return promiseOrCallback(getNativeModule(this._database).remove(this.path), onComplete);\n  }\n  /**\n   * Atomically modifies the data at this location.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.database.Reference#transaction\n   * @param transactionUpdate\n   * @param onComplete\n   * @param applyLocally\n   */\n\n  transaction(transactionUpdate, onComplete, applyLocally = false) {\n    if (!isFunction(transactionUpdate)) {\n      return Promise.reject(new Error('Missing transactionUpdate function argument.'));\n    }\n    return new Promise((resolve, reject) => {\n      const onCompleteWrapper = (error, committed, snapshotData) => {\n        if (isFunction(onComplete)) {\n          if (error) {\n            onComplete(error, committed, null);\n          } else {\n            onComplete(null, committed, new DataSnapshot(this, snapshotData));\n          }\n        }\n        if (error) return reject(error);\n        return resolve({\n          committed,\n          snapshot: new DataSnapshot(this, snapshotData)\n        });\n      }; // start the transaction natively\n\n      this._database._transactionHandler.add(this, transactionUpdate, onCompleteWrapper, applyLocally);\n    });\n  }\n  /**\n   *\n   * @param eventName\n   * @param successCallback\n   * @param cancelOrContext\n   * @param context\n   * @returns {Promise.<any>}\n   */\n\n  once(eventName = 'value', successCallback, cancelOrContext, context) {\n    return getNativeModule(this._database).once(this._getRefKey(), this.path, this._query.getModifiers(), eventName).then(({\n      snapshot\n    }) => {\n      const _snapshot = new DataSnapshot(this, snapshot);\n      if (isFunction(successCallback)) {\n        if (isObject(cancelOrContext)) successCallback.bind(cancelOrContext)(_snapshot);\n        if (context && isObject(context)) successCallback.bind(context)(_snapshot);\n        successCallback(_snapshot);\n      }\n      return _snapshot;\n    }).catch(error => {\n      if (isFunction(cancelOrContext)) return cancelOrContext(error);\n      throw error;\n    });\n  }\n  /**\n   *\n   * @param value\n   * @param onComplete\n   * @returns {*}\n   */\n\n  push(value, onComplete) {\n    const name = generatePushID(this._database._serverTimeOffset);\n    const pushRef = this.child(name);\n    const thennablePushRef = this.child(name);\n    let promise;\n    if (value != null) {\n      promise = thennablePushRef.set(value, onComplete).then(() => pushRef);\n    } else {\n      promise = Promise.resolve(pushRef);\n    }\n    thennablePushRef.then = promise.then.bind(promise);\n    thennablePushRef.catch = promise.catch.bind(promise);\n    if (isFunction(onComplete)) {\n      promise.catch(() => {});\n    }\n    return thennablePushRef;\n  }\n  /**\n   * MODIFIERS\n   */\n\n  /**\n   *\n   * @returns {Reference}\n   */\n\n  orderByKey() {\n    return this.orderBy('orderByKey');\n  }\n  /**\n   *\n   * @returns {Reference}\n   */\n\n  orderByPriority() {\n    return this.orderBy('orderByPriority');\n  }\n  /**\n   *\n   * @returns {Reference}\n   */\n\n  orderByValue() {\n    return this.orderBy('orderByValue');\n  }\n  /**\n   *\n   * @param key\n   * @returns {Reference}\n   */\n\n  orderByChild(key) {\n    return this.orderBy('orderByChild', key);\n  }\n  /**\n   *\n   * @param name\n   * @param key\n   * @returns {Reference}\n   */\n\n  orderBy(name, key) {\n    const newRef = new Reference(this._database, this.path, this._query.getModifiers());\n    newRef._query.orderBy(name, key);\n    return newRef;\n  }\n  /**\n   * LIMITS\n   */\n\n  /**\n   *\n   * @param limit\n   * @returns {Reference}\n   */\n\n  limitToLast(limit) {\n    return this.limit('limitToLast', limit);\n  }\n  /**\n   *\n   * @param limit\n   * @returns {Reference}\n   */\n\n  limitToFirst(limit) {\n    return this.limit('limitToFirst', limit);\n  }\n  /**\n   *\n   * @param name\n   * @param limit\n   * @returns {Reference}\n   */\n\n  limit(name, limit) {\n    const newRef = new Reference(this._database, this.path, this._query.getModifiers());\n    newRef._query.limit(name, limit);\n    return newRef;\n  }\n  /**\n   * FILTERS\n   */\n\n  /**\n   *\n   * @param value\n   * @param key\n   * @returns {Reference}\n   */\n\n  equalTo(value, key) {\n    return this.filter('equalTo', value, key);\n  }\n  /**\n   *\n   * @param value\n   * @param key\n   * @returns {Reference}\n   */\n\n  endAt(value, key) {\n    return this.filter('endAt', value, key);\n  }\n  /**\n   *\n   * @param value\n   * @param key\n   * @returns {Reference}\n   */\n\n  startAt(value, key) {\n    return this.filter('startAt', value, key);\n  }\n  /**\n   *\n   * @param name\n   * @param value\n   * @param key\n   * @returns {Reference}\n   */\n\n  filter(name, value, key) {\n    const newRef = new Reference(this._database, this.path, this._query.getModifiers());\n    newRef._query.filter(name, value, key);\n    return newRef;\n  }\n  /**\n   *\n   * @returns {OnDisconnect}\n   */\n\n  onDisconnect() {\n    return new OnDisconnect(this);\n  }\n  /**\n   * Creates a Reference to a child of the current Reference, using a relative path.\n   * No validation is performed on the path to ensure it has a valid format.\n   * @param {String} path relative to current ref's location\n   * @returns {!Reference} A new Reference to the path provided, relative to the current\n   * Reference\n   * {@link https://firebase.google.com/docs/reference/js/firebase.database.Reference#child}\n   */\n\n  child(path) {\n    return new Reference(this._database, `${this.path}/${path}`);\n  }\n  /**\n   * Return the ref as a path string\n   * @returns {string}\n   */\n\n  toString() {\n    return `${this._database.databaseUrl}${this.path}`;\n  }\n  /**\n   * Return a JSON-serializable representation of this object.\n   * @returns {string}\n   */\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * Returns whether another Reference represent the same location and are from the\n   * same instance of firebase.app.App - multiple firebase apps not currently supported.\n   * @param {Reference} otherRef - Other reference to compare to this one\n   * @return {Boolean} Whether otherReference is equal to this one\n   *\n   * {@link https://firebase.google.com/docs/reference/js/firebase.database.Reference#isEqual}\n   */\n\n  isEqual(otherRef) {\n    return !!otherRef && otherRef.constructor === Reference && otherRef.key === this.key && this._query.queryIdentifier() === otherRef._query.queryIdentifier();\n  }\n  /**\n   * GETTERS\n   */\n\n  /**\n   * The parent location of a Reference, or null for the root Reference.\n   * @type {Reference}\n   *\n   * {@link https://firebase.google.com/docs/reference/js/firebase.database.Reference#parent}\n   */\n\n  get parent() {\n    if (this.path === '/') return null;\n    return new Reference(this._database, this.path.substring(0, this.path.lastIndexOf('/')));\n  }\n  /**\n   * A reference to itself\n   * @type {!Reference}\n   *\n   * {@link https://firebase.google.com/docs/reference/js/firebase.database.Reference#ref}\n   */\n\n  get ref() {\n    return this;\n  }\n  /**\n   * Reference to the root of the database: '/'\n   * @type {!Reference}\n   *\n   * {@link https://firebase.google.com/docs/reference/js/firebase.database.Reference#root}\n   */\n\n  get root() {\n    return new Reference(this._database, '/');\n  }\n  /**\n   * INTERNALS\n   */\n\n  /**\n   * Generate a unique registration key.\n   *\n   * @return {string}\n   */\n\n  _getRegistrationKey(eventType) {\n    return `$${this._database.databaseUrl}$/${this.path}$${this._query.queryIdentifier()}$${listeners}$${eventType}`;\n  }\n  /**\n   * Generate a string that uniquely identifies this\n   * combination of path and query modifiers\n   *\n   * @return {string}\n   * @private\n   */\n\n  _getRefKey() {\n    return `$${this._database.databaseUrl}$/${this.path}$${this._query.queryIdentifier()}`;\n  }\n  /**\n   *\n   * @param obj\n   * @returns {Object}\n   * @private\n   */\n\n  _serializeObject(obj) {\n    if (!isObject(obj)) return obj; // json stringify then parse it calls toString on Objects / Classes\n    // that support it i.e new Date() becomes a ISO string.\n\n    return tryJSONParse(tryJSONStringify(obj));\n  }\n  /**\n   *\n   * @param value\n   * @returns {*}\n   * @private\n   */\n\n  _serializeAnyType(value) {\n    if (isObject(value)) {\n      return {\n        type: 'object',\n        value: this._serializeObject(value)\n      };\n    }\n    return {\n      type: typeof value,\n      value\n    };\n  }\n  /**\n   * Register a listener for data changes at the current ref's location.\n   * The primary method of reading data from a Database.\n   *\n   * Listeners can be unbound using {@link off}.\n   *\n   * Event Types:\n   *\n   * - value: {@link callback}.\n   * - child_added: {@link callback}\n   * - child_removed: {@link callback}\n   * - child_changed: {@link callback}\n   * - child_moved: {@link callback}\n   *\n   * @param {ReferenceEventType} eventType - Type of event to attach a callback for.\n   * @param {ReferenceEventCallback} callback - Function that will be called\n   * when the event occurs with the new data.\n   * @param {cancelCallbackOrContext=} cancelCallbackOrContext - Optional callback that is called\n   * if the event subscription fails. {@link cancelCallbackOrContext}\n   * @param {*=} context - Optional object to bind the callbacks to when calling them.\n   * @returns {ReferenceEventCallback} callback function, unmodified (unbound), for\n   * convenience if you want to pass an inline function to on() and store it later for\n   * removing using off().\n   *\n   * {@link https://firebase.google.com/docs/reference/js/firebase.database.Reference#on}\n   */\n\n  on(eventType, callback, cancelCallbackOrContext, context) {\n    if (!eventType) {\n      throw new Error('Query.on failed: Function called with 0 arguments. Expects at least 2.');\n    }\n    if (!isString(eventType) || !ReferenceEventTypes[eventType]) {\n      throw new Error(`Query.on failed: First argument must be a valid string event type: \"${Object.keys(ReferenceEventTypes).join(', ')}\"`);\n    }\n    if (!callback) {\n      throw new Error('Query.on failed: Function called with 1 argument. Expects at least 2.');\n    }\n    if (!isFunction(callback)) {\n      throw new Error('Query.on failed: Second argument must be a valid function.');\n    }\n    if (cancelCallbackOrContext && !isFunction(cancelCallbackOrContext) && !isObject(context) && !isObject(cancelCallbackOrContext)) {\n      throw new Error('Query.on failed: Function called with 3 arguments, but third optional argument `cancelCallbackOrContext` was not a function.');\n    }\n    if (cancelCallbackOrContext && !isFunction(cancelCallbackOrContext) && context) {\n      throw new Error('Query.on failed: Function called with 4 arguments, but third optional argument `cancelCallbackOrContext` was not a function.');\n    }\n    const eventRegistrationKey = this._getRegistrationKey(eventType);\n    const registrationCancellationKey = `${eventRegistrationKey}$cancelled`;\n    const _context = cancelCallbackOrContext && !isFunction(cancelCallbackOrContext) ? cancelCallbackOrContext : context;\n    const registrationObj = {\n      eventType,\n      ref: this,\n      path: this.path,\n      key: this._getRefKey(),\n      appName: this._database.app.name,\n      dbURL: this._database.databaseUrl,\n      eventRegistrationKey\n    };\n    SyncTree.addRegistration({\n      ...registrationObj,\n      listener: _context ? callback.bind(_context) : callback\n    });\n    if (cancelCallbackOrContext && isFunction(cancelCallbackOrContext)) {\n      // cancellations have their own separate registration\n      // as these are one off events, and they're not guaranteed\n      // to occur either, only happens on failure to register on native\n      SyncTree.addRegistration({\n        ref: this,\n        once: true,\n        path: this.path,\n        key: this._getRefKey(),\n        appName: this._database.app.name,\n        dbURL: this._database.databaseUrl,\n        eventType: `${eventType}$cancelled`,\n        eventRegistrationKey: registrationCancellationKey,\n        listener: _context ? cancelCallbackOrContext.bind(_context) : cancelCallbackOrContext\n      });\n    } // initialise the native listener if not already listening\n\n    getNativeModule(this._database).on({\n      eventType,\n      path: this.path,\n      key: this._getRefKey(),\n      appName: this._database.app.name,\n      modifiers: this._query.getModifiers(),\n      hasCancellationCallback: isFunction(cancelCallbackOrContext),\n      registration: {\n        eventRegistrationKey,\n        key: registrationObj.key,\n        registrationCancellationKey\n      }\n    }); // increment number of listeners - just a short way of making\n    // every registration unique per .on() call\n\n    listeners += 1; // return original unbound successCallback for\n    // the purposes of calling .off(eventType, callback) at a later date\n\n    return callback;\n  }\n  /**\n   * Detaches a callback previously attached with on().\n   *\n   * Detach a callback previously attached with on(). Note that if on() was called\n   * multiple times with the same eventType and callback, the callback will be called\n   * multiple times for each event, and off() must be called multiple times to\n   * remove the callback. Calling off() on a parent listener will not automatically\n   * remove listeners registered on child nodes, off() must also be called on any\n   * child listeners to remove the callback.\n   *\n   *  If a callback is not specified, all callbacks for the specified eventType will be removed.\n   * Similarly, if no eventType or callback is specified, all callbacks for the Reference will be removed.\n   * @param eventType\n   * @param originalCallback\n   */\n\n  off(eventType = '', originalCallback) {\n    if (!arguments.length) {\n      // Firebase Docs:\n      //     if no eventType or callback is specified, all callbacks for the Reference will be removed.\n      return SyncTree.removeListenersForRegistrations(SyncTree.getRegistrationsByPath(this.path));\n    }\n    /*\n     * VALIDATE ARGS\n     */\n\n    if (eventType && (!isString(eventType) || !ReferenceEventTypes[eventType])) {\n      throw new Error(`Query.off failed: First argument must be a valid string event type: \"${Object.keys(ReferenceEventTypes).join(', ')}\"`);\n    }\n    if (originalCallback && !isFunction(originalCallback)) {\n      throw new Error('Query.off failed: Function called with 2 arguments, but second optional argument was not a function.');\n    } // Firebase Docs:\n    //     Note that if on() was called\n    //     multiple times with the same eventType and callback, the callback will be called\n    //     multiple times for each event, and off() must be called multiple times to\n    //     remove the callback.\n    // Remove only a single registration\n\n    if (eventType && originalCallback) {\n      const registration = SyncTree.getOneByPathEventListener(this.path, eventType, originalCallback);\n      if (!registration) return []; // remove the paired cancellation registration if any exist\n\n      SyncTree.removeListenersForRegistrations([`${registration}$cancelled`]); // remove only the first registration to match firebase web sdk\n      // call multiple times to remove multiple registrations\n\n      return SyncTree.removeListenerRegistrations(originalCallback, [registration]);\n    } // Firebase Docs:\n    //     If a callback is not specified, all callbacks for the specified eventType will be removed.\n\n    const registrations = SyncTree.getRegistrationsByPathEvent(this.path, eventType);\n    SyncTree.removeListenersForRegistrations(SyncTree.getRegistrationsByPathEvent(this.path, `${eventType}$cancelled`));\n    return SyncTree.removeListenersForRegistrations(registrations);\n  }\n}","map":{"version":3,"names":["Query","DataSnapshot","OnDisconnect","getLogger","getNativeModule","ReferenceBase","promiseOrCallback","isFunction","isObject","isString","tryJSONParse","tryJSONStringify","generatePushID","SyncTree","listeners","ReferenceEventTypes","value","child_added","child_removed","child_changed","child_moved","Reference","constructor","database","path","existingModifiers","_refListeners","_database","_query","debug","_getRefKey","keepSynced","bool","getModifiers","set","onComplete","_serializeAnyType","setPriority","priority","_priority","setWithPriority","_value","update","val","_serializeObject","remove","transaction","transactionUpdate","applyLocally","Promise","reject","Error","resolve","onCompleteWrapper","error","committed","snapshotData","snapshot","_transactionHandler","add","once","eventName","successCallback","cancelOrContext","context","then","_snapshot","bind","catch","push","name","_serverTimeOffset","pushRef","child","thennablePushRef","promise","orderByKey","orderBy","orderByPriority","orderByValue","orderByChild","key","newRef","limitToLast","limit","limitToFirst","equalTo","filter","endAt","startAt","onDisconnect","toString","databaseUrl","toJSON","isEqual","otherRef","queryIdentifier","parent","substring","lastIndexOf","ref","root","_getRegistrationKey","eventType","obj","type","on","callback","cancelCallbackOrContext","Object","keys","join","eventRegistrationKey","registrationCancellationKey","_context","registrationObj","appName","app","dbURL","addRegistration","listener","modifiers","hasCancellationCallback","registration","off","originalCallback","arguments","length","removeListenersForRegistrations","getRegistrationsByPath","getOneByPathEventListener","removeListenerRegistrations","registrations","getRegistrationsByPathEvent"],"sources":["/Users/sharusan/MeetMyCar/myapp/node_modules/react-native-firebase/dist/modules/database/Reference.js"],"sourcesContent":["/**\n * \n * Database Reference representation wrapper\n */\nimport Query from './Query';\nimport DataSnapshot from './DataSnapshot';\nimport OnDisconnect from './OnDisconnect';\nimport { getLogger } from '../../utils/log';\nimport { getNativeModule } from '../../utils/native';\nimport ReferenceBase from '../../utils/ReferenceBase';\nimport { promiseOrCallback, isFunction, isObject, isString, tryJSONParse, tryJSONStringify, generatePushID } from '../../utils';\nimport SyncTree from '../../utils/SyncTree';\n// track all event registrations by path\nlet listeners = 0;\n/**\n * Enum for event types\n * @readonly\n * @enum {String}\n */\n\nconst ReferenceEventTypes = {\n  value: 'value',\n  child_added: 'child_added',\n  child_removed: 'child_removed',\n  child_changed: 'child_changed',\n  child_moved: 'child_moved'\n};\n\n/**\n * @typedef {String} ReferenceLocation - Path to location in the database, relative\n * to the root reference. Consists of a path where segments are separated by a\n * forward slash (/) and ends in a ReferenceKey - except the root location, which\n * has no ReferenceKey.\n *\n * @example\n * // root reference location: '/'\n * // non-root reference: '/path/to/referenceKey'\n */\n\n/**\n * @typedef {String} ReferenceKey - Identifier for each location that is unique to that\n * location, within the scope of its parent. The last part of a ReferenceLocation.\n */\n\n/**\n * Represents a specific location in your Database that can be used for\n * reading or writing data.\n *\n * You can reference the root using firebase.database().ref() or a child location\n * by calling firebase.database().ref(\"child/path\").\n *\n * @link https://firebase.google.com/docs/reference/js/firebase.database.Reference\n * @class Reference\n * @extends ReferenceBase\n */\nexport default class Reference extends ReferenceBase {\n  constructor(database, path, existingModifiers) {\n    super(path);\n    this._refListeners = {};\n    this._database = database;\n    this._query = new Query(this, existingModifiers);\n    getLogger(database).debug('Created new Reference', this._getRefKey());\n  }\n  /**\n   * By calling `keepSynced(true)` on a location, the data for that location will\n   * automatically be downloaded and kept in sync, even when no listeners are\n   * attached for that location. Additionally, while a location is kept synced,\n   *  it will not be evicted from the persistent disk cache.\n   *\n   * @link https://firebase.google.com/docs/reference/android/com/google/firebase/database/Query.html#keepSynced(boolean)\n   * @param bool\n   * @returns {*}\n   */\n\n\n  keepSynced(bool) {\n    return getNativeModule(this._database).keepSynced(this._getRefKey(), this.path, this._query.getModifiers(), bool);\n  }\n  /**\n   * Writes data to this Database location.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.database.Reference#set\n   * @param value\n   * @param onComplete\n   * @returns {Promise}\n   */\n\n\n  set(value, onComplete) {\n    return promiseOrCallback(getNativeModule(this._database).set(this.path, this._serializeAnyType(value)), onComplete);\n  }\n  /**\n   * Sets a priority for the data at this Database location.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.database.Reference#setPriority\n   * @param priority\n   * @param onComplete\n   * @returns {Promise}\n   */\n\n\n  setPriority(priority, onComplete) {\n    const _priority = this._serializeAnyType(priority);\n\n    return promiseOrCallback(getNativeModule(this._database).setPriority(this.path, _priority), onComplete);\n  }\n  /**\n   * Writes data the Database location. Like set() but also specifies the priority for that data.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.database.Reference#setWithPriority\n   * @param value\n   * @param priority\n   * @param onComplete\n   * @returns {Promise}\n   */\n\n\n  setWithPriority(value, priority, onComplete) {\n    const _value = this._serializeAnyType(value);\n\n    const _priority = this._serializeAnyType(priority);\n\n    return promiseOrCallback(getNativeModule(this._database).setWithPriority(this.path, _value, _priority), onComplete);\n  }\n  /**\n   * Writes multiple values to the Database at once.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.database.Reference#update\n   * @param val\n   * @param onComplete\n   * @returns {Promise}\n   */\n\n\n  update(val, onComplete) {\n    const value = this._serializeObject(val);\n\n    return promiseOrCallback(getNativeModule(this._database).update(this.path, value), onComplete);\n  }\n  /**\n   * Removes the data at this Database location.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.database.Reference#remove\n   * @param onComplete\n   * @return {Promise}\n   */\n\n\n  remove(onComplete) {\n    return promiseOrCallback(getNativeModule(this._database).remove(this.path), onComplete);\n  }\n  /**\n   * Atomically modifies the data at this location.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.database.Reference#transaction\n   * @param transactionUpdate\n   * @param onComplete\n   * @param applyLocally\n   */\n\n\n  transaction(transactionUpdate, onComplete, applyLocally = false) {\n    if (!isFunction(transactionUpdate)) {\n      return Promise.reject(new Error('Missing transactionUpdate function argument.'));\n    }\n\n    return new Promise((resolve, reject) => {\n      const onCompleteWrapper = (error, committed, snapshotData) => {\n        if (isFunction(onComplete)) {\n          if (error) {\n            onComplete(error, committed, null);\n          } else {\n            onComplete(null, committed, new DataSnapshot(this, snapshotData));\n          }\n        }\n\n        if (error) return reject(error);\n        return resolve({\n          committed,\n          snapshot: new DataSnapshot(this, snapshotData)\n        });\n      }; // start the transaction natively\n\n\n      this._database._transactionHandler.add(this, transactionUpdate, onCompleteWrapper, applyLocally);\n    });\n  }\n  /**\n   *\n   * @param eventName\n   * @param successCallback\n   * @param cancelOrContext\n   * @param context\n   * @returns {Promise.<any>}\n   */\n\n\n  once(eventName = 'value', successCallback, cancelOrContext, context) {\n    return getNativeModule(this._database).once(this._getRefKey(), this.path, this._query.getModifiers(), eventName).then(({\n      snapshot\n    }) => {\n      const _snapshot = new DataSnapshot(this, snapshot);\n\n      if (isFunction(successCallback)) {\n        if (isObject(cancelOrContext)) successCallback.bind(cancelOrContext)(_snapshot);\n        if (context && isObject(context)) successCallback.bind(context)(_snapshot);\n        successCallback(_snapshot);\n      }\n\n      return _snapshot;\n    }).catch(error => {\n      if (isFunction(cancelOrContext)) return cancelOrContext(error);\n      throw error;\n    });\n  }\n  /**\n   *\n   * @param value\n   * @param onComplete\n   * @returns {*}\n   */\n\n\n  push(value, onComplete) {\n    const name = generatePushID(this._database._serverTimeOffset);\n    const pushRef = this.child(name);\n    const thennablePushRef = this.child(name);\n    let promise;\n\n    if (value != null) {\n      promise = thennablePushRef.set(value, onComplete).then(() => pushRef);\n    } else {\n      promise = Promise.resolve(pushRef);\n    }\n\n    thennablePushRef.then = promise.then.bind(promise);\n    thennablePushRef.catch = promise.catch.bind(promise);\n\n    if (isFunction(onComplete)) {\n      promise.catch(() => {});\n    }\n\n    return thennablePushRef;\n  }\n  /**\n   * MODIFIERS\n   */\n\n  /**\n   *\n   * @returns {Reference}\n   */\n\n\n  orderByKey() {\n    return this.orderBy('orderByKey');\n  }\n  /**\n   *\n   * @returns {Reference}\n   */\n\n\n  orderByPriority() {\n    return this.orderBy('orderByPriority');\n  }\n  /**\n   *\n   * @returns {Reference}\n   */\n\n\n  orderByValue() {\n    return this.orderBy('orderByValue');\n  }\n  /**\n   *\n   * @param key\n   * @returns {Reference}\n   */\n\n\n  orderByChild(key) {\n    return this.orderBy('orderByChild', key);\n  }\n  /**\n   *\n   * @param name\n   * @param key\n   * @returns {Reference}\n   */\n\n\n  orderBy(name, key) {\n    const newRef = new Reference(this._database, this.path, this._query.getModifiers());\n\n    newRef._query.orderBy(name, key);\n\n    return newRef;\n  }\n  /**\n   * LIMITS\n   */\n\n  /**\n   *\n   * @param limit\n   * @returns {Reference}\n   */\n\n\n  limitToLast(limit) {\n    return this.limit('limitToLast', limit);\n  }\n  /**\n   *\n   * @param limit\n   * @returns {Reference}\n   */\n\n\n  limitToFirst(limit) {\n    return this.limit('limitToFirst', limit);\n  }\n  /**\n   *\n   * @param name\n   * @param limit\n   * @returns {Reference}\n   */\n\n\n  limit(name, limit) {\n    const newRef = new Reference(this._database, this.path, this._query.getModifiers());\n\n    newRef._query.limit(name, limit);\n\n    return newRef;\n  }\n  /**\n   * FILTERS\n   */\n\n  /**\n   *\n   * @param value\n   * @param key\n   * @returns {Reference}\n   */\n\n\n  equalTo(value, key) {\n    return this.filter('equalTo', value, key);\n  }\n  /**\n   *\n   * @param value\n   * @param key\n   * @returns {Reference}\n   */\n\n\n  endAt(value, key) {\n    return this.filter('endAt', value, key);\n  }\n  /**\n   *\n   * @param value\n   * @param key\n   * @returns {Reference}\n   */\n\n\n  startAt(value, key) {\n    return this.filter('startAt', value, key);\n  }\n  /**\n   *\n   * @param name\n   * @param value\n   * @param key\n   * @returns {Reference}\n   */\n\n\n  filter(name, value, key) {\n    const newRef = new Reference(this._database, this.path, this._query.getModifiers());\n\n    newRef._query.filter(name, value, key);\n\n    return newRef;\n  }\n  /**\n   *\n   * @returns {OnDisconnect}\n   */\n\n\n  onDisconnect() {\n    return new OnDisconnect(this);\n  }\n  /**\n   * Creates a Reference to a child of the current Reference, using a relative path.\n   * No validation is performed on the path to ensure it has a valid format.\n   * @param {String} path relative to current ref's location\n   * @returns {!Reference} A new Reference to the path provided, relative to the current\n   * Reference\n   * {@link https://firebase.google.com/docs/reference/js/firebase.database.Reference#child}\n   */\n\n\n  child(path) {\n    return new Reference(this._database, `${this.path}/${path}`);\n  }\n  /**\n   * Return the ref as a path string\n   * @returns {string}\n   */\n\n\n  toString() {\n    return `${this._database.databaseUrl}${this.path}`;\n  }\n  /**\n   * Return a JSON-serializable representation of this object.\n   * @returns {string}\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * Returns whether another Reference represent the same location and are from the\n   * same instance of firebase.app.App - multiple firebase apps not currently supported.\n   * @param {Reference} otherRef - Other reference to compare to this one\n   * @return {Boolean} Whether otherReference is equal to this one\n   *\n   * {@link https://firebase.google.com/docs/reference/js/firebase.database.Reference#isEqual}\n   */\n\n\n  isEqual(otherRef) {\n    return !!otherRef && otherRef.constructor === Reference && otherRef.key === this.key && this._query.queryIdentifier() === otherRef._query.queryIdentifier();\n  }\n  /**\n   * GETTERS\n   */\n\n  /**\n   * The parent location of a Reference, or null for the root Reference.\n   * @type {Reference}\n   *\n   * {@link https://firebase.google.com/docs/reference/js/firebase.database.Reference#parent}\n   */\n\n\n  get parent() {\n    if (this.path === '/') return null;\n    return new Reference(this._database, this.path.substring(0, this.path.lastIndexOf('/')));\n  }\n  /**\n   * A reference to itself\n   * @type {!Reference}\n   *\n   * {@link https://firebase.google.com/docs/reference/js/firebase.database.Reference#ref}\n   */\n\n\n  get ref() {\n    return this;\n  }\n  /**\n   * Reference to the root of the database: '/'\n   * @type {!Reference}\n   *\n   * {@link https://firebase.google.com/docs/reference/js/firebase.database.Reference#root}\n   */\n\n\n  get root() {\n    return new Reference(this._database, '/');\n  }\n  /**\n   * INTERNALS\n   */\n\n  /**\n   * Generate a unique registration key.\n   *\n   * @return {string}\n   */\n\n\n  _getRegistrationKey(eventType) {\n    return `$${this._database.databaseUrl}$/${this.path}$${this._query.queryIdentifier()}$${listeners}$${eventType}`;\n  }\n  /**\n   * Generate a string that uniquely identifies this\n   * combination of path and query modifiers\n   *\n   * @return {string}\n   * @private\n   */\n\n\n  _getRefKey() {\n    return `$${this._database.databaseUrl}$/${this.path}$${this._query.queryIdentifier()}`;\n  }\n  /**\n   *\n   * @param obj\n   * @returns {Object}\n   * @private\n   */\n\n\n  _serializeObject(obj) {\n    if (!isObject(obj)) return obj; // json stringify then parse it calls toString on Objects / Classes\n    // that support it i.e new Date() becomes a ISO string.\n\n    return tryJSONParse(tryJSONStringify(obj));\n  }\n  /**\n   *\n   * @param value\n   * @returns {*}\n   * @private\n   */\n\n\n  _serializeAnyType(value) {\n    if (isObject(value)) {\n      return {\n        type: 'object',\n        value: this._serializeObject(value)\n      };\n    }\n\n    return {\n      type: typeof value,\n      value\n    };\n  }\n  /**\n   * Register a listener for data changes at the current ref's location.\n   * The primary method of reading data from a Database.\n   *\n   * Listeners can be unbound using {@link off}.\n   *\n   * Event Types:\n   *\n   * - value: {@link callback}.\n   * - child_added: {@link callback}\n   * - child_removed: {@link callback}\n   * - child_changed: {@link callback}\n   * - child_moved: {@link callback}\n   *\n   * @param {ReferenceEventType} eventType - Type of event to attach a callback for.\n   * @param {ReferenceEventCallback} callback - Function that will be called\n   * when the event occurs with the new data.\n   * @param {cancelCallbackOrContext=} cancelCallbackOrContext - Optional callback that is called\n   * if the event subscription fails. {@link cancelCallbackOrContext}\n   * @param {*=} context - Optional object to bind the callbacks to when calling them.\n   * @returns {ReferenceEventCallback} callback function, unmodified (unbound), for\n   * convenience if you want to pass an inline function to on() and store it later for\n   * removing using off().\n   *\n   * {@link https://firebase.google.com/docs/reference/js/firebase.database.Reference#on}\n   */\n\n\n  on(eventType, callback, cancelCallbackOrContext, context) {\n    if (!eventType) {\n      throw new Error('Query.on failed: Function called with 0 arguments. Expects at least 2.');\n    }\n\n    if (!isString(eventType) || !ReferenceEventTypes[eventType]) {\n      throw new Error(`Query.on failed: First argument must be a valid string event type: \"${Object.keys(ReferenceEventTypes).join(', ')}\"`);\n    }\n\n    if (!callback) {\n      throw new Error('Query.on failed: Function called with 1 argument. Expects at least 2.');\n    }\n\n    if (!isFunction(callback)) {\n      throw new Error('Query.on failed: Second argument must be a valid function.');\n    }\n\n    if (cancelCallbackOrContext && !isFunction(cancelCallbackOrContext) && !isObject(context) && !isObject(cancelCallbackOrContext)) {\n      throw new Error('Query.on failed: Function called with 3 arguments, but third optional argument `cancelCallbackOrContext` was not a function.');\n    }\n\n    if (cancelCallbackOrContext && !isFunction(cancelCallbackOrContext) && context) {\n      throw new Error('Query.on failed: Function called with 4 arguments, but third optional argument `cancelCallbackOrContext` was not a function.');\n    }\n\n    const eventRegistrationKey = this._getRegistrationKey(eventType);\n\n    const registrationCancellationKey = `${eventRegistrationKey}$cancelled`;\n\n    const _context = cancelCallbackOrContext && !isFunction(cancelCallbackOrContext) ? cancelCallbackOrContext : context;\n\n    const registrationObj = {\n      eventType,\n      ref: this,\n      path: this.path,\n      key: this._getRefKey(),\n      appName: this._database.app.name,\n      dbURL: this._database.databaseUrl,\n      eventRegistrationKey\n    };\n    SyncTree.addRegistration({ ...registrationObj,\n      listener: _context ? callback.bind(_context) : callback\n    });\n\n    if (cancelCallbackOrContext && isFunction(cancelCallbackOrContext)) {\n      // cancellations have their own separate registration\n      // as these are one off events, and they're not guaranteed\n      // to occur either, only happens on failure to register on native\n      SyncTree.addRegistration({\n        ref: this,\n        once: true,\n        path: this.path,\n        key: this._getRefKey(),\n        appName: this._database.app.name,\n        dbURL: this._database.databaseUrl,\n        eventType: `${eventType}$cancelled`,\n        eventRegistrationKey: registrationCancellationKey,\n        listener: _context ? cancelCallbackOrContext.bind(_context) : cancelCallbackOrContext\n      });\n    } // initialise the native listener if not already listening\n\n\n    getNativeModule(this._database).on({\n      eventType,\n      path: this.path,\n      key: this._getRefKey(),\n      appName: this._database.app.name,\n      modifiers: this._query.getModifiers(),\n      hasCancellationCallback: isFunction(cancelCallbackOrContext),\n      registration: {\n        eventRegistrationKey,\n        key: registrationObj.key,\n        registrationCancellationKey\n      }\n    }); // increment number of listeners - just a short way of making\n    // every registration unique per .on() call\n\n    listeners += 1; // return original unbound successCallback for\n    // the purposes of calling .off(eventType, callback) at a later date\n\n    return callback;\n  }\n  /**\n   * Detaches a callback previously attached with on().\n   *\n   * Detach a callback previously attached with on(). Note that if on() was called\n   * multiple times with the same eventType and callback, the callback will be called\n   * multiple times for each event, and off() must be called multiple times to\n   * remove the callback. Calling off() on a parent listener will not automatically\n   * remove listeners registered on child nodes, off() must also be called on any\n   * child listeners to remove the callback.\n   *\n   *  If a callback is not specified, all callbacks for the specified eventType will be removed.\n   * Similarly, if no eventType or callback is specified, all callbacks for the Reference will be removed.\n   * @param eventType\n   * @param originalCallback\n   */\n\n\n  off(eventType = '', originalCallback) {\n    if (!arguments.length) {\n      // Firebase Docs:\n      //     if no eventType or callback is specified, all callbacks for the Reference will be removed.\n      return SyncTree.removeListenersForRegistrations(SyncTree.getRegistrationsByPath(this.path));\n    }\n    /*\n     * VALIDATE ARGS\n     */\n\n\n    if (eventType && (!isString(eventType) || !ReferenceEventTypes[eventType])) {\n      throw new Error(`Query.off failed: First argument must be a valid string event type: \"${Object.keys(ReferenceEventTypes).join(', ')}\"`);\n    }\n\n    if (originalCallback && !isFunction(originalCallback)) {\n      throw new Error('Query.off failed: Function called with 2 arguments, but second optional argument was not a function.');\n    } // Firebase Docs:\n    //     Note that if on() was called\n    //     multiple times with the same eventType and callback, the callback will be called\n    //     multiple times for each event, and off() must be called multiple times to\n    //     remove the callback.\n    // Remove only a single registration\n\n\n    if (eventType && originalCallback) {\n      const registration = SyncTree.getOneByPathEventListener(this.path, eventType, originalCallback);\n      if (!registration) return []; // remove the paired cancellation registration if any exist\n\n      SyncTree.removeListenersForRegistrations([`${registration}$cancelled`]); // remove only the first registration to match firebase web sdk\n      // call multiple times to remove multiple registrations\n\n      return SyncTree.removeListenerRegistrations(originalCallback, [registration]);\n    } // Firebase Docs:\n    //     If a callback is not specified, all callbacks for the specified eventType will be removed.\n\n\n    const registrations = SyncTree.getRegistrationsByPathEvent(this.path, eventType);\n    SyncTree.removeListenersForRegistrations(SyncTree.getRegistrationsByPathEvent(this.path, `${eventType}$cancelled`));\n    return SyncTree.removeListenersForRegistrations(registrations);\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}