{"ast":null,"code":"/**\n * \n * Analytics representation wrapper\n */\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nimport { isString, isObject } from '../../utils';\nconst AlphaNumericUnderscore = /^[a-zA-Z0-9_]+$/;\nconst ReservedEventNames = ['app_clear_data', 'app_uninstall', 'app_update', 'error', 'first_open', 'in_app_purchase', 'notification_dismiss', 'notification_foreground', 'notification_open', 'notification_receive', 'os_update', 'session_start', 'user_engagement'];\nexport const MODULE_NAME = 'RNFirebaseAnalytics';\nexport const NAMESPACE = 'analytics';\nexport default class Analytics extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n  }\n  /**\n   * Logs an app event.\n   * @param  {string} name\n   * @param params\n   * @return {Promise}\n   */\n\n  logEvent(name, params = {}) {\n    if (!isString(name)) {\n      throw new Error(`analytics.logEvent(): First argument 'name' is required and must be a string value.`);\n    }\n    if (typeof params !== 'undefined' && !isObject(params)) {\n      throw new Error(`analytics.logEvent(): Second optional argument 'params' must be an object if provided.`);\n    } // check name is not a reserved event name\n\n    if (ReservedEventNames.includes(name)) {\n      throw new Error(`analytics.logEvent(): event name '${name}' is a reserved event name and can not be used.`);\n    } // name format validation\n\n    if (!AlphaNumericUnderscore.test(name)) {\n      throw new Error(`analytics.logEvent(): Event name '${name}' is invalid. Names should contain 1 to 32 alphanumeric characters or underscores.`);\n    } // maximum number of allowed params check\n\n    if (params && Object.keys(params).length > 25) throw new Error('analytics.logEvent(): Maximum number of parameters exceeded (25).'); // Parameter names can be up to 24 characters long and must start with an alphabetic character\n    // and contain only alphanumeric characters and underscores. Only String, long and double param\n    // types are supported. String parameter values can be up to 36 characters long. The \"firebase_\"\n    // prefix is reserved and should not be used for parameter names.\n\n    getNativeModule(this).logEvent(name, params);\n  }\n  /**\n   * Sets whether analytics collection is enabled for this app on this device.\n   * @param enabled\n   */\n\n  setAnalyticsCollectionEnabled(enabled) {\n    getNativeModule(this).setAnalyticsCollectionEnabled(enabled);\n  }\n  /**\n   * Sets the current screen name, which specifies the current visual context in your app.\n   * @param screenName\n   * @param screenClassOverride\n   */\n\n  setCurrentScreen(screenName, screenClassOverride) {\n    getNativeModule(this).setCurrentScreen(screenName, screenClassOverride);\n  }\n  /**\n   * Sets the minimum engagement time required before starting a session. The default value is 10000 (10 seconds).\n   * @param milliseconds\n   */\n\n  setMinimumSessionDuration(milliseconds = 10000) {\n    getNativeModule(this).setMinimumSessionDuration(milliseconds);\n  }\n  /**\n   * Sets the duration of inactivity that terminates the current session. The default value is 1800000 (30 minutes).\n   * @param milliseconds\n   */\n\n  setSessionTimeoutDuration(milliseconds = 1800000) {\n    getNativeModule(this).setSessionTimeoutDuration(milliseconds);\n  }\n  /**\n   * Sets the user ID property.\n   * @param id\n   */\n\n  setUserId(id) {\n    if (id !== null && !isString(id)) {\n      throw new Error('analytics.setUserId(): The supplied userId must be a string value or null.');\n    }\n    getNativeModule(this).setUserId(id);\n  }\n  /**\n   * Sets a user property to a given value.\n   * @param name\n   * @param value\n   */\n\n  setUserProperty(name, value) {\n    if (value !== null && !isString(value)) {\n      throw new Error('analytics.setUserProperty(): The supplied property must be a string value or null.');\n    }\n    getNativeModule(this).setUserProperty(name, value);\n  }\n  /**\n   * Sets multiple user properties to the supplied values.\n   * @RNFirebaseSpecific\n   * @param object\n   */\n\n  setUserProperties(object) {\n    Object.keys(object).forEach(property => {\n      const value = object[property];\n      if (value !== null && !isString(value)) {\n        throw new Error(`analytics.setUserProperties(): The property with name '${property}' must be a string value or null.`);\n      }\n      getNativeModule(this).setUserProperty(property, object[property]);\n    });\n  }\n}\nexport const statics = {};","map":{"version":3,"names":["ModuleBase","getNativeModule","isString","isObject","AlphaNumericUnderscore","ReservedEventNames","MODULE_NAME","NAMESPACE","Analytics","constructor","app","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","logEvent","name","params","Error","includes","test","Object","keys","length","setAnalyticsCollectionEnabled","enabled","setCurrentScreen","screenName","screenClassOverride","setMinimumSessionDuration","milliseconds","setSessionTimeoutDuration","setUserId","id","setUserProperty","value","setUserProperties","object","forEach","property","statics"],"sources":["/Users/sharusan/MeetMyCar/myapp/node_modules/react-native-firebase/dist/modules/analytics/index.js"],"sourcesContent":["/**\n * \n * Analytics representation wrapper\n */\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nimport { isString, isObject } from '../../utils';\nconst AlphaNumericUnderscore = /^[a-zA-Z0-9_]+$/;\nconst ReservedEventNames = ['app_clear_data', 'app_uninstall', 'app_update', 'error', 'first_open', 'in_app_purchase', 'notification_dismiss', 'notification_foreground', 'notification_open', 'notification_receive', 'os_update', 'session_start', 'user_engagement'];\nexport const MODULE_NAME = 'RNFirebaseAnalytics';\nexport const NAMESPACE = 'analytics';\nexport default class Analytics extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n  }\n  /**\n   * Logs an app event.\n   * @param  {string} name\n   * @param params\n   * @return {Promise}\n   */\n\n\n  logEvent(name, params = {}) {\n    if (!isString(name)) {\n      throw new Error(`analytics.logEvent(): First argument 'name' is required and must be a string value.`);\n    }\n\n    if (typeof params !== 'undefined' && !isObject(params)) {\n      throw new Error(`analytics.logEvent(): Second optional argument 'params' must be an object if provided.`);\n    } // check name is not a reserved event name\n\n\n    if (ReservedEventNames.includes(name)) {\n      throw new Error(`analytics.logEvent(): event name '${name}' is a reserved event name and can not be used.`);\n    } // name format validation\n\n\n    if (!AlphaNumericUnderscore.test(name)) {\n      throw new Error(`analytics.logEvent(): Event name '${name}' is invalid. Names should contain 1 to 32 alphanumeric characters or underscores.`);\n    } // maximum number of allowed params check\n\n\n    if (params && Object.keys(params).length > 25) throw new Error('analytics.logEvent(): Maximum number of parameters exceeded (25).'); // Parameter names can be up to 24 characters long and must start with an alphabetic character\n    // and contain only alphanumeric characters and underscores. Only String, long and double param\n    // types are supported. String parameter values can be up to 36 characters long. The \"firebase_\"\n    // prefix is reserved and should not be used for parameter names.\n\n    getNativeModule(this).logEvent(name, params);\n  }\n  /**\n   * Sets whether analytics collection is enabled for this app on this device.\n   * @param enabled\n   */\n\n\n  setAnalyticsCollectionEnabled(enabled) {\n    getNativeModule(this).setAnalyticsCollectionEnabled(enabled);\n  }\n  /**\n   * Sets the current screen name, which specifies the current visual context in your app.\n   * @param screenName\n   * @param screenClassOverride\n   */\n\n\n  setCurrentScreen(screenName, screenClassOverride) {\n    getNativeModule(this).setCurrentScreen(screenName, screenClassOverride);\n  }\n  /**\n   * Sets the minimum engagement time required before starting a session. The default value is 10000 (10 seconds).\n   * @param milliseconds\n   */\n\n\n  setMinimumSessionDuration(milliseconds = 10000) {\n    getNativeModule(this).setMinimumSessionDuration(milliseconds);\n  }\n  /**\n   * Sets the duration of inactivity that terminates the current session. The default value is 1800000 (30 minutes).\n   * @param milliseconds\n   */\n\n\n  setSessionTimeoutDuration(milliseconds = 1800000) {\n    getNativeModule(this).setSessionTimeoutDuration(milliseconds);\n  }\n  /**\n   * Sets the user ID property.\n   * @param id\n   */\n\n\n  setUserId(id) {\n    if (id !== null && !isString(id)) {\n      throw new Error('analytics.setUserId(): The supplied userId must be a string value or null.');\n    }\n\n    getNativeModule(this).setUserId(id);\n  }\n  /**\n   * Sets a user property to a given value.\n   * @param name\n   * @param value\n   */\n\n\n  setUserProperty(name, value) {\n    if (value !== null && !isString(value)) {\n      throw new Error('analytics.setUserProperty(): The supplied property must be a string value or null.');\n    }\n\n    getNativeModule(this).setUserProperty(name, value);\n  }\n  /**\n   * Sets multiple user properties to the supplied values.\n   * @RNFirebaseSpecific\n   * @param object\n   */\n\n\n  setUserProperties(object) {\n    Object.keys(object).forEach(property => {\n      const value = object[property];\n\n      if (value !== null && !isString(value)) {\n        throw new Error(`analytics.setUserProperties(): The property with name '${property}' must be a string value or null.`);\n      }\n\n      getNativeModule(this).setUserProperty(property, object[property]);\n    });\n  }\n\n}\nexport const statics = {};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}