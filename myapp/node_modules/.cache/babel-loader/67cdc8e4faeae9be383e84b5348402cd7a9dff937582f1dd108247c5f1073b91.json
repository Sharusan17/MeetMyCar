{"ast":null,"code":"/**\n * \n * StorageReference representation wrapper\n */\nimport ReferenceBase from '../../utils/ReferenceBase';\nimport StorageTask, { UPLOAD_TASK, DOWNLOAD_TASK } from './task';\nimport { isIOS } from '../../utils';\nimport { getNativeModule } from '../../utils/native';\n\n/**\n * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference\n */\nexport default class StorageReference extends ReferenceBase {\n  constructor(storage, path) {\n    super(path);\n    this._storage = storage;\n  }\n  get fullPath() {\n    return this.path;\n  }\n  toString() {\n    return `gs://${this._storage.app.options.storageBucket}${this.path}`;\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#child\n   * @param path\n   * @returns {StorageReference}\n   */\n\n  child(path) {\n    return new StorageReference(this._storage, `${this.path}/${path}`);\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#delete\n   * @returns {Promise.<T>|*}\n   */\n\n  delete() {\n    return getNativeModule(this._storage).delete(this.path);\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#getDownloadURL\n   * @returns {Promise.<T>|*}\n   */\n\n  getDownloadURL() {\n    return getNativeModule(this._storage).getDownloadURL(this.path);\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#getMetadata\n   * @returns {Promise.<T>|*}\n   */\n\n  getMetadata() {\n    return getNativeModule(this._storage).getMetadata(this.path);\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#updateMetadata\n   * @param metadata\n   * @returns {Promise.<T>|*}\n   */\n\n  updateMetadata(metadata = {}) {\n    return getNativeModule(this._storage).updateMetadata(this.path, metadata);\n  }\n  /**\n   * Downloads a reference to the device\n   * @param {String} filePath Where to store the file\n   * @return {Promise}\n   */\n\n  downloadFile(filePath) {\n    return new StorageTask(DOWNLOAD_TASK, getNativeModule(this._storage).downloadFile(this.path, filePath), this);\n  }\n  /**\n   * Alias to putFile\n   * @returns {StorageReference.putFile}\n   */\n\n  get put() {\n    return this.putFile;\n  }\n  /**\n   * Upload a file path\n   * @param  {string} filePath The local path of the file\n   * @param  {object} metadata An object containing metadata\n   * @return {Promise}\n   */\n\n  putFile(filePath, metadata = {}) {\n    let _filePath = isIOS ? filePath.replace('file://', '') : filePath;\n    if (_filePath.includes('%')) _filePath = decodeURIComponent(_filePath);\n    return new StorageTask(UPLOAD_TASK, getNativeModule(this._storage).putFile(this.path, _filePath, metadata), this);\n  }\n}","map":{"version":3,"names":["ReferenceBase","StorageTask","UPLOAD_TASK","DOWNLOAD_TASK","isIOS","getNativeModule","StorageReference","constructor","storage","path","_storage","fullPath","toString","app","options","storageBucket","child","delete","getDownloadURL","getMetadata","updateMetadata","metadata","downloadFile","filePath","put","putFile","_filePath","replace","includes","decodeURIComponent"],"sources":["/Users/sharusan/MeetMyCar/myapp/node_modules/react-native-firebase/dist/modules/storage/reference.js"],"sourcesContent":["/**\n * \n * StorageReference representation wrapper\n */\nimport ReferenceBase from '../../utils/ReferenceBase';\nimport StorageTask, { UPLOAD_TASK, DOWNLOAD_TASK } from './task';\nimport { isIOS } from '../../utils';\nimport { getNativeModule } from '../../utils/native';\n\n/**\n * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference\n */\nexport default class StorageReference extends ReferenceBase {\n  constructor(storage, path) {\n    super(path);\n    this._storage = storage;\n  }\n\n  get fullPath() {\n    return this.path;\n  }\n\n  toString() {\n    return `gs://${this._storage.app.options.storageBucket}${this.path}`;\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#child\n   * @param path\n   * @returns {StorageReference}\n   */\n\n\n  child(path) {\n    return new StorageReference(this._storage, `${this.path}/${path}`);\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#delete\n   * @returns {Promise.<T>|*}\n   */\n\n\n  delete() {\n    return getNativeModule(this._storage).delete(this.path);\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#getDownloadURL\n   * @returns {Promise.<T>|*}\n   */\n\n\n  getDownloadURL() {\n    return getNativeModule(this._storage).getDownloadURL(this.path);\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#getMetadata\n   * @returns {Promise.<T>|*}\n   */\n\n\n  getMetadata() {\n    return getNativeModule(this._storage).getMetadata(this.path);\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#updateMetadata\n   * @param metadata\n   * @returns {Promise.<T>|*}\n   */\n\n\n  updateMetadata(metadata = {}) {\n    return getNativeModule(this._storage).updateMetadata(this.path, metadata);\n  }\n  /**\n   * Downloads a reference to the device\n   * @param {String} filePath Where to store the file\n   * @return {Promise}\n   */\n\n\n  downloadFile(filePath) {\n    return new StorageTask(DOWNLOAD_TASK, getNativeModule(this._storage).downloadFile(this.path, filePath), this);\n  }\n  /**\n   * Alias to putFile\n   * @returns {StorageReference.putFile}\n   */\n\n\n  get put() {\n    return this.putFile;\n  }\n  /**\n   * Upload a file path\n   * @param  {string} filePath The local path of the file\n   * @param  {object} metadata An object containing metadata\n   * @return {Promise}\n   */\n\n\n  putFile(filePath, metadata = {}) {\n    let _filePath = isIOS ? filePath.replace('file://', '') : filePath;\n\n    if (_filePath.includes('%')) _filePath = decodeURIComponent(_filePath);\n    return new StorageTask(UPLOAD_TASK, getNativeModule(this._storage).putFile(this.path, _filePath, metadata), this);\n  }\n\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAOA,aAAa,MAAM,2BAA2B;AACrD,OAAOC,WAAW,IAAIC,WAAW,EAAEC,aAAa,QAAQ,QAAQ;AAChE,SAASC,KAAK,QAAQ,aAAa;AACnC,SAASC,eAAe,QAAQ,oBAAoB;;AAEpD;AACA;AACA;AACA,eAAe,MAAMC,gBAAgB,SAASN,aAAa,CAAC;EAC1DO,WAAWA,CAACC,OAAO,EAAEC,IAAI,EAAE;IACzB,KAAK,CAACA,IAAI,CAAC;IACX,IAAI,CAACC,QAAQ,GAAGF,OAAO;EACzB;EAEA,IAAIG,QAAQA,CAAA,EAAG;IACb,OAAO,IAAI,CAACF,IAAI;EAClB;EAEAG,QAAQA,CAAA,EAAG;IACT,OAAQ,QAAO,IAAI,CAACF,QAAQ,CAACG,GAAG,CAACC,OAAO,CAACC,aAAc,GAAE,IAAI,CAACN,IAAK,EAAC;EACtE;EACA;AACF;AACA;AACA;AACA;;EAGEO,KAAKA,CAACP,IAAI,EAAE;IACV,OAAO,IAAIH,gBAAgB,CAAC,IAAI,CAACI,QAAQ,EAAG,GAAE,IAAI,CAACD,IAAK,IAAGA,IAAK,EAAC,CAAC;EACpE;EACA;AACF;AACA;AACA;;EAGEQ,MAAMA,CAAA,EAAG;IACP,OAAOZ,eAAe,CAAC,IAAI,CAACK,QAAQ,CAAC,CAACO,MAAM,CAAC,IAAI,CAACR,IAAI,CAAC;EACzD;EACA;AACF;AACA;AACA;;EAGES,cAAcA,CAAA,EAAG;IACf,OAAOb,eAAe,CAAC,IAAI,CAACK,QAAQ,CAAC,CAACQ,cAAc,CAAC,IAAI,CAACT,IAAI,CAAC;EACjE;EACA;AACF;AACA;AACA;;EAGEU,WAAWA,CAAA,EAAG;IACZ,OAAOd,eAAe,CAAC,IAAI,CAACK,QAAQ,CAAC,CAACS,WAAW,CAAC,IAAI,CAACV,IAAI,CAAC;EAC9D;EACA;AACF;AACA;AACA;AACA;;EAGEW,cAAcA,CAACC,QAAQ,GAAG,CAAC,CAAC,EAAE;IAC5B,OAAOhB,eAAe,CAAC,IAAI,CAACK,QAAQ,CAAC,CAACU,cAAc,CAAC,IAAI,CAACX,IAAI,EAAEY,QAAQ,CAAC;EAC3E;EACA;AACF;AACA;AACA;AACA;;EAGEC,YAAYA,CAACC,QAAQ,EAAE;IACrB,OAAO,IAAItB,WAAW,CAACE,aAAa,EAAEE,eAAe,CAAC,IAAI,CAACK,QAAQ,CAAC,CAACY,YAAY,CAAC,IAAI,CAACb,IAAI,EAAEc,QAAQ,CAAC,EAAE,IAAI,CAAC;EAC/G;EACA;AACF;AACA;AACA;;EAGE,IAAIC,GAAGA,CAAA,EAAG;IACR,OAAO,IAAI,CAACC,OAAO;EACrB;EACA;AACF;AACA;AACA;AACA;AACA;;EAGEA,OAAOA,CAACF,QAAQ,EAAEF,QAAQ,GAAG,CAAC,CAAC,EAAE;IAC/B,IAAIK,SAAS,GAAGtB,KAAK,GAAGmB,QAAQ,CAACI,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,GAAGJ,QAAQ;IAElE,IAAIG,SAAS,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAEF,SAAS,GAAGG,kBAAkB,CAACH,SAAS,CAAC;IACtE,OAAO,IAAIzB,WAAW,CAACC,WAAW,EAAEG,eAAe,CAAC,IAAI,CAACK,QAAQ,CAAC,CAACe,OAAO,CAAC,IAAI,CAAChB,IAAI,EAAEiB,SAAS,EAAEL,QAAQ,CAAC,EAAE,IAAI,CAAC;EACnH;AAEF"},"metadata":{},"sourceType":"module","externalDependencies":[]}