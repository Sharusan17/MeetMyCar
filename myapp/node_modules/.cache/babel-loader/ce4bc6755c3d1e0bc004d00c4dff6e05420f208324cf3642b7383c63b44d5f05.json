{"ast":null,"code":"/**\n * \n * Auth representation wrapper\n */\nimport User from './User';\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getAppEventName, SharedEventEmitter } from '../../utils/events';\nimport { isAndroid, isBoolean } from '../../utils';\nimport { getLogger } from '../../utils/log';\nimport { getNativeModule } from '../../utils/native';\nimport INTERNALS from '../../utils/internals';\nimport ConfirmationResult from './phone/ConfirmationResult';\nimport PhoneAuthListener from './phone/PhoneAuthListener';\nimport AuthSettings from './AuthSettings'; // providers\n\nimport EmailAuthProvider from './providers/EmailAuthProvider';\nimport PhoneAuthProvider from './providers/PhoneAuthProvider';\nimport GoogleAuthProvider from './providers/GoogleAuthProvider';\nimport GithubAuthProvider from './providers/GithubAuthProvider';\nimport OAuthProvider from './providers/OAuthProvider';\nimport TwitterAuthProvider from './providers/TwitterAuthProvider';\nimport FacebookAuthProvider from './providers/FacebookAuthProvider';\nimport AppleAuthProvider from './providers/AppleAuthProvider';\nconst NATIVE_EVENTS = ['auth_state_changed', 'auth_id_token_changed', 'phone_auth_state_changed'];\nexport const MODULE_NAME = 'RNFirebaseAuth';\nexport const NAMESPACE = 'auth';\nexport default class Auth extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: true,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n    const NativeModule = getNativeModule(this);\n    this._user = null;\n    this._settings = null;\n    this._authResult = false;\n    this._languageCode = NativeModule.APP_LANGUAGE[app._name] || NativeModule.APP_LANGUAGE['[DEFAULT]'];\n    if (NativeModule.APP_USER[app._name]) {\n      this._setUser(NativeModule.APP_USER[app._name]);\n    }\n    SharedEventEmitter.addListener(\n    // sub to internal native event - this fans out to\n    // public event name: onAuthStateChanged\n    getAppEventName(this, 'auth_state_changed'), state => {\n      this._setUser(state.user);\n      SharedEventEmitter.emit(getAppEventName(this, 'onAuthStateChanged'), this._user);\n    });\n    SharedEventEmitter.addListener(\n    // sub to internal native event - this fans out to\n    // public events based on event.type\n    getAppEventName(this, 'phone_auth_state_changed'), event => {\n      const eventKey = `phone:auth:${event.requestKey}:${event.type}`;\n      SharedEventEmitter.emit(eventKey, event.state);\n    });\n    SharedEventEmitter.addListener(\n    // sub to internal native event - this fans out to\n    // public event name: onIdTokenChanged\n    getAppEventName(this, 'auth_id_token_changed'), auth => {\n      this._setUser(auth.user);\n      SharedEventEmitter.emit(getAppEventName(this, 'onIdTokenChanged'), this._user);\n    });\n    NativeModule.addAuthStateListener();\n    NativeModule.addIdTokenListener();\n  }\n  _setUser(user) {\n    this._user = user ? new User(this, user) : null;\n    this._authResult = true;\n    SharedEventEmitter.emit(getAppEventName(this, 'onUserChanged'), this._user);\n    return this._user;\n  }\n  _setUserCredential(userCredential) {\n    const user = new User(this, userCredential.user);\n    this._user = user;\n    this._authResult = true;\n    SharedEventEmitter.emit(getAppEventName(this, 'onUserChanged'), this._user);\n    return {\n      additionalUserInfo: userCredential.additionalUserInfo,\n      user\n    };\n  }\n  /*\n   * WEB API\n   */\n\n  /**\n   * Listen for auth changes.\n   * @param listener\n   */\n\n  onAuthStateChanged(listener) {\n    getLogger(this).info('Creating onAuthStateChanged listener');\n    SharedEventEmitter.addListener(getAppEventName(this, 'onAuthStateChanged'), listener);\n    if (this._authResult) listener(this._user || null);\n    return () => {\n      getLogger(this).info('Removing onAuthStateChanged listener');\n      SharedEventEmitter.removeListener(getAppEventName(this, 'onAuthStateChanged'), listener);\n    };\n  }\n  /**\n   * Listen for id token changes.\n   * @param listener\n   */\n\n  onIdTokenChanged(listener) {\n    getLogger(this).info('Creating onIdTokenChanged listener');\n    SharedEventEmitter.addListener(getAppEventName(this, 'onIdTokenChanged'), listener);\n    if (this._authResult) listener(this._user || null);\n    return () => {\n      getLogger(this).info('Removing onIdTokenChanged listener');\n      SharedEventEmitter.removeListener(getAppEventName(this, 'onIdTokenChanged'), listener);\n    };\n  }\n  /**\n   * Listen for user changes.\n   * @param listener\n   */\n\n  onUserChanged(listener) {\n    getLogger(this).info('Creating onUserChanged listener');\n    SharedEventEmitter.addListener(getAppEventName(this, 'onUserChanged'), listener);\n    if (this._authResult) listener(this._user || null);\n    return () => {\n      getLogger(this).info('Removing onUserChanged listener');\n      SharedEventEmitter.removeListener(getAppEventName(this, 'onUserChanged'), listener);\n    };\n  }\n  /**\n   * Sign the current user out\n   * @return {Promise}\n   */\n\n  signOut() {\n    return getNativeModule(this).signOut().then(() => {\n      this._setUser();\n    });\n  }\n  /**\n   * Sign a user in anonymously\n   *\n   * @return {Promise} A promise resolved upon completion\n   */\n\n  signInAnonymously() {\n    return getNativeModule(this).signInAnonymously().then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Sign a user in anonymously\n   *\n   * @deprecated Deprecated signInAnonymouslyAndRetrieveData in favor of signInAnonymously.\n   * @return {Promise} A promise resolved upon completion\n   */\n\n  signInAnonymouslyAndRetrieveData() {\n    console.warn('Deprecated signInAnonymouslyAndRetrieveData in favor of signInAnonymously.');\n    return getNativeModule(this).signInAnonymously().then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Create a user with the email/password functionality\n   *\n   * @param  {string} email    The user's email\n   * @param  {string} password The user's password\n   * @return {Promise}         A promise indicating the completion\n   */\n\n  createUserWithEmailAndPassword(email, password) {\n    return getNativeModule(this).createUserWithEmailAndPassword(email, password).then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Create a user with the email/password functionality\n   *\n   * @deprecated Deprecated createUserAndRetrieveDataWithEmailAndPassword in favor of createUserWithEmailAndPassword.\n   * @param  {string} email    The user's email\n   * @param  {string} password The user's password\n   * @return {Promise}         A promise indicating the completion\n   */\n\n  createUserAndRetrieveDataWithEmailAndPassword(email, password) {\n    console.warn('Deprecated createUserAndRetrieveDataWithEmailAndPassword in favor of createUserWithEmailAndPassword.');\n    return getNativeModule(this).createUserWithEmailAndPassword(email, password).then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Sign a user in with email/password\n   *\n   * @param  {string} email    The user's email\n   * @param  {string} password The user's password\n   * @return {Promise}         A promise that is resolved upon completion\n   */\n\n  signInWithEmailAndPassword(email, password) {\n    return getNativeModule(this).signInWithEmailAndPassword(email, password).then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Sign a user in with email/password\n   *\n   * @deprecated Deprecated signInAndRetrieveDataWithEmailAndPassword in favor of signInWithEmailAndPassword\n   * @param  {string} email    The user's email\n   * @param  {string} password The user's password\n   * @return {Promise}         A promise that is resolved upon completion\n   */\n\n  signInAndRetrieveDataWithEmailAndPassword(email, password) {\n    console.warn('Deprecated signInAndRetrieveDataWithEmailAndPassword in favor of signInWithEmailAndPassword.');\n    return getNativeModule(this).signInWithEmailAndPassword(email, password).then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Sign the user in with a custom auth token\n   *\n   * @param  {string} customToken  A self-signed custom auth token.\n   * @return {Promise}             A promise resolved upon completion\n   */\n\n  signInWithCustomToken(customToken) {\n    return getNativeModule(this).signInWithCustomToken(customToken).then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Sign the user in with a custom auth token\n   *\n   * @deprecated Deprecated signInAndRetrieveDataWithCustomToken in favor of signInWithCustomToken\n   * @param  {string} customToken  A self-signed custom auth token.\n   * @return {Promise}             A promise resolved upon completion\n   */\n\n  signInAndRetrieveDataWithCustomToken(customToken) {\n    console.warn('Deprecated signInAndRetrieveDataWithCustomToken in favor of signInWithCustomToken.');\n    return getNativeModule(this).signInWithCustomToken(customToken).then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Sign the user in with a third-party authentication provider\n   *\n   * @return {Promise}           A promise resolved upon completion\n   */\n\n  signInWithCredential(credential) {\n    return getNativeModule(this).signInWithCredential(credential.providerId, credential.token, credential.secret).then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Sign the user in with a third-party authentication provider\n   *\n   * @deprecated Deprecated signInAndRetrieveDataWithCredential in favor of signInWithCredential.\n   * @return {Promise}           A promise resolved upon completion\n   */\n\n  signInAndRetrieveDataWithCredential(credential) {\n    console.warn('Deprecated signInAndRetrieveDataWithCredential in favor of signInWithCredential.');\n    return getNativeModule(this).signInWithCredential(credential.providerId, credential.token, credential.secret).then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Asynchronously signs in using a phone number.\n   *\n   */\n\n  signInWithPhoneNumber(phoneNumber, forceResend) {\n    if (isAndroid) {\n      return getNativeModule(this).signInWithPhoneNumber(phoneNumber, forceResend || false).then(result => new ConfirmationResult(this, result.verificationId));\n    }\n    return getNativeModule(this).signInWithPhoneNumber(phoneNumber).then(result => new ConfirmationResult(this, result.verificationId));\n  }\n  /**\n   * Returns a PhoneAuthListener to listen to phone verification events,\n   * on the final completion event a PhoneAuthCredential can be generated for\n   * authentication purposes.\n   *\n   * @param phoneNumber\n   * @param autoVerifyTimeoutOrForceResend Android Only\n   * @param forceResend Android Only\n   * @returns {PhoneAuthListener}\n   */\n\n  verifyPhoneNumber(phoneNumber, autoVerifyTimeoutOrForceResend, forceResend) {\n    let _forceResend = forceResend;\n    let _autoVerifyTimeout = 60;\n    if (isBoolean(autoVerifyTimeoutOrForceResend)) {\n      _forceResend = autoVerifyTimeoutOrForceResend;\n    } else {\n      _autoVerifyTimeout = autoVerifyTimeoutOrForceResend;\n    }\n    return new PhoneAuthListener(this, phoneNumber, _autoVerifyTimeout, _forceResend);\n  }\n  /**\n   * Send reset password instructions via email\n   * @param {string} email The email to send password reset instructions\n   * @param actionCodeSettings\n   */\n\n  sendPasswordResetEmail(email, actionCodeSettings) {\n    return getNativeModule(this).sendPasswordResetEmail(email, actionCodeSettings);\n  }\n  /**\n   * Sends a sign-in email link to the user with the specified email\n   * @param {string} email The email account to sign in with.\n   * @param actionCodeSettings\n   */\n\n  sendSignInLinkToEmail(email, actionCodeSettings) {\n    return getNativeModule(this).sendSignInLinkToEmail(email, actionCodeSettings);\n  }\n  /**\n   * Checks if an incoming link is a sign-in with email link.\n   * @param {string} emailLink Sign-in email link.\n   */\n\n  isSignInWithEmailLink(emailLink) {\n    return typeof emailLink === 'string' && (emailLink.includes('mode=signIn') || emailLink.includes('mode%3DsignIn')) && (emailLink.includes('oobCode=') || emailLink.includes('oobCode%3D'));\n  }\n  /**\n   * Asynchronously signs in using an email and sign-in email link.\n   *\n   * @param {string} email The email account to sign in with.\n   * @param {string} emailLink Sign-in email link.\n   * @return {Promise} A promise resolved upon completion\n   */\n\n  signInWithEmailLink(email, emailLink) {\n    return getNativeModule(this).signInWithEmailLink(email, emailLink).then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Completes the password reset process, given a confirmation code and new password.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.auth.Auth#confirmPasswordReset\n   * @param code\n   * @param newPassword\n   * @return {Promise.<Null>}\n   */\n\n  confirmPasswordReset(code, newPassword) {\n    return getNativeModule(this).confirmPasswordReset(code, newPassword);\n  }\n  /**\n   * Applies a verification code sent to the user by email or other out-of-band mechanism.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.auth.Auth#applyActionCode\n   * @param code\n   * @return {Promise.<Null>}\n   */\n\n  applyActionCode(code) {\n    return getNativeModule(this).applyActionCode(code).then(user => {\n      this._setUser(user);\n    });\n  }\n  /**\n   * Checks a verification code sent to the user by email or other out-of-band mechanism.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.auth.Auth#checkActionCode\n   * @param code\n   * @return {Promise.<any>|Promise<ActionCodeInfo>}\n   */\n\n  checkActionCode(code) {\n    return getNativeModule(this).checkActionCode(code);\n  }\n  /**\n   * Returns a list of authentication methods that can be used to sign in a given user (identified by its main email address).\n   * @return {Promise}\n   */\n\n  fetchSignInMethodsForEmail(email) {\n    return getNativeModule(this).fetchSignInMethodsForEmail(email);\n  }\n  verifyPasswordResetCode(code) {\n    return getNativeModule(this).verifyPasswordResetCode(code);\n  }\n  /**\n   * Sets the language for the auth module.\n   *\n   * @param code\n   */\n\n  set languageCode(code) {\n    this._languageCode = code;\n    getNativeModule(this).setLanguageCode(code);\n  }\n  /**\n   * The language for the auth module.\n   *\n   * @return {string}\n   */\n\n  get languageCode() {\n    return this._languageCode;\n  }\n  /**\n   * The current Auth instance's settings. This is used to edit/read configuration\n   * related options like app verification mode for phone authentication.\n   *\n   * @return {AuthSettings}\n   */\n\n  get settings() {\n    if (!this._settings) {\n      // lazy initialize\n      this._settings = new AuthSettings(this);\n    }\n    return this._settings;\n  }\n  /**\n   * Get the currently signed in user\n   * @return {Promise}\n   */\n\n  get currentUser() {\n    return this._user;\n  }\n  /**\n   * KNOWN UNSUPPORTED METHODS\n   */\n\n  getRedirectResult() {\n    throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'getRedirectResult'));\n  }\n  setPersistence() {\n    throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'setPersistence'));\n  }\n  signInWithPopup() {\n    throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'signInWithPopup'));\n  }\n  signInWithRedirect() {\n    throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'signInWithRedirect'));\n  } // firebase issue - https://github.com/invertase/react-native-firebase/pull/655#issuecomment-349904680\n\n  useDeviceLanguage() {\n    throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'useDeviceLanguage'));\n  }\n}\nexport const statics = {\n  EmailAuthProvider,\n  PhoneAuthProvider,\n  GoogleAuthProvider,\n  GithubAuthProvider,\n  TwitterAuthProvider,\n  FacebookAuthProvider,\n  AppleAuthProvider,\n  OAuthProvider,\n  PhoneAuthState: {\n    CODE_SENT: 'sent',\n    AUTO_VERIFY_TIMEOUT: 'timeout',\n    AUTO_VERIFIED: 'verified',\n    ERROR: 'error'\n  }\n};","map":{"version":3,"names":["User","ModuleBase","getAppEventName","SharedEventEmitter","isAndroid","isBoolean","getLogger","getNativeModule","INTERNALS","ConfirmationResult","PhoneAuthListener","AuthSettings","EmailAuthProvider","PhoneAuthProvider","GoogleAuthProvider","GithubAuthProvider","OAuthProvider","TwitterAuthProvider","FacebookAuthProvider","AppleAuthProvider","NATIVE_EVENTS","MODULE_NAME","NAMESPACE","Auth","constructor","app","events","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","NativeModule","_user","_settings","_authResult","_languageCode","APP_LANGUAGE","_name","APP_USER","_setUser","addListener","state","user","emit","event","eventKey","requestKey","type","auth","addAuthStateListener","addIdTokenListener","_setUserCredential","userCredential","additionalUserInfo","onAuthStateChanged","listener","info","removeListener","onIdTokenChanged","onUserChanged","signOut","then","signInAnonymously","signInAnonymouslyAndRetrieveData","console","warn","createUserWithEmailAndPassword","email","password","createUserAndRetrieveDataWithEmailAndPassword","signInWithEmailAndPassword","signInAndRetrieveDataWithEmailAndPassword","signInWithCustomToken","customToken","signInAndRetrieveDataWithCustomToken","signInWithCredential","credential","providerId","token","secret","signInAndRetrieveDataWithCredential","signInWithPhoneNumber","phoneNumber","forceResend","result","verificationId","verifyPhoneNumber","autoVerifyTimeoutOrForceResend","_forceResend","_autoVerifyTimeout","sendPasswordResetEmail","actionCodeSettings","sendSignInLinkToEmail","isSignInWithEmailLink","emailLink","includes","signInWithEmailLink","confirmPasswordReset","code","newPassword","applyActionCode","checkActionCode","fetchSignInMethodsForEmail","verifyPasswordResetCode","languageCode","setLanguageCode","settings","currentUser","getRedirectResult","Error","STRINGS","ERROR_UNSUPPORTED_MODULE_METHOD","setPersistence","signInWithPopup","signInWithRedirect","useDeviceLanguage","statics","PhoneAuthState","CODE_SENT","AUTO_VERIFY_TIMEOUT","AUTO_VERIFIED","ERROR"],"sources":["/Users/sharusan/MeetMyCar/myapp/node_modules/react-native-firebase/dist/modules/auth/index.js"],"sourcesContent":["/**\n * \n * Auth representation wrapper\n */\nimport User from './User';\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getAppEventName, SharedEventEmitter } from '../../utils/events';\nimport { isAndroid, isBoolean } from '../../utils';\nimport { getLogger } from '../../utils/log';\nimport { getNativeModule } from '../../utils/native';\nimport INTERNALS from '../../utils/internals';\nimport ConfirmationResult from './phone/ConfirmationResult';\nimport PhoneAuthListener from './phone/PhoneAuthListener';\nimport AuthSettings from './AuthSettings'; // providers\n\nimport EmailAuthProvider from './providers/EmailAuthProvider';\nimport PhoneAuthProvider from './providers/PhoneAuthProvider';\nimport GoogleAuthProvider from './providers/GoogleAuthProvider';\nimport GithubAuthProvider from './providers/GithubAuthProvider';\nimport OAuthProvider from './providers/OAuthProvider';\nimport TwitterAuthProvider from './providers/TwitterAuthProvider';\nimport FacebookAuthProvider from './providers/FacebookAuthProvider';\nimport AppleAuthProvider from './providers/AppleAuthProvider';\nconst NATIVE_EVENTS = ['auth_state_changed', 'auth_id_token_changed', 'phone_auth_state_changed'];\nexport const MODULE_NAME = 'RNFirebaseAuth';\nexport const NAMESPACE = 'auth';\nexport default class Auth extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: true,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n    const NativeModule = getNativeModule(this);\n    this._user = null;\n    this._settings = null;\n    this._authResult = false;\n    this._languageCode = NativeModule.APP_LANGUAGE[app._name] || NativeModule.APP_LANGUAGE['[DEFAULT]'];\n\n    if (NativeModule.APP_USER[app._name]) {\n      this._setUser(NativeModule.APP_USER[app._name]);\n    }\n\n    SharedEventEmitter.addListener( // sub to internal native event - this fans out to\n    // public event name: onAuthStateChanged\n    getAppEventName(this, 'auth_state_changed'), state => {\n      this._setUser(state.user);\n\n      SharedEventEmitter.emit(getAppEventName(this, 'onAuthStateChanged'), this._user);\n    });\n    SharedEventEmitter.addListener( // sub to internal native event - this fans out to\n    // public events based on event.type\n    getAppEventName(this, 'phone_auth_state_changed'), event => {\n      const eventKey = `phone:auth:${event.requestKey}:${event.type}`;\n      SharedEventEmitter.emit(eventKey, event.state);\n    });\n    SharedEventEmitter.addListener( // sub to internal native event - this fans out to\n    // public event name: onIdTokenChanged\n    getAppEventName(this, 'auth_id_token_changed'), auth => {\n      this._setUser(auth.user);\n\n      SharedEventEmitter.emit(getAppEventName(this, 'onIdTokenChanged'), this._user);\n    });\n    NativeModule.addAuthStateListener();\n    NativeModule.addIdTokenListener();\n  }\n\n  _setUser(user) {\n    this._user = user ? new User(this, user) : null;\n    this._authResult = true;\n    SharedEventEmitter.emit(getAppEventName(this, 'onUserChanged'), this._user);\n    return this._user;\n  }\n\n  _setUserCredential(userCredential) {\n    const user = new User(this, userCredential.user);\n    this._user = user;\n    this._authResult = true;\n    SharedEventEmitter.emit(getAppEventName(this, 'onUserChanged'), this._user);\n    return {\n      additionalUserInfo: userCredential.additionalUserInfo,\n      user\n    };\n  }\n  /*\n   * WEB API\n   */\n\n  /**\n   * Listen for auth changes.\n   * @param listener\n   */\n\n\n  onAuthStateChanged(listener) {\n    getLogger(this).info('Creating onAuthStateChanged listener');\n    SharedEventEmitter.addListener(getAppEventName(this, 'onAuthStateChanged'), listener);\n    if (this._authResult) listener(this._user || null);\n    return () => {\n      getLogger(this).info('Removing onAuthStateChanged listener');\n      SharedEventEmitter.removeListener(getAppEventName(this, 'onAuthStateChanged'), listener);\n    };\n  }\n  /**\n   * Listen for id token changes.\n   * @param listener\n   */\n\n\n  onIdTokenChanged(listener) {\n    getLogger(this).info('Creating onIdTokenChanged listener');\n    SharedEventEmitter.addListener(getAppEventName(this, 'onIdTokenChanged'), listener);\n    if (this._authResult) listener(this._user || null);\n    return () => {\n      getLogger(this).info('Removing onIdTokenChanged listener');\n      SharedEventEmitter.removeListener(getAppEventName(this, 'onIdTokenChanged'), listener);\n    };\n  }\n  /**\n   * Listen for user changes.\n   * @param listener\n   */\n\n\n  onUserChanged(listener) {\n    getLogger(this).info('Creating onUserChanged listener');\n    SharedEventEmitter.addListener(getAppEventName(this, 'onUserChanged'), listener);\n    if (this._authResult) listener(this._user || null);\n    return () => {\n      getLogger(this).info('Removing onUserChanged listener');\n      SharedEventEmitter.removeListener(getAppEventName(this, 'onUserChanged'), listener);\n    };\n  }\n  /**\n   * Sign the current user out\n   * @return {Promise}\n   */\n\n\n  signOut() {\n    return getNativeModule(this).signOut().then(() => {\n      this._setUser();\n    });\n  }\n  /**\n   * Sign a user in anonymously\n   *\n   * @return {Promise} A promise resolved upon completion\n   */\n\n\n  signInAnonymously() {\n    return getNativeModule(this).signInAnonymously().then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Sign a user in anonymously\n   *\n   * @deprecated Deprecated signInAnonymouslyAndRetrieveData in favor of signInAnonymously.\n   * @return {Promise} A promise resolved upon completion\n   */\n\n\n  signInAnonymouslyAndRetrieveData() {\n    console.warn('Deprecated signInAnonymouslyAndRetrieveData in favor of signInAnonymously.');\n    return getNativeModule(this).signInAnonymously().then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Create a user with the email/password functionality\n   *\n   * @param  {string} email    The user's email\n   * @param  {string} password The user's password\n   * @return {Promise}         A promise indicating the completion\n   */\n\n\n  createUserWithEmailAndPassword(email, password) {\n    return getNativeModule(this).createUserWithEmailAndPassword(email, password).then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Create a user with the email/password functionality\n   *\n   * @deprecated Deprecated createUserAndRetrieveDataWithEmailAndPassword in favor of createUserWithEmailAndPassword.\n   * @param  {string} email    The user's email\n   * @param  {string} password The user's password\n   * @return {Promise}         A promise indicating the completion\n   */\n\n\n  createUserAndRetrieveDataWithEmailAndPassword(email, password) {\n    console.warn('Deprecated createUserAndRetrieveDataWithEmailAndPassword in favor of createUserWithEmailAndPassword.');\n    return getNativeModule(this).createUserWithEmailAndPassword(email, password).then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Sign a user in with email/password\n   *\n   * @param  {string} email    The user's email\n   * @param  {string} password The user's password\n   * @return {Promise}         A promise that is resolved upon completion\n   */\n\n\n  signInWithEmailAndPassword(email, password) {\n    return getNativeModule(this).signInWithEmailAndPassword(email, password).then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Sign a user in with email/password\n   *\n   * @deprecated Deprecated signInAndRetrieveDataWithEmailAndPassword in favor of signInWithEmailAndPassword\n   * @param  {string} email    The user's email\n   * @param  {string} password The user's password\n   * @return {Promise}         A promise that is resolved upon completion\n   */\n\n\n  signInAndRetrieveDataWithEmailAndPassword(email, password) {\n    console.warn('Deprecated signInAndRetrieveDataWithEmailAndPassword in favor of signInWithEmailAndPassword.');\n    return getNativeModule(this).signInWithEmailAndPassword(email, password).then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Sign the user in with a custom auth token\n   *\n   * @param  {string} customToken  A self-signed custom auth token.\n   * @return {Promise}             A promise resolved upon completion\n   */\n\n\n  signInWithCustomToken(customToken) {\n    return getNativeModule(this).signInWithCustomToken(customToken).then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Sign the user in with a custom auth token\n   *\n   * @deprecated Deprecated signInAndRetrieveDataWithCustomToken in favor of signInWithCustomToken\n   * @param  {string} customToken  A self-signed custom auth token.\n   * @return {Promise}             A promise resolved upon completion\n   */\n\n\n  signInAndRetrieveDataWithCustomToken(customToken) {\n    console.warn('Deprecated signInAndRetrieveDataWithCustomToken in favor of signInWithCustomToken.');\n    return getNativeModule(this).signInWithCustomToken(customToken).then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Sign the user in with a third-party authentication provider\n   *\n   * @return {Promise}           A promise resolved upon completion\n   */\n\n\n  signInWithCredential(credential) {\n    return getNativeModule(this).signInWithCredential(credential.providerId, credential.token, credential.secret).then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Sign the user in with a third-party authentication provider\n   *\n   * @deprecated Deprecated signInAndRetrieveDataWithCredential in favor of signInWithCredential.\n   * @return {Promise}           A promise resolved upon completion\n   */\n\n\n  signInAndRetrieveDataWithCredential(credential) {\n    console.warn('Deprecated signInAndRetrieveDataWithCredential in favor of signInWithCredential.');\n    return getNativeModule(this).signInWithCredential(credential.providerId, credential.token, credential.secret).then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Asynchronously signs in using a phone number.\n   *\n   */\n\n\n  signInWithPhoneNumber(phoneNumber, forceResend) {\n    if (isAndroid) {\n      return getNativeModule(this).signInWithPhoneNumber(phoneNumber, forceResend || false).then(result => new ConfirmationResult(this, result.verificationId));\n    }\n\n    return getNativeModule(this).signInWithPhoneNumber(phoneNumber).then(result => new ConfirmationResult(this, result.verificationId));\n  }\n  /**\n   * Returns a PhoneAuthListener to listen to phone verification events,\n   * on the final completion event a PhoneAuthCredential can be generated for\n   * authentication purposes.\n   *\n   * @param phoneNumber\n   * @param autoVerifyTimeoutOrForceResend Android Only\n   * @param forceResend Android Only\n   * @returns {PhoneAuthListener}\n   */\n\n\n  verifyPhoneNumber(phoneNumber, autoVerifyTimeoutOrForceResend, forceResend) {\n    let _forceResend = forceResend;\n    let _autoVerifyTimeout = 60;\n\n    if (isBoolean(autoVerifyTimeoutOrForceResend)) {\n      _forceResend = autoVerifyTimeoutOrForceResend;\n    } else {\n      _autoVerifyTimeout = autoVerifyTimeoutOrForceResend;\n    }\n\n    return new PhoneAuthListener(this, phoneNumber, _autoVerifyTimeout, _forceResend);\n  }\n  /**\n   * Send reset password instructions via email\n   * @param {string} email The email to send password reset instructions\n   * @param actionCodeSettings\n   */\n\n\n  sendPasswordResetEmail(email, actionCodeSettings) {\n    return getNativeModule(this).sendPasswordResetEmail(email, actionCodeSettings);\n  }\n  /**\n   * Sends a sign-in email link to the user with the specified email\n   * @param {string} email The email account to sign in with.\n   * @param actionCodeSettings\n   */\n\n\n  sendSignInLinkToEmail(email, actionCodeSettings) {\n    return getNativeModule(this).sendSignInLinkToEmail(email, actionCodeSettings);\n  }\n  /**\n   * Checks if an incoming link is a sign-in with email link.\n   * @param {string} emailLink Sign-in email link.\n   */\n\n\n  isSignInWithEmailLink(emailLink) {\n    return typeof emailLink === 'string' && (emailLink.includes('mode=signIn') || emailLink.includes('mode%3DsignIn')) && (emailLink.includes('oobCode=') || emailLink.includes('oobCode%3D'));\n  }\n  /**\n   * Asynchronously signs in using an email and sign-in email link.\n   *\n   * @param {string} email The email account to sign in with.\n   * @param {string} emailLink Sign-in email link.\n   * @return {Promise} A promise resolved upon completion\n   */\n\n\n  signInWithEmailLink(email, emailLink) {\n    return getNativeModule(this).signInWithEmailLink(email, emailLink).then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Completes the password reset process, given a confirmation code and new password.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.auth.Auth#confirmPasswordReset\n   * @param code\n   * @param newPassword\n   * @return {Promise.<Null>}\n   */\n\n\n  confirmPasswordReset(code, newPassword) {\n    return getNativeModule(this).confirmPasswordReset(code, newPassword);\n  }\n  /**\n   * Applies a verification code sent to the user by email or other out-of-band mechanism.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.auth.Auth#applyActionCode\n   * @param code\n   * @return {Promise.<Null>}\n   */\n\n\n  applyActionCode(code) {\n    return getNativeModule(this).applyActionCode(code).then(user => {\n      this._setUser(user);\n    });\n  }\n  /**\n   * Checks a verification code sent to the user by email or other out-of-band mechanism.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.auth.Auth#checkActionCode\n   * @param code\n   * @return {Promise.<any>|Promise<ActionCodeInfo>}\n   */\n\n\n  checkActionCode(code) {\n    return getNativeModule(this).checkActionCode(code);\n  }\n  /**\n   * Returns a list of authentication methods that can be used to sign in a given user (identified by its main email address).\n   * @return {Promise}\n   */\n\n\n  fetchSignInMethodsForEmail(email) {\n    return getNativeModule(this).fetchSignInMethodsForEmail(email);\n  }\n\n  verifyPasswordResetCode(code) {\n    return getNativeModule(this).verifyPasswordResetCode(code);\n  }\n  /**\n   * Sets the language for the auth module.\n   *\n   * @param code\n   */\n\n\n  set languageCode(code) {\n    this._languageCode = code;\n    getNativeModule(this).setLanguageCode(code);\n  }\n  /**\n   * The language for the auth module.\n   *\n   * @return {string}\n   */\n\n\n  get languageCode() {\n    return this._languageCode;\n  }\n  /**\n   * The current Auth instance's settings. This is used to edit/read configuration\n   * related options like app verification mode for phone authentication.\n   *\n   * @return {AuthSettings}\n   */\n\n\n  get settings() {\n    if (!this._settings) {\n      // lazy initialize\n      this._settings = new AuthSettings(this);\n    }\n\n    return this._settings;\n  }\n  /**\n   * Get the currently signed in user\n   * @return {Promise}\n   */\n\n\n  get currentUser() {\n    return this._user;\n  }\n  /**\n   * KNOWN UNSUPPORTED METHODS\n   */\n\n\n  getRedirectResult() {\n    throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'getRedirectResult'));\n  }\n\n  setPersistence() {\n    throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'setPersistence'));\n  }\n\n  signInWithPopup() {\n    throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'signInWithPopup'));\n  }\n\n  signInWithRedirect() {\n    throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'signInWithRedirect'));\n  } // firebase issue - https://github.com/invertase/react-native-firebase/pull/655#issuecomment-349904680\n\n\n  useDeviceLanguage() {\n    throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'useDeviceLanguage'));\n  }\n\n}\nexport const statics = {\n  EmailAuthProvider,\n  PhoneAuthProvider,\n  GoogleAuthProvider,\n  GithubAuthProvider,\n  TwitterAuthProvider,\n  FacebookAuthProvider,\n  AppleAuthProvider,\n  OAuthProvider,\n  PhoneAuthState: {\n    CODE_SENT: 'sent',\n    AUTO_VERIFY_TIMEOUT: 'timeout',\n    AUTO_VERIFIED: 'verified',\n    ERROR: 'error'\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}