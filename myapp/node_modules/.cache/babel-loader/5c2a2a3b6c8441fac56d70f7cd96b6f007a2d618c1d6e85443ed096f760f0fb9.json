{"ast":null,"code":"// firebase.js\n\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nlet initialized = false;\nasync function fetchFirebaseConfig() {\n  try {\n    const response = await fetch('http://localhost:3001/firebaseconfig');\n    if (!response.ok) {\n      throw new Error('Failed to fetch Firebase config');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching Firebase config:', error);\n    return null;\n  }\n}\nexport function initializeFirebase() {\n  if (initialized) {\n    return Promise.resolve(); // Firebase already initialized, return resolved promise\n  }\n\n  return new Promise((resolve, reject) => {\n    fetchFirebaseConfig().then(firebaseConfig => {\n      if (firebaseConfig) {\n        // Initialize Firebase with the fetched config\n        firebase.initializeApp(firebaseConfig);\n        initialized = true;\n        resolve();\n      } else {\n        reject(new Error('Failed to fetch Firebase config'));\n      }\n    }).catch(error => {\n      console.error('Error initializing Firebase:', error);\n      reject(error);\n    });\n  });\n}\n\n// Export auth object after Firebase initialization is complete\nexport const auth = firebase.auth();","map":{"version":3,"names":["firebase","initialized","fetchFirebaseConfig","response","fetch","ok","Error","json","error","console","initializeFirebase","Promise","resolve","reject","then","firebaseConfig","initializeApp","catch","auth"],"sources":["/Users/sharusan/MeetMyCar/myapp/src/firebase.js"],"sourcesContent":["// firebase.js\n\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\n\nlet initialized = false;\n\nasync function fetchFirebaseConfig() {\n  try {\n    const response = await fetch('http://localhost:3001/firebaseconfig');\n    if (!response.ok) {\n      throw new Error('Failed to fetch Firebase config');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching Firebase config:', error);\n    return null;\n  }\n}\n\nexport function initializeFirebase() {\n  if (initialized) {\n    return Promise.resolve(); // Firebase already initialized, return resolved promise\n  }\n\n  return new Promise((resolve, reject) => {\n    fetchFirebaseConfig()\n      .then(firebaseConfig => {\n        if (firebaseConfig) {\n          // Initialize Firebase with the fetched config\n          firebase.initializeApp(firebaseConfig);\n          initialized = true;\n          resolve();\n        } else {\n          reject(new Error('Failed to fetch Firebase config'));\n        }\n      })\n      .catch(error => {\n        console.error('Error initializing Firebase:', error);\n        reject(error);\n      });\n  });\n}\n\n// Export auth object after Firebase initialization is complete\nexport const auth = firebase.auth();\n"],"mappings":"AAAA;;AAEA,OAAOA,QAAQ,MAAM,qBAAqB;AAC1C,OAAO,sBAAsB;AAE7B,IAAIC,WAAW,GAAG,KAAK;AAEvB,eAAeC,mBAAmBA,CAAA,EAAG;EACnC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,CAAC;IACpE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;IACpD;IACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,OAAO,IAAI;EACb;AACF;AAEA,OAAO,SAASE,kBAAkBA,CAAA,EAAG;EACnC,IAAIT,WAAW,EAAE;IACf,OAAOU,OAAO,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;EAC5B;;EAEA,OAAO,IAAID,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCX,mBAAmB,CAAC,CAAC,CAClBY,IAAI,CAACC,cAAc,IAAI;MACtB,IAAIA,cAAc,EAAE;QAClB;QACAf,QAAQ,CAACgB,aAAa,CAACD,cAAc,CAAC;QACtCd,WAAW,GAAG,IAAI;QAClBW,OAAO,CAAC,CAAC;MACX,CAAC,MAAM;QACLC,MAAM,CAAC,IAAIP,KAAK,CAAC,iCAAiC,CAAC,CAAC;MACtD;IACF,CAAC,CAAC,CACDW,KAAK,CAACT,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpDK,MAAM,CAACL,KAAK,CAAC;IACf,CAAC,CAAC;EACN,CAAC,CAAC;AACJ;;AAEA;AACA,OAAO,MAAMU,IAAI,GAAGlB,QAAQ,CAACkB,IAAI,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}