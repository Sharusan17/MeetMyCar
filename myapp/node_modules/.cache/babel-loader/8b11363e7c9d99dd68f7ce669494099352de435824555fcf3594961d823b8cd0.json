{"ast":null,"code":"import { Platform } from 'react-native';\nimport { statics } from './';\nimport AdRequest from './AdRequest';\nimport { SharedEventEmitter } from '../../utils/events';\nimport { getNativeModule } from '../../utils/native';\nimport { nativeToJSError } from '../../utils';\nlet subscriptions = [];\nexport default class Interstitial {\n  constructor(admob, adUnit) {\n    // Interstitials on iOS require a new instance each time\n    if (Platform.OS === 'ios') {\n      getNativeModule(admob).clearInterstitial(adUnit);\n    }\n    for (let i = 0, len = subscriptions.length; i < len; i++) {\n      subscriptions[i].remove();\n    }\n    subscriptions = [];\n    this._admob = admob;\n    this.adUnit = adUnit;\n    this.loaded = false;\n    SharedEventEmitter.removeAllListeners(`interstitial_${adUnit}`);\n    SharedEventEmitter.addListener(`interstitial_${adUnit}`, this._onInterstitialEvent);\n  }\n  /**\n   * Handle a JS emit event\n   * @param event\n   * @private\n   */\n\n  _onInterstitialEvent = event => {\n    const eventType = `interstitial:${this.adUnit}:${event.type}`;\n    let emitData = Object.assign({}, event);\n    switch (event.type) {\n      case 'onAdLoaded':\n        this.loaded = true;\n        break;\n      case 'onAdFailedToLoad':\n        emitData = nativeToJSError(event.payload.code, event.payload.message);\n        emitData.type = event.type;\n        break;\n      default:\n    }\n    SharedEventEmitter.emit(eventType, emitData);\n    SharedEventEmitter.emit(`interstitial:${this.adUnit}:*`, emitData);\n  };\n  /**\n   * Load an ad with an instance of AdRequest\n   * @param request\n   * @returns {*}\n   */\n\n  loadAd(request) {\n    let adRequest = request;\n    if (!adRequest || !Object.keys(adRequest)) {\n      adRequest = new AdRequest().addTestDevice().build();\n    }\n    return getNativeModule(this._admob).interstitialLoadAd(this.adUnit, adRequest);\n  }\n  /**\n   * Return a local instance of isLoaded\n   * @returns {boolean}\n   */\n\n  isLoaded() {\n    return this.loaded;\n  }\n  /**\n   * Show the advert - will only show if loaded\n   * @returns {*}\n   */\n\n  show() {\n    if (this.loaded) {\n      getNativeModule(this._admob).interstitialShowAd(this.adUnit);\n    }\n  }\n  /**\n   * Listen to an Ad event\n   * @param eventType\n   * @param listenerCb\n   * @returns {null}\n   */\n\n  on(eventType, listenerCb) {\n    if (!statics.EventTypes[eventType]) {\n      console.warn(`Invalid event type provided, must be one of: ${Object.keys(statics.EventTypes).join(', ')}`);\n      return null;\n    }\n    const sub = SharedEventEmitter.addListener(`interstitial:${this.adUnit}:${eventType}`, listenerCb);\n    subscriptions.push(sub);\n    return sub;\n  }\n}","map":{"version":3,"names":["Platform","statics","AdRequest","SharedEventEmitter","getNativeModule","nativeToJSError","subscriptions","Interstitial","constructor","admob","adUnit","OS","clearInterstitial","i","len","length","remove","_admob","loaded","removeAllListeners","addListener","_onInterstitialEvent","event","eventType","type","emitData","Object","assign","payload","code","message","emit","loadAd","request","adRequest","keys","addTestDevice","build","interstitialLoadAd","isLoaded","show","interstitialShowAd","on","listenerCb","EventTypes","console","warn","join","sub","push"],"sources":["/Users/sharusan/MeetMyCar/myapp/node_modules/react-native-firebase/dist/modules/admob/Interstitial.js"],"sourcesContent":["import { Platform } from 'react-native';\nimport { statics } from './';\nimport AdRequest from './AdRequest';\nimport { SharedEventEmitter } from '../../utils/events';\nimport { getNativeModule } from '../../utils/native';\nimport { nativeToJSError } from '../../utils';\nlet subscriptions = [];\nexport default class Interstitial {\n  constructor(admob, adUnit) {\n    // Interstitials on iOS require a new instance each time\n    if (Platform.OS === 'ios') {\n      getNativeModule(admob).clearInterstitial(adUnit);\n    }\n\n    for (let i = 0, len = subscriptions.length; i < len; i++) {\n      subscriptions[i].remove();\n    }\n\n    subscriptions = [];\n    this._admob = admob;\n    this.adUnit = adUnit;\n    this.loaded = false;\n    SharedEventEmitter.removeAllListeners(`interstitial_${adUnit}`);\n    SharedEventEmitter.addListener(`interstitial_${adUnit}`, this._onInterstitialEvent);\n  }\n  /**\n   * Handle a JS emit event\n   * @param event\n   * @private\n   */\n\n\n  _onInterstitialEvent = event => {\n    const eventType = `interstitial:${this.adUnit}:${event.type}`;\n    let emitData = Object.assign({}, event);\n\n    switch (event.type) {\n      case 'onAdLoaded':\n        this.loaded = true;\n        break;\n\n      case 'onAdFailedToLoad':\n        emitData = nativeToJSError(event.payload.code, event.payload.message);\n        emitData.type = event.type;\n        break;\n\n      default:\n    }\n\n    SharedEventEmitter.emit(eventType, emitData);\n    SharedEventEmitter.emit(`interstitial:${this.adUnit}:*`, emitData);\n  };\n  /**\n   * Load an ad with an instance of AdRequest\n   * @param request\n   * @returns {*}\n   */\n\n  loadAd(request) {\n    let adRequest = request;\n\n    if (!adRequest || !Object.keys(adRequest)) {\n      adRequest = new AdRequest().addTestDevice().build();\n    }\n\n    return getNativeModule(this._admob).interstitialLoadAd(this.adUnit, adRequest);\n  }\n  /**\n   * Return a local instance of isLoaded\n   * @returns {boolean}\n   */\n\n\n  isLoaded() {\n    return this.loaded;\n  }\n  /**\n   * Show the advert - will only show if loaded\n   * @returns {*}\n   */\n\n\n  show() {\n    if (this.loaded) {\n      getNativeModule(this._admob).interstitialShowAd(this.adUnit);\n    }\n  }\n  /**\n   * Listen to an Ad event\n   * @param eventType\n   * @param listenerCb\n   * @returns {null}\n   */\n\n\n  on(eventType, listenerCb) {\n    if (!statics.EventTypes[eventType]) {\n      console.warn(`Invalid event type provided, must be one of: ${Object.keys(statics.EventTypes).join(', ')}`);\n      return null;\n    }\n\n    const sub = SharedEventEmitter.addListener(`interstitial:${this.adUnit}:${eventType}`, listenerCb);\n    subscriptions.push(sub);\n    return sub;\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}