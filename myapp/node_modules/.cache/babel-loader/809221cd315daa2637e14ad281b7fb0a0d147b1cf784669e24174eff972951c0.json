{"ast":null,"code":"/**\n * \n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * ----\n *\n * Some snippets taken from: https://github.com/firebase/firebase-js-sdk/blob/master/packages/firestore/src/api/timestamp.ts\n * and adapted to work for React Native Firebase\n */\n\n/**\n * Timestamp representation wrapper\n */\nexport default class Timestamp {\n  static now() {\n    return Timestamp.fromMillis(Date.now());\n  }\n  static fromDate(date) {\n    return Timestamp.fromMillis(date.getTime());\n  }\n  static fromMillis(milliseconds) {\n    const seconds = Math.floor(milliseconds / 1000);\n    const nanoseconds = (milliseconds - seconds * 1000) * 1e6;\n    return new Timestamp(seconds, nanoseconds);\n  }\n  constructor(seconds, nanoseconds) {\n    if (nanoseconds < 0) {\n      throw new Error(`Timestamp nanoseconds out of range: ${nanoseconds}`);\n    }\n    if (nanoseconds >= 1e9) {\n      throw new Error(`Timestamp nanoseconds out of range: ${nanoseconds}`);\n    } // Midnight at the beginning of 1/1/1 is the earliest Firestore supports.\n\n    if (seconds < -62135596800) {\n      throw new Error(`Timestamp seconds out of range: ${seconds}`);\n    } // This will break in the year 10,000.\n\n    if (seconds >= 253402300800) {\n      throw new Error(`Timestamp seconds out of range: ${seconds}`);\n    }\n    this.seconds = seconds;\n    this.nanoseconds = nanoseconds;\n  }\n  toDate() {\n    return new Date(this.toMillis());\n  }\n  toMillis() {\n    return this.seconds * 1000 + this.nanoseconds / 1e6;\n  }\n  isEqual(other) {\n    return other.seconds === this.seconds && other.nanoseconds === this.nanoseconds;\n  }\n  toString() {\n    return `Timestamp(seconds=${this.seconds}, nanoseconds=${this.nanoseconds})`;\n  }\n}","map":{"version":3,"names":["Timestamp","now","fromMillis","Date","fromDate","date","getTime","milliseconds","seconds","Math","floor","nanoseconds","constructor","Error","toDate","toMillis","isEqual","other","toString"],"sources":["/Users/sharusan/MeetMyCar/myapp/node_modules/react-native-firebase/dist/modules/firestore/Timestamp.js"],"sourcesContent":["/**\n * \n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * ----\n *\n * Some snippets taken from: https://github.com/firebase/firebase-js-sdk/blob/master/packages/firestore/src/api/timestamp.ts\n * and adapted to work for React Native Firebase\n */\n\n/**\n * Timestamp representation wrapper\n */\nexport default class Timestamp {\n  static now() {\n    return Timestamp.fromMillis(Date.now());\n  }\n\n  static fromDate(date) {\n    return Timestamp.fromMillis(date.getTime());\n  }\n\n  static fromMillis(milliseconds) {\n    const seconds = Math.floor(milliseconds / 1000);\n    const nanoseconds = (milliseconds - seconds * 1000) * 1e6;\n    return new Timestamp(seconds, nanoseconds);\n  }\n\n  constructor(seconds, nanoseconds) {\n    if (nanoseconds < 0) {\n      throw new Error(`Timestamp nanoseconds out of range: ${nanoseconds}`);\n    }\n\n    if (nanoseconds >= 1e9) {\n      throw new Error(`Timestamp nanoseconds out of range: ${nanoseconds}`);\n    } // Midnight at the beginning of 1/1/1 is the earliest Firestore supports.\n\n\n    if (seconds < -62135596800) {\n      throw new Error(`Timestamp seconds out of range: ${seconds}`);\n    } // This will break in the year 10,000.\n\n\n    if (seconds >= 253402300800) {\n      throw new Error(`Timestamp seconds out of range: ${seconds}`);\n    }\n\n    this.seconds = seconds;\n    this.nanoseconds = nanoseconds;\n  }\n\n  toDate() {\n    return new Date(this.toMillis());\n  }\n\n  toMillis() {\n    return this.seconds * 1000 + this.nanoseconds / 1e6;\n  }\n\n  isEqual(other) {\n    return other.seconds === this.seconds && other.nanoseconds === this.nanoseconds;\n  }\n\n  toString() {\n    return `Timestamp(seconds=${this.seconds}, nanoseconds=${this.nanoseconds})`;\n  }\n\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAMA,SAAS,CAAC;EAC7B,OAAOC,GAAGA,CAAA,EAAG;IACX,OAAOD,SAAS,CAACE,UAAU,CAACC,IAAI,CAACF,GAAG,CAAC,CAAC,CAAC;EACzC;EAEA,OAAOG,QAAQA,CAACC,IAAI,EAAE;IACpB,OAAOL,SAAS,CAACE,UAAU,CAACG,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;EAC7C;EAEA,OAAOJ,UAAUA,CAACK,YAAY,EAAE;IAC9B,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,YAAY,GAAG,IAAI,CAAC;IAC/C,MAAMI,WAAW,GAAG,CAACJ,YAAY,GAAGC,OAAO,GAAG,IAAI,IAAI,GAAG;IACzD,OAAO,IAAIR,SAAS,CAACQ,OAAO,EAAEG,WAAW,CAAC;EAC5C;EAEAC,WAAWA,CAACJ,OAAO,EAAEG,WAAW,EAAE;IAChC,IAAIA,WAAW,GAAG,CAAC,EAAE;MACnB,MAAM,IAAIE,KAAK,CAAE,uCAAsCF,WAAY,EAAC,CAAC;IACvE;IAEA,IAAIA,WAAW,IAAI,GAAG,EAAE;MACtB,MAAM,IAAIE,KAAK,CAAE,uCAAsCF,WAAY,EAAC,CAAC;IACvE,CAAC,CAAC;;IAGF,IAAIH,OAAO,GAAG,CAAC,WAAW,EAAE;MAC1B,MAAM,IAAIK,KAAK,CAAE,mCAAkCL,OAAQ,EAAC,CAAC;IAC/D,CAAC,CAAC;;IAGF,IAAIA,OAAO,IAAI,YAAY,EAAE;MAC3B,MAAM,IAAIK,KAAK,CAAE,mCAAkCL,OAAQ,EAAC,CAAC;IAC/D;IAEA,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACG,WAAW,GAAGA,WAAW;EAChC;EAEAG,MAAMA,CAAA,EAAG;IACP,OAAO,IAAIX,IAAI,CAAC,IAAI,CAACY,QAAQ,CAAC,CAAC,CAAC;EAClC;EAEAA,QAAQA,CAAA,EAAG;IACT,OAAO,IAAI,CAACP,OAAO,GAAG,IAAI,GAAG,IAAI,CAACG,WAAW,GAAG,GAAG;EACrD;EAEAK,OAAOA,CAACC,KAAK,EAAE;IACb,OAAOA,KAAK,CAACT,OAAO,KAAK,IAAI,CAACA,OAAO,IAAIS,KAAK,CAACN,WAAW,KAAK,IAAI,CAACA,WAAW;EACjF;EAEAO,QAAQA,CAAA,EAAG;IACT,OAAQ,qBAAoB,IAAI,CAACV,OAAQ,iBAAgB,IAAI,CAACG,WAAY,GAAE;EAC9E;AAEF"},"metadata":{},"sourceType":"module","externalDependencies":[]}