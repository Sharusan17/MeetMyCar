{"ast":null,"code":"/**\n * \n * UploadTask representation wrapper\n */\nimport { statics as StorageStatics } from './';\nimport { isFunction } from '../../utils';\nexport const UPLOAD_TASK = 'upload';\nexport const DOWNLOAD_TASK = 'download';\n\n/**\n * @url https://firebase.google.com/docs/reference/js/firebase.storage.UploadTask\n */\nexport default class StorageTask {\n  constructor(type, promise, storageRef) {\n    this.type = type;\n    this.ref = storageRef;\n    this.storage = storageRef._storage;\n    this.path = storageRef.path; // 'proxy' original promise\n\n    this.then = promise.then.bind(promise);\n    this.catch = promise.catch.bind(promise);\n  }\n  /**\n   * Intercepts a native snapshot result object attaches ref / task instances\n   * and calls the original function\n   * @returns {Promise.<T>}\n   * @private\n   */\n\n  _interceptSnapshotEvent(f) {\n    if (!isFunction(f)) return null;\n    return snapshot => {\n      const _snapshot = Object.assign({}, snapshot);\n      _snapshot.task = this;\n      _snapshot.ref = this.ref;\n      return f && f(_snapshot);\n    };\n  }\n  /**\n   * Intercepts a error object form native and converts to a JS Error\n   * @param f\n   * @returns {*}\n   * @private\n   */\n\n  _interceptErrorEvent(f) {\n    if (!isFunction(f)) return null;\n    return error => {\n      const _error = new Error(error.message); // $FlowExpectedError\n\n      _error.code = error.code;\n      return f && f(_error);\n    };\n  }\n  /**\n   *\n   * @param nextOrObserver\n   * @param error\n   * @param complete\n   * @returns {function()}\n   * @private\n   */\n\n  _subscribe(nextOrObserver, error, complete) {\n    let _error;\n    let _next;\n    let _complete;\n    if (typeof nextOrObserver === 'function') {\n      _error = this._interceptErrorEvent(error);\n      _next = this._interceptSnapshotEvent(nextOrObserver);\n      _complete = this._interceptSnapshotEvent(complete);\n    } else if (nextOrObserver) {\n      _error = this._interceptErrorEvent(nextOrObserver.error);\n      _next = this._interceptSnapshotEvent(nextOrObserver.next);\n      _complete = this._interceptSnapshotEvent(nextOrObserver.complete);\n    }\n    if (_next) {\n      this.storage._addListener(this.path, StorageStatics.TaskEvent.STATE_CHANGED, _next);\n    }\n    if (_error) {\n      this.storage._addListener(this.path, `${this.type}_failure`, _error);\n    }\n    if (_complete) {\n      this.storage._addListener(this.path, `${this.type}_success`, _complete);\n    }\n    return () => {\n      if (_next) this.storage._removeListener(this.path, StorageStatics.TaskEvent.STATE_CHANGED, _next);\n      if (_error) this.storage._removeListener(this.path, `${this.type}_failure`, _error);\n      if (_complete) this.storage._removeListener(this.path, `${this.type}_success`, _complete);\n    };\n  }\n  /**\n   *\n   * @param event\n   * @param nextOrObserver\n   * @param error\n   * @param complete\n   * @returns {function()}\n   */\n\n  on(event = StorageStatics.TaskEvent.STATE_CHANGED, nextOrObserver, error, complete) {\n    if (!event) {\n      throw new Error(\"StorageTask.on listener is missing required string argument 'event'.\");\n    }\n    if (event !== StorageStatics.TaskEvent.STATE_CHANGED) {\n      throw new Error(`StorageTask.on event argument must be a string with a value of '${StorageStatics.TaskEvent.STATE_CHANGED}'`);\n    } // if only event provided return the subscriber function\n\n    if (!nextOrObserver && !error && !complete) {\n      return this._subscribe.bind(this);\n    }\n    return this._subscribe(nextOrObserver, error, complete);\n  }\n  pause() {\n    throw new Error('.pause() is not currently supported by react-native-firebase');\n  }\n  resume() {\n    // todo\n    throw new Error('.resume() is not currently supported by react-native-firebase');\n  }\n  cancel() {\n    // todo\n    throw new Error('.cancel() is not currently supported by react-native-firebase');\n  }\n}","map":{"version":3,"names":["statics","StorageStatics","isFunction","UPLOAD_TASK","DOWNLOAD_TASK","StorageTask","constructor","type","promise","storageRef","ref","storage","_storage","path","then","bind","catch","_interceptSnapshotEvent","f","snapshot","_snapshot","Object","assign","task","_interceptErrorEvent","error","_error","Error","message","code","_subscribe","nextOrObserver","complete","_next","_complete","next","_addListener","TaskEvent","STATE_CHANGED","_removeListener","on","event","pause","resume","cancel"],"sources":["/Users/sharusan/MeetMyCar/myapp/node_modules/react-native-firebase/dist/modules/storage/task.js"],"sourcesContent":["/**\n * \n * UploadTask representation wrapper\n */\nimport { statics as StorageStatics } from './';\nimport { isFunction } from '../../utils';\nexport const UPLOAD_TASK = 'upload';\nexport const DOWNLOAD_TASK = 'download';\n\n/**\n * @url https://firebase.google.com/docs/reference/js/firebase.storage.UploadTask\n */\nexport default class StorageTask {\n  constructor(type, promise, storageRef) {\n    this.type = type;\n    this.ref = storageRef;\n    this.storage = storageRef._storage;\n    this.path = storageRef.path; // 'proxy' original promise\n\n    this.then = promise.then.bind(promise);\n    this.catch = promise.catch.bind(promise);\n  }\n  /**\n   * Intercepts a native snapshot result object attaches ref / task instances\n   * and calls the original function\n   * @returns {Promise.<T>}\n   * @private\n   */\n\n\n  _interceptSnapshotEvent(f) {\n    if (!isFunction(f)) return null;\n    return snapshot => {\n      const _snapshot = Object.assign({}, snapshot);\n\n      _snapshot.task = this;\n      _snapshot.ref = this.ref;\n      return f && f(_snapshot);\n    };\n  }\n  /**\n   * Intercepts a error object form native and converts to a JS Error\n   * @param f\n   * @returns {*}\n   * @private\n   */\n\n\n  _interceptErrorEvent(f) {\n    if (!isFunction(f)) return null;\n    return error => {\n      const _error = new Error(error.message); // $FlowExpectedError\n\n\n      _error.code = error.code;\n      return f && f(_error);\n    };\n  }\n  /**\n   *\n   * @param nextOrObserver\n   * @param error\n   * @param complete\n   * @returns {function()}\n   * @private\n   */\n\n\n  _subscribe(nextOrObserver, error, complete) {\n    let _error;\n\n    let _next;\n\n    let _complete;\n\n    if (typeof nextOrObserver === 'function') {\n      _error = this._interceptErrorEvent(error);\n      _next = this._interceptSnapshotEvent(nextOrObserver);\n      _complete = this._interceptSnapshotEvent(complete);\n    } else if (nextOrObserver) {\n      _error = this._interceptErrorEvent(nextOrObserver.error);\n      _next = this._interceptSnapshotEvent(nextOrObserver.next);\n      _complete = this._interceptSnapshotEvent(nextOrObserver.complete);\n    }\n\n    if (_next) {\n      this.storage._addListener(this.path, StorageStatics.TaskEvent.STATE_CHANGED, _next);\n    }\n\n    if (_error) {\n      this.storage._addListener(this.path, `${this.type}_failure`, _error);\n    }\n\n    if (_complete) {\n      this.storage._addListener(this.path, `${this.type}_success`, _complete);\n    }\n\n    return () => {\n      if (_next) this.storage._removeListener(this.path, StorageStatics.TaskEvent.STATE_CHANGED, _next);\n      if (_error) this.storage._removeListener(this.path, `${this.type}_failure`, _error);\n      if (_complete) this.storage._removeListener(this.path, `${this.type}_success`, _complete);\n    };\n  }\n  /**\n   *\n   * @param event\n   * @param nextOrObserver\n   * @param error\n   * @param complete\n   * @returns {function()}\n   */\n\n\n  on(event = StorageStatics.TaskEvent.STATE_CHANGED, nextOrObserver, error, complete) {\n    if (!event) {\n      throw new Error(\"StorageTask.on listener is missing required string argument 'event'.\");\n    }\n\n    if (event !== StorageStatics.TaskEvent.STATE_CHANGED) {\n      throw new Error(`StorageTask.on event argument must be a string with a value of '${StorageStatics.TaskEvent.STATE_CHANGED}'`);\n    } // if only event provided return the subscriber function\n\n\n    if (!nextOrObserver && !error && !complete) {\n      return this._subscribe.bind(this);\n    }\n\n    return this._subscribe(nextOrObserver, error, complete);\n  }\n\n  pause() {\n    throw new Error('.pause() is not currently supported by react-native-firebase');\n  }\n\n  resume() {\n    // todo\n    throw new Error('.resume() is not currently supported by react-native-firebase');\n  }\n\n  cancel() {\n    // todo\n    throw new Error('.cancel() is not currently supported by react-native-firebase');\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}