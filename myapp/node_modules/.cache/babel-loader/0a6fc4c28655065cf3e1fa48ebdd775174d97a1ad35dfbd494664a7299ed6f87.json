{"ast":null,"code":"/**\n * \n * Dynamic Links representation wrapper\n */\nimport { Platform } from 'react-native';\nimport DynamicLink from './DynamicLink';\nimport { SharedEventEmitter } from '../../utils/events';\nimport { getLogger } from '../../utils/log';\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nconst NATIVE_EVENTS = ['links_link_received'];\nexport const MODULE_NAME = 'RNFirebaseLinks';\nexport const NAMESPACE = 'links';\n/**\n * @class Links\n */\n\nexport default class Links extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n    SharedEventEmitter.addListener(\n    // sub to internal native event - this fans out to\n    // public event name: onMessage\n    'links_link_received', link => {\n      SharedEventEmitter.emit('onLink', link);\n    }); // Tell the native module that we're ready to receive events\n\n    if (Platform.OS === 'ios') {\n      getNativeModule(this).jsInitialised();\n    }\n  }\n  /**\n   * Create long Dynamic Link from parameters\n   * @param parameters\n   * @returns {Promise.<string>}\n   */\n\n  createDynamicLink(link) {\n    if (!(link instanceof DynamicLink)) {\n      return Promise.reject(new Error(`Links:createDynamicLink expects a 'DynamicLink' but got type ${typeof link}`));\n    }\n    try {\n      return getNativeModule(this).createDynamicLink(link.build());\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n  /**\n   * Create short Dynamic Link from parameters\n   * @param parameters\n   * @returns {Promise.<string>}\n   */\n\n  createShortDynamicLink(link, type) {\n    if (!(link instanceof DynamicLink)) {\n      return Promise.reject(new Error(`Links:createShortDynamicLink expects a 'DynamicLink' but got type ${typeof link}`));\n    }\n    try {\n      return getNativeModule(this).createShortDynamicLink(link.build(), type);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n  /**\n   * Returns the link that triggered application open\n   * @returns {Promise.<string>}\n   */\n\n  getInitialLink() {\n    return getNativeModule(this).getInitialLink();\n  }\n  /**\n   * Subscribe to dynamic links\n   * @param listener\n   * @returns {Function}\n   */\n\n  onLink(listener) {\n    getLogger(this).info('Creating onLink listener');\n    SharedEventEmitter.addListener('onLink', listener);\n    return () => {\n      getLogger(this).info('Removing onLink listener');\n      SharedEventEmitter.removeListener('onLink', listener);\n    };\n  }\n}\nexport const statics = {\n  DynamicLink\n};","map":{"version":3,"names":["Platform","DynamicLink","SharedEventEmitter","getLogger","ModuleBase","getNativeModule","NATIVE_EVENTS","MODULE_NAME","NAMESPACE","Links","constructor","app","events","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","addListener","link","emit","OS","jsInitialised","createDynamicLink","Promise","reject","Error","build","error","createShortDynamicLink","type","getInitialLink","onLink","listener","info","removeListener","statics"],"sources":["/Users/sharusan/MeetMyCar/myapp/node_modules/react-native-firebase/dist/modules/links/index.js"],"sourcesContent":["/**\n * \n * Dynamic Links representation wrapper\n */\nimport { Platform } from 'react-native';\nimport DynamicLink from './DynamicLink';\nimport { SharedEventEmitter } from '../../utils/events';\nimport { getLogger } from '../../utils/log';\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nconst NATIVE_EVENTS = ['links_link_received'];\nexport const MODULE_NAME = 'RNFirebaseLinks';\nexport const NAMESPACE = 'links';\n/**\n * @class Links\n */\n\nexport default class Links extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n    SharedEventEmitter.addListener( // sub to internal native event - this fans out to\n    // public event name: onMessage\n    'links_link_received', link => {\n      SharedEventEmitter.emit('onLink', link);\n    }); // Tell the native module that we're ready to receive events\n\n    if (Platform.OS === 'ios') {\n      getNativeModule(this).jsInitialised();\n    }\n  }\n  /**\n   * Create long Dynamic Link from parameters\n   * @param parameters\n   * @returns {Promise.<string>}\n   */\n\n\n  createDynamicLink(link) {\n    if (!(link instanceof DynamicLink)) {\n      return Promise.reject(new Error(`Links:createDynamicLink expects a 'DynamicLink' but got type ${typeof link}`));\n    }\n\n    try {\n      return getNativeModule(this).createDynamicLink(link.build());\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n  /**\n   * Create short Dynamic Link from parameters\n   * @param parameters\n   * @returns {Promise.<string>}\n   */\n\n\n  createShortDynamicLink(link, type) {\n    if (!(link instanceof DynamicLink)) {\n      return Promise.reject(new Error(`Links:createShortDynamicLink expects a 'DynamicLink' but got type ${typeof link}`));\n    }\n\n    try {\n      return getNativeModule(this).createShortDynamicLink(link.build(), type);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n  /**\n   * Returns the link that triggered application open\n   * @returns {Promise.<string>}\n   */\n\n\n  getInitialLink() {\n    return getNativeModule(this).getInitialLink();\n  }\n  /**\n   * Subscribe to dynamic links\n   * @param listener\n   * @returns {Function}\n   */\n\n\n  onLink(listener) {\n    getLogger(this).info('Creating onLink listener');\n    SharedEventEmitter.addListener('onLink', listener);\n    return () => {\n      getLogger(this).info('Removing onLink listener');\n      SharedEventEmitter.removeListener('onLink', listener);\n    };\n  }\n\n}\nexport const statics = {\n  DynamicLink\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,QAAQ,QAAQ,cAAc;AACvC,OAAOC,WAAW,MAAM,eAAe;AACvC,SAASC,kBAAkB,QAAQ,oBAAoB;AACvD,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,SAASC,eAAe,QAAQ,oBAAoB;AACpD,MAAMC,aAAa,GAAG,CAAC,qBAAqB,CAAC;AAC7C,OAAO,MAAMC,WAAW,GAAG,iBAAiB;AAC5C,OAAO,MAAMC,SAAS,GAAG,OAAO;AAChC;AACA;AACA;;AAEA,eAAe,MAAMC,KAAK,SAASL,UAAU,CAAC;EAC5CM,WAAWA,CAACC,GAAG,EAAE;IACf,KAAK,CAACA,GAAG,EAAE;MACTC,MAAM,EAAEN,aAAa;MACrBO,UAAU,EAAEN,WAAW;MACvBO,kBAAkB,EAAE,KAAK;MACzBC,mBAAmB,EAAE,KAAK;MAC1BC,SAAS,EAAER;IACb,CAAC,CAAC;IACFN,kBAAkB,CAACe,WAAW;IAAE;IAChC;IACA,qBAAqB,EAAEC,IAAI,IAAI;MAC7BhB,kBAAkB,CAACiB,IAAI,CAAC,QAAQ,EAAED,IAAI,CAAC;IACzC,CAAC,CAAC,CAAC,CAAC;;IAEJ,IAAIlB,QAAQ,CAACoB,EAAE,KAAK,KAAK,EAAE;MACzBf,eAAe,CAAC,IAAI,CAAC,CAACgB,aAAa,CAAC,CAAC;IACvC;EACF;EACA;AACF;AACA;AACA;AACA;;EAGEC,iBAAiBA,CAACJ,IAAI,EAAE;IACtB,IAAI,EAAEA,IAAI,YAAYjB,WAAW,CAAC,EAAE;MAClC,OAAOsB,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAE,gEAA+D,OAAOP,IAAK,EAAC,CAAC,CAAC;IACjH;IAEA,IAAI;MACF,OAAOb,eAAe,CAAC,IAAI,CAAC,CAACiB,iBAAiB,CAACJ,IAAI,CAACQ,KAAK,CAAC,CAAC,CAAC;IAC9D,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAOJ,OAAO,CAACC,MAAM,CAACG,KAAK,CAAC;IAC9B;EACF;EACA;AACF;AACA;AACA;AACA;;EAGEC,sBAAsBA,CAACV,IAAI,EAAEW,IAAI,EAAE;IACjC,IAAI,EAAEX,IAAI,YAAYjB,WAAW,CAAC,EAAE;MAClC,OAAOsB,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAE,qEAAoE,OAAOP,IAAK,EAAC,CAAC,CAAC;IACtH;IAEA,IAAI;MACF,OAAOb,eAAe,CAAC,IAAI,CAAC,CAACuB,sBAAsB,CAACV,IAAI,CAACQ,KAAK,CAAC,CAAC,EAAEG,IAAI,CAAC;IACzE,CAAC,CAAC,OAAOF,KAAK,EAAE;MACd,OAAOJ,OAAO,CAACC,MAAM,CAACG,KAAK,CAAC;IAC9B;EACF;EACA;AACF;AACA;AACA;;EAGEG,cAAcA,CAAA,EAAG;IACf,OAAOzB,eAAe,CAAC,IAAI,CAAC,CAACyB,cAAc,CAAC,CAAC;EAC/C;EACA;AACF;AACA;AACA;AACA;;EAGEC,MAAMA,CAACC,QAAQ,EAAE;IACf7B,SAAS,CAAC,IAAI,CAAC,CAAC8B,IAAI,CAAC,0BAA0B,CAAC;IAChD/B,kBAAkB,CAACe,WAAW,CAAC,QAAQ,EAAEe,QAAQ,CAAC;IAClD,OAAO,MAAM;MACX7B,SAAS,CAAC,IAAI,CAAC,CAAC8B,IAAI,CAAC,0BAA0B,CAAC;MAChD/B,kBAAkB,CAACgC,cAAc,CAAC,QAAQ,EAAEF,QAAQ,CAAC;IACvD,CAAC;EACH;AAEF;AACA,OAAO,MAAMG,OAAO,GAAG;EACrBlC;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}