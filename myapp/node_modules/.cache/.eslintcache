[{"/Users/sharusan/MeetMyCar/myapp/src/index.js":"1","/Users/sharusan/MeetMyCar/myapp/src/App.js":"2","/Users/sharusan/MeetMyCar/myapp/src/Signup.js":"3","/Users/sharusan/MeetMyCar/myapp/src/AuthContext.js":"4","/Users/sharusan/MeetMyCar/myapp/src/Login.js":"5","/Users/sharusan/MeetMyCar/myapp/src/PrivateRoute.js":"6","/Users/sharusan/MeetMyCar/myapp/src/ForgotPassword.js":"7","/Users/sharusan/MeetMyCar/myapp/src/UpdateProfile.js":"8","/Users/sharusan/MeetMyCar/myapp/src/RegisterVehicle.js":"9","/Users/sharusan/MeetMyCar/myapp/src/VerifyEmail.js":"10","/Users/sharusan/MeetMyCar/myapp/src/Reauthenticate.js":"11","/Users/sharusan/MeetMyCar/myapp/src/SeePost.js":"12","/Users/sharusan/MeetMyCar/myapp/src/Layout.js":"13","/Users/sharusan/MeetMyCar/myapp/src/ToolBar.js":"14","/Users/sharusan/MeetMyCar/myapp/src/TitleBar.js":"15","/Users/sharusan/MeetMyCar/myapp/src/AddPost.js":"16","/Users/sharusan/MeetMyCar/myapp/src/EditPost.js":"17","/Users/sharusan/MeetMyCar/myapp/src/Banner.js":"18","/Users/sharusan/MeetMyCar/myapp/src/Home_Layout.js":"19","/Users/sharusan/MeetMyCar/myapp/src/Garage.js":"20","/Users/sharusan/MeetMyCar/myapp/src/Profile.js":"21","/Users/sharusan/MeetMyCar/myapp/src/Setting.js":"22","/Users/sharusan/MeetMyCar/myapp/src/CompareSpecs.js":"23","/Users/sharusan/MeetMyCar/myapp/src/firebase.js":"24"},{"size":279,"mtime":1706276144752,"results":"25","hashOfConfig":"26"},{"size":5270,"mtime":1711717678665,"results":"27","hashOfConfig":"26"},{"size":6311,"mtime":1711741263530,"results":"28","hashOfConfig":"26"},{"size":1678,"mtime":1711719559133,"results":"29","hashOfConfig":"26"},{"size":2959,"mtime":1711735387045,"results":"30","hashOfConfig":"26"},{"size":365,"mtime":1711741137220,"results":"31","hashOfConfig":"26"},{"size":2238,"mtime":1711725381954,"results":"32","hashOfConfig":"26"},{"size":13596,"mtime":1711743281990,"results":"33","hashOfConfig":"26"},{"size":16008,"mtime":1711829534993,"results":"34","hashOfConfig":"26"},{"size":4453,"mtime":1711743145201,"results":"35","hashOfConfig":"26"},{"size":2265,"mtime":1711741170605,"results":"36","hashOfConfig":"26"},{"size":41833,"mtime":1711759337203,"results":"37","hashOfConfig":"26"},{"size":472,"mtime":1711727392998,"results":"38","hashOfConfig":"26"},{"size":8609,"mtime":1711742021943,"results":"39","hashOfConfig":"26"},{"size":2546,"mtime":1711832364296,"results":"40","hashOfConfig":"26"},{"size":8860,"mtime":1711717465289,"results":"41","hashOfConfig":"26"},{"size":9721,"mtime":1711725383346,"results":"42","hashOfConfig":"26"},{"size":1693,"mtime":1711723861195,"results":"43","hashOfConfig":"26"},{"size":812,"mtime":1711727178722,"results":"44","hashOfConfig":"26"},{"size":31418,"mtime":1711827991900,"results":"45","hashOfConfig":"26"},{"size":60109,"mtime":1711827124447,"results":"46","hashOfConfig":"26"},{"size":6520,"mtime":1711986247138,"results":"47","hashOfConfig":"26"},{"size":30663,"mtime":1711832054806,"results":"48","hashOfConfig":"26"},{"size":573,"mtime":1711725385350,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},"18kkz56",{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/sharusan/MeetMyCar/myapp/src/index.js",[],[],["131"],"/Users/sharusan/MeetMyCar/myapp/src/App.js",["132","133","134","135","136","137"],[],"// import all components \n\nimport {AuthProvider} from \"./AuthContext\";\n\nimport Layout from \"./Layout\";\nimport Home_Layout from \"./Home_Layout\";\n\nimport Signup from \"./Signup\";\nimport RegisterVehicle  from \"./RegisterVehicle\";\nimport Login from \"./Login\";\nimport Setting from \"./Setting\";\nimport VerifyEmail from \"./VerifyEmail\";\nimport ForgotPassword from \"./ForgotPassword\"\nimport UpdateProfile from \"./UpdateProfile\";\nimport Reauthenticate from \"./Reauthenticate\";\n\nimport SeePost from \"./SeePost\";\nimport AddPost from \"./AddPost\";\nimport EditPost from \"./EditPost\";\n\nimport Profile from \"./Profile\";\nimport Garage from \"./Garage\";\nimport CompareSpecs from \"./CompareSpecs\";\n\nimport {BrowserRouter, Routes, Route,} from \"react-router-dom\";\nimport PrivateRoute from \"./PrivateRoute\";\n\nfunction App() {\n  return (\n          <BrowserRouter>\n            <AuthProvider> {/* Provide authentication context */}\n              <Routes>\n                <Route path=\"/\" \n                  element={\n                    <PrivateRoute> {/*Ensures User is logged in */}\n                      <Layout>\n                        <SeePost />\n                      </Layout>\n                    </PrivateRoute>\n                    }\n                />\n                \n                <Route path=\"/verify\" \n                  element={\n                    <PrivateRoute>\n                      <Home_Layout>\n                        <VerifyEmail />\n                      </Home_Layout>\n                    </PrivateRoute>\n                    }\n                />\n\n                <Route path=\"/update-profile\" \n                  element={\n                    <PrivateRoute>\n                      <Layout>\n                        <UpdateProfile />\n                      </Layout>\n                    </PrivateRoute>\n                    }\n                />\n\n                <Route path=\"/reauthenticate\"\n                  element={\n                    <PrivateRoute>\n                      <Home_Layout>\n                        <Reauthenticate/>\n                      </Home_Layout>\n                    </PrivateRoute>\n                  }\n                />\n\n                <Route path=\"/registervehicle\"\n                  element={\n                    <PrivateRoute>\n                      <Home_Layout>\n                        <RegisterVehicle/>\n                      </Home_Layout>\n                    </PrivateRoute>\n                  }\n                />\n\n                <Route path=\"/setting\"\n                  element={\n                    <PrivateRoute>\n                      <Layout>\n                        <Setting/>\n                      </Layout>\n                    </PrivateRoute>\n                  }\n                />\n\n                <Route path=\"/addpost\"\n                  element={\n                    <PrivateRoute>\n                      <Layout>\n                        <AddPost/>\n                      </Layout>\n                    </PrivateRoute>\n                  }\n                />\n\n                <Route path=\"/editpost/:postId\"\n                  element={\n                    <PrivateRoute>\n                      <Layout>\n                        <EditPost/>\n                      </Layout>\n                    </PrivateRoute>\n                  }\n                />\n\n                {/* Profile Account with userId*/}\n                <Route path=\"/profile/:userid\"\n                  element={\n                    <PrivateRoute>\n                      <Layout>\n                        <Profile/>\n                      </Layout>\n                    </PrivateRoute>\n                  }\n                />\n\n                {/* Profile Account with username*/}\n                <Route path=\"/profile/username/:userName\"\n                  element={\n                    <PrivateRoute>\n                      <Layout>\n                        <Profile/>\n                      </Layout>\n                    </PrivateRoute>\n                  }\n                />\n\n                <Route path=\"/garage/:userid\"\n                  element={\n                    <PrivateRoute>\n                      <Layout>\n                        <Garage/>\n                      </Layout>\n                    </PrivateRoute>\n                  }\n                />\n\n                <Route path=\"/race/:userid\"\n                  element={\n                    <PrivateRoute>\n                      <Layout>\n                        <CompareSpecs/>\n                      </Layout>\n                    </PrivateRoute>\n                  }\n                />\n\n                <Route path=\"/signup\"\n                  element={\n                    <Home_Layout>\n                      <Signup/>\n                    </Home_Layout>\n                  }\n                />\n\n                <Route path=\"/login\"\n                  element={\n                    <Home_Layout>\n                      <Login/>\n                    </Home_Layout>\n                  }\n                />\n\n                <Route path=\"/forgot-password\"\n                  element={\n                    <Home_Layout>\n                      <ForgotPassword/>\n                    </Home_Layout>\n                  }\n                />\n\n              </Routes>\n            </AuthProvider>\n          </BrowserRouter>\n  )\n}\n\nexport default App;\n","/Users/sharusan/MeetMyCar/myapp/src/Signup.js",[],[],"/Users/sharusan/MeetMyCar/myapp/src/AuthContext.js",[],[],"/Users/sharusan/MeetMyCar/myapp/src/Login.js",[],[],"/Users/sharusan/MeetMyCar/myapp/src/PrivateRoute.js",[],[],"/Users/sharusan/MeetMyCar/myapp/src/ForgotPassword.js",[],[],"/Users/sharusan/MeetMyCar/myapp/src/UpdateProfile.js",["138"],[],"import React, {useEffect, useRef, useState} from 'react'\nimport {Form} from 'react-bootstrap'\nimport { useAuth } from './AuthContext'\nimport {Popup} from 'reactjs-popup'\nimport {Link, useNavigate} from 'react-router-dom'\n\nimport './UpdateProfile_css.css'\n\nconst UpdateProfile = () => {\n\n    const usernameRef = useRef()\n    const emailRef = useRef()\n    const passwordRef = useRef()\n    const passwordConfirmRef = useRef()\n    const profilePictureRef = useRef()\n\n    const [userId, setUserId] = useState('')\n    const [firstname, setfirstName] = useState('')\n    const [lastname, setlastName] = useState('')\n    const [username, setuserName] = useState('')\n    const [profilePicture, setprofilePicture] = useState('')\n    const [vehicles, setVehicles] = useState([])\n\n    const {currentUser, logout, sendEmailVerify, updateEmail, updatePassword, deleteUser} = useAuth()\n\n    const [emailChanging, setemailChanging] = useState(false)\n    const [confirmDeleteUser, setconfirmDeleteUser] = useState(false)\n    const [openDeleteModal, setOpenDeleteModal] = useState(false)\n\n    const [error, setError] = useState('')\n    const [loading, setLoading] = useState(false)\n    const navigate = useNavigate()\n\n    useEffect(() => {\n        async function fetchUserData(){\n            // fetches current user data after every updates to user, and stores the data into useState, to be used throughout the page.\n            await updateUser()\n            try{\n                setError('')\n                // fetches the user data with firebase ID\n                const firebaseUID = currentUser.uid;\n                // console.log(firebaseUID)\n\n                const response = await fetch(`http://localhost:3001/users?userfb=${encodeURIComponent(firebaseUID)}`, {\n                    method: 'GET',\n                    headers: {\n                        'accept': 'application/json',\n                    },\n                });\n\n                if (response.ok){\n                    const data = await response.json()\n\n                    // updates user's data states\n                    setUserId(data.userData._id)\n                    setfirstName(data.userData.firstname)\n                    setlastName(data.userData.lastname)\n                    setuserName(data.userData.username)\n                    setprofilePicture(data.userData.profilePicture)\n                    setVehicles(data.userData.vehicles)\n\n                    console.log(\"Fetched User Details:\", data)\n                    return data\n                } else{\n                    const errorData = await response.json()\n                    setError(\"Failed To Fetch User Data\")\n                    throw new Error(errorData.message)\n                }\n            }catch (error){\n                console.error(\"Error Fetching User Data:\", error)\n                setError(\"Failed To Fetch User Data\")\n            }\n        }\n        fetchUserData();\n    }, [currentUser.uid]); \n\n    // handles updates to user account\n    const updateUser = async () => {\n\n        const formData = new FormData();\n\n        if (profilePictureRef.current && profilePictureRef.current.files[0]){\n            formData.append('profilePicture', profilePictureRef.current.files[0])\n        }\n\n        formData.append('email', emailRef.current.value)\n\n        try{\n            // console.log(\"Updated Email: \", updatedEmail)\n            setLoading(true)\n            setError('')\n            const firebaseUID = currentUser.uid;\n            // console.log(firebaseUID)\n\n            // amends user's data into database\n            const response = await fetch(`http://localhost:3001/users/update?userfb=${encodeURIComponent(firebaseUID)}`, {\n                method: 'PUT',\n                body: formData,\n            });\n\n            if (response.ok){\n                console.log(\"Updated User Details\")\n            } else{\n                const errorData = await response.json()\n                setError(\"Failed To Update User Details\")\n                console.error(\"Error Updating User Details:\", error)\n                throw new Error(errorData.message)\n            }\n        }catch (error){\n            console.error(\"Error Updating User Details:\", error)\n            setError(\"Failed To Update User Details\")\n        }finally{\n            setLoading(false)\n        }\n    }\n\n    // handles update user submission\n    async function handleSubmit(e){\n        e.preventDefault()\n\n        // validates password meets requirement\n        if(passwordRef.current.value.length){\n            if (passwordRef.current.value !== passwordConfirmRef.current.value){\n                return setError(\"Password do not match\")\n            }\n            if (passwordRef.current.value.length < 6 && passwordConfirmRef.current.value.length < 6 ){\n                return setError(\"Password Too Short\")\n            }\n        }\n\n        const toupdate = []\n        setLoading(true)\n        setError('')\n\n        // checks if any of the field has been changed\n        if (emailRef.current.value !== currentUser.email){\n            try{\n                await toupdate.push(updateEmail(emailRef.current.value))\n                console.log(\"Email Updating...\")\n                toupdate.push(updateUser())\n                navigate(`/verify?newEmail=${encodeURIComponent(emailRef.current.value)}`);\n                return;\n            }catch(error){\n                setError(error)\n                console.log(error)\n            }\n        }\n        if (passwordRef.current.value.length >0 && passwordRef.current.value !== currentUser.password){\n            console.log(\"Password Updating...\")\n            toupdate.push(updatePassword(passwordRef.current.value))\n        }\n        if (profilePictureRef.current.value !==profilePicture){\n            console.log(\"Profile Picture Updating...\")\n            toupdate.push(updateUser())\n        }\n\n        // adds all changes to a list and updates all changes\n        Promise.all(toupdate).then(() => {\n            navigate('/setting')\n        }).catch( (error) => {\n            console.log(\"Failed to Update Account\" , error)\n            if (error.code === 'auth/operation-not-allowed'){\n                setError(\"Verify Current Email Address\")\n                sendEmailVerify()\n            }else if (error.code === 'auth/requires-recent-login'){\n                setError(\"Login Session Timeout\")\n                setTimeout(() => {\n                    logout()\n                }, 2000)\n            }else{\n                setError(\"Failed to Update Account\")\n            }\n        }).finally( () => {\n            setLoading(false)\n        })\n    }\n\n    // handle delete user's account\n    async function handleDelete(e){\n        e.preventDefault()\n\n        // opens delete confirmation\n        if (!confirmDeleteUser){\n            setconfirmDeleteUser(true)\n            setOpenDeleteModal(true)\n            return\n        }\n\n        setLoading(true)\n        setError('')\n\n        try{\n            // sends delete request to database to remove account\n            const response = await fetch(`http://localhost:3001/users/delete?userfb=${encodeURIComponent(userId)}`, {\n                method: 'DELETE',\n            });\n\n            if (response.ok){\n                console.log(\"Deleted User\")\n                // deletes account in firebase database\n                deleteUser()\n            } else{\n                const errorData = await response.json()\n                setError(\"Failed To Delete User\")\n                console.error(\"Error Deleting User:\", error)\n                throw new Error(errorData.message)\n            }\n        }catch (error){\n            console.error(\"Error Deleting User:\", error)\n            setError(\"Failed To Delete User\")\n        }finally{\n            setLoading(false)\n        }\n    }\n\n    // handle image input, and display new inserted image\n    function handleImageInput(e){\n        setprofilePicture(URL.createObjectURL(e.target.files[0]))\n    }\n\n    // handle email change\n    const handleEmailChange = () =>{\n        setemailChanging(true)\n    }\n    \n    // handle delete modal\n    const handleCloseDelete = () => {\n        setOpenDeleteModal(false)\n        setconfirmDeleteUser(false)\n    }   \n    \n  return (\n        <div>\n            <header className='updateHeader'>\n                <h1 id=\"login_text\">\n                    Update Profile\n                    <p id=\"slogan_text\">Amend Your Details</p>\n                </h1>\n                <h3 className='updateName'>{firstname} {lastname}</h3>\n            </header>\n\n            {/* Update Form */}\n            <form className='updateForm' onSubmit={handleSubmit}>\n\n                <p className=\"w-100 text-center mt-0 mb-0\" id=\"error_Msg\">{error}</p>\n\n                <Form.Group className='formBox' id=\"username\">\n                    <Form.Label className='formLabel'>Username</Form.Label>\n                    <Form.Control className='formInput' type=\"text\" ref={usernameRef}  defaultValue={username} disabled/>\n                </Form.Group>   \n                \n                <Form.Group className='formBox' id=\"email\">\n                    <Form.Label className='formLabel'>Email</Form.Label>\n                    <Form.Control className='formInput' type=\"email\" ref={emailRef}  defaultValue={currentUser.email} onChange={handleEmailChange} required/>\n                </Form.Group>            \n                \n                <Form.Group className='formBox' id=\"password\">\n                    <Form.Label className='formLabel'>Password</Form.Label>\n                    {/* check if email is being changed and display message depending on situation */}\n                    <Form.Control className='formInput' type=\"password\" ref={passwordRef} placeholder={emailChanging ? 'Cannot Be Updated While Email Updating' : 'Leave Blank to keep the same'} disabled={emailChanging}/>\n                </Form.Group>\n\n                <Form.Group className='formBox' id=\"passwordConfirmation\">\n                    <Form.Label className='formLabel'>Password Confirmation</Form.Label>\n                    {/* check if email is being changed and display message depending on situation */}\n                    <Form.Control className='formInput' type=\"password\" ref={passwordConfirmRef} placeholder={emailChanging ? 'Cannot Be Updated While Email Updating' : 'Leave Blank to keep the same'} disabled={emailChanging} />\n                </Form.Group>\n\n                <Form.Group className='formBox' id=\"profilePicture\">\n                    <Form.Label className='formLabel'>Profile Picture</Form.Label>\n                    {/* display profile pic */}\n                    {profilePicture && (\n                        <img\n                            src={profilePicture} \n                            alt=\"Profile\"\n                            className='profileImg'\n                        />\n                    )}\n                    <Form.Control className='formInput' type=\"file\" ref={profilePictureRef} placeholder='Insert Image' defaultValue={profilePicture} onChange={handleImageInput}  accept=\"image/*\"/>\n                </Form.Group>\n\n               \n\n                <Form.Group className='formBox' id=\"vehicles\">\n                    <Form.Label className='formLabel'>Look At Your Vehicles</Form.Label>\n                    {/* shows all user's vehicle */}\n                    <select className='formVehicle'>\n                        <option value=\"\" disabled>VRN</option>\n                        {vehicles.map(vehicle => ( \n                            <option key={vehicle.vehicleId} value={vehicle.vehicleId}> {vehicle.vrn} </option>\n                        ))}\n                    </select>\n                </Form.Group>\n\n                <button disabled={loading} className=\"btn btn-dark w-100 mt-2\" type=\"submit\">Update</button>\n                \n            {/* modal for confirm delete */}\n                {confirmDeleteUser ? (\n                    <>\n                        <Popup open={openDeleteModal} closeOnDocumentClick onClose={() => handleCloseDelete()} className='Popup'>\n                            <div className='UpdateModal'>\n                                <>\n                                    <p className='deleteheading'>Confirm deletion of <strong>{usernameRef.current.value}</strong>'s account? </p>\n                                    <div className='deletelst'>\n                                        <div className='deletebtn'>\n                                            <button disabled={loading} className=\"btn btn-dark w-100\" variant=\"cancel\" onClick={() => handleCloseDelete()}>Cancel</button>\n                                            <button disabled={loading} className=\"btn btn-danger w-100\" variant=\"danger\" onClick={handleDelete}>Delete</button>\n                                        </div>\n                                        <p id='deletemsg'>This action is irreversible.</p>      \n                                    </div>\n                                </>\n                            </div>\n                        </Popup>\n                    </>\n                ) :(\n                    <>\n                        <button disabled={loading} className=\"btn btn-outline-dark w-100 mt-2\" variant=\"danger\" type=\"submit\"  onClick={handleDelete}>Delete Account</button>\n                    </>\n                )}\n\n            </form>\n\n            {/* Alternative flow for user's doesnt want to make changes */}    \n            <div className=\"cancelMsg\">\n                <Link to=\"/setting\" className=\"cancelMsg\">  Go Back Home</Link>\n            </div>\n        </div>\n  )\n}\n\nexport default UpdateProfile\n\n","/Users/sharusan/MeetMyCar/myapp/src/RegisterVehicle.js",[],[],"/Users/sharusan/MeetMyCar/myapp/src/VerifyEmail.js",[],[],"/Users/sharusan/MeetMyCar/myapp/src/Reauthenticate.js",[],[],"/Users/sharusan/MeetMyCar/myapp/src/SeePost.js",["139"],[],"import React, {useState, useEffect, useRef} from 'react'\nimport { Link } from 'react-router-dom'\nimport { useAuth } from './AuthContext'\n\nimport './SeePost_css.css'\n\nconst SeePost = () => {\n    const {currentUser} = useAuth()\n    const [userId, setUserId] = useState('')\n    const [usersf, setUserSF] = useState('')\n\n    const [posts, setPosts] = useState([])\n    const [refreshData, setRefreshData] = useState(false)\n\n    const [selectedPost, setSelectedPost] = useState('')\n    const [selectedComment, setSelectedComment] = useState(null)\n    const [menuoptions, setMenuOptions] = useState(false)\n    const [confirmDeletePost, setconfirmDeletePost] = useState(false)\n    const [deletePostMsg, setDeletePostMsg] = useState(false)\n\n    const commentRef = useRef()\n    const replyRef = useRef()\n    const [commentBox, showCommentBox] = useState(false)\n    const [replyBox, showReplyBox] = useState(false)\n\n    const [message, setMessage] = useState('')\n    const [error, setError] = useState('')\n    const [nopost, setNoPost] = useState('')\n    const [commentError, setCommentError] = useState('')\n    const [loading, setLoading] = useState('')\n\n    useEffect(() => {\n        async function fetchPostData(){\n            // fetches all post data, and stores the data into useState\n            try{\n                setError('')\n                setMessage('')\n                const response = await fetch(`http://localhost:3001/posts`, {\n                    method: 'GET',\n                    headers: {\n                        'accept': 'application/json',\n                    },\n                });\n\n                if (response.ok){\n                    const data = await response.json()\n\n                    // fetches vehicle's data for each post, and stores the data into post\n                    const vehiclePost = await Promise.all(data.postData.map(async (post) => {\n                        if(post.vehicles?.vehicleId){\n                            const VehicleReponse = await fetch(`http://localhost:3001/vehicles?vehicleId=${encodeURIComponent(post.vehicles.vehicleId)}`, {\n                                method: 'GET',\n                                headers: {\n                                    'accept': 'application/json',\n                                },\n                            });\n\n                            if(VehicleReponse.ok){\n                                const vehicle_Data = await VehicleReponse.json()\n                                return {\n                                    ...post,\n                                     vehicle_Data\n                                }\n                            } else{\n                                console.error(\"Error Fetching Vehicle Data:\", error)\n                                setError(\"Error Fetching Vehicle. Try Again Later\")\n                                return post                       \n                            }\n                        }\n                        return post\n                    }))\n\n                    setPosts(vehiclePost)\n                    console.log(\"Fetched Post Details\", vehiclePost)\n\n                    // shows message, if no post found\n                    if(!vehiclePost || vehiclePost.length === 0){\n                        setNoPost(\"No car posts? Looks like the traffic jam is over. Be the first on the road!\")\n                    } \n\n                } else{\n                    const errorData = await response.json()\n                    throw new Error(errorData.message)\n                }\n\n            } catch (error){\n                console.error(\"Error Fetching Post Data:\", error)\n                setError(\"Error Fetching Post. Try Again Later\")\n            }\n        }\n        fetchPostData();\n    }, [refreshData]);\n\n    useEffect(() => {\n        async function fetchUserData(){\n            // fetches current user data, and stores the data (id and superfuel) into useState, to be used throughout the page.\n            try{\n                setError('')\n                // fetches the user data with firebase ID\n                const firebaseUID = currentUser.uid;\n                const response = await fetch(`http://localhost:3001/users?userfb=${encodeURIComponent(firebaseUID)}`, {\n                    method: 'GET',\n                    headers: {\n                        'accept': 'application/json',\n                    },\n                });\n\n                if (response.ok){\n                    const data = await response.json()\n                    // updates user's data states\n                    setUserId(data.userData._id)\n                    setUserSF(data.userData.superfuel)\n\n                    console.log(\"Fetched User Details\")\n                    return data\n                } else{\n                    const errorData = await response.json()\n                    setError(\"Failed To Fetch User Data\")\n                    throw new Error(errorData.message)\n                }\n            }catch (error){\n                console.error(\"Error Fetching User Data:\", error)\n                setError(\"Failed To Fetch User Data\")\n            }\n        }\n        fetchUserData();\n    }, [currentUser.uid]);\n\n    // shows the created's time and date of the post\n    const formatDate = (timestamps) => {\n        const date = new Date(timestamps);\n        return date.toLocaleDateString()\n    }\n    const formatTime = (timestamps) => {\n        const time = new Date(timestamps);\n        return time.toLocaleTimeString()\n    }\n\n    // handles select post to show comment box\n    const handleSelectPost = (post) => {\n        console.log(\"Selected Post:\", post)\n        setSelectedPost(post)\n        showCommentBox(!commentBox)\n    }\n\n    // handles select comment to show reply box\n    const handleSelectComment = (selectedcomment) => {\n        console.log(\"Selected Comment:\", selectedcomment)\n        setSelectedComment(selectedcomment)\n        showReplyBox(!replyBox)\n    }\n\n    // handles select post to show options\n    const handleShowOptions = (postId) =>{\n        setSelectedPost(postId)\n        setMenuOptions(!menuoptions)\n        setconfirmDeletePost(false)\n    }\n\n    // handles select post to show delete button\n    const handleShowDelete = (postId) => {\n        setSelectedPost(postId)\n        setconfirmDeletePost(!confirmDeletePost)\n    }\n\n    // handle post delete\n    async function handleDelete(postId) {\n        try{\n            setError('')\n            setMessage('')\n            setLoading(true)\n\n            // delete posts in Post database\n            const response = await fetch(`http://localhost:3001/posts/delete?postId=${encodeURIComponent(postId)}`, {\n                method: 'DELETE',\n            });\n\n            if (!response.ok){\n                console.error(\"Error Deleting Post:\")\n            }\n            const firebaseUID = currentUser.uid;\n\n            // delete posts in User's account\n            const userDelete_response = await fetch(`http://localhost:3001/users/update?userfb=${encodeURIComponent(firebaseUID)}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({postIdRemove: postId})\n            });\n\n            if(!userDelete_response.ok){\n                console.error(\"Error Deleting Post:\")\n            }\n\n            // removes superfuel points for user\n            const userSFResponse = await fetch(`http://localhost:3001/users/update?userfb=${encodeURIComponent(firebaseUID)}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({removeSuperFuel: -1})\n            });\n\n            if (!userSFResponse.ok){\n                console.error(\"Error Updating User's SuperFuel:\")\n            }\n            \n            // refresh page, to show updated post collection\n            console.log(\"Deleted Post\")\n            setDeletePostMsg(true)\n            setTimeout(() => {\n                window.location.reload(false);\n            }, 2000)\n\n        }catch (error){\n            console.error(\"Error Deleting Post:\")\n            setError(\"Error Deleting Post. Try Again Later\")\n        }\n        setLoading(false)\n    }\n\n    // handle like post\n    async function handleLike(postId) {\n        try{\n            setError('')\n            setLoading(true)\n\n            // add like to post database\n            const response = await fetch(`http://localhost:3001/posts/edit?postId=${encodeURIComponent(postId)}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({addUserIdLike: userId})\n            });\n\n            if (!response.ok){\n                console.error(\"Error Updating Like Post:\")\n            }\n\n            // renders the like\n            setRefreshData(!refreshData)\n            console.log(\"Updated Like Post\")\n        }catch (error){\n            console.error(\"Error Updating Like Post:\")\n            setError(\"Error Updating Like For Post. Try Again Later\")\n        }\n        setLoading(false)\n    }\n\n    // handle unlike post\n    async function handleUnLike(postId) {\n        try{\n            setError('')\n            setLoading(true)\n\n            // remove like from post database\n            const response = await fetch(`http://localhost:3001/posts/edit?postId=${encodeURIComponent(postId)}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({removeUserIdLike: userId})\n            });\n\n            if (!response.ok){\n                console.error(\"Error Updating Like Post:\")\n            }\n\n            //renders the unlike\n            setRefreshData(!refreshData)\n            console.log(\"Updated Like Post\")\n        }catch (error){\n            console.error(\"Error Updating Like Post:\")\n            setError(\"Error Updating Like For Post. Try Again Later\")\n        }\n        setLoading(false)\n    }\n\n    // handle add comment post\n    async function handleaddComment(postId){\n\n        // validate the length of the comment\n       if (commentRef.current.value.length >= 2){\n            try{\n                setLoading(true)\n                setCommentError('')\n\n                // adds comment to post database\n                const response = await fetch(`http://localhost:3001/posts/edit?postId=${encodeURIComponent(postId)}`, {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({commentUser: userId, commentText: commentRef.current.value})\n                });\n\n                if (!response.ok){\n                    const errorData = await response.json()\n                    console.error(\"Error Updating Comment Data:\", error)\n                    throw new Error(errorData.message)\n                }\n\n                // renders the new comment\n                setRefreshData(!refreshData)\n                console.log(\"Added Comment Data\")\n            }catch (error){\n                console.error(\"Error Adding Comment Data:\", error)\n                setCommentError(\"Failed To Add Comment Data\")\n            }\n            setLoading(false)\n        }else{\n            setCommentError('Comment Too Short')\n            return\n        }\n    }\n\n    // handle delete comment post\n    async function handleDeleteComment(postId, commentId){\n        try{\n            setLoading(true)\n            setCommentError('')\n\n            // remove the comment from post database\n            const response = await fetch(`http://localhost:3001/posts/edit?postId=${encodeURIComponent(postId)}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({deleteCommentId: commentId})\n            });\n\n            if (!response.ok){\n                const errorData = await response.json()\n                console.error(\"Error Deleting Comment Data:\", error)\n                throw new Error(errorData.message)\n            }\n\n            // renders the removed comment\n            setRefreshData(!refreshData)\n            console.log(\"Deleted Comment Data\")\n        }catch (error){\n            console.error(\"Error Deleting Comment Data:\", error)\n            setCommentError(\"Failed To Delete Comment\")\n        }\n        setLoading(false)\n    }\n\n    // handle add reply post\n    async function handleaddReply(postId, commentId){\n\n        // validate the length of the reply\n        if (replyRef.current.value.length >= 2){\n             try{\n                 setLoading(true)\n                 setCommentError('')\n \n                 // adds reply to post database\n                 const response = await fetch(`http://localhost:3001/posts/edit?postId=${encodeURIComponent(postId)}`, {\n                     method: 'PUT',\n                     headers: {\n                         'Content-Type': 'application/json'\n                     },\n                     body: JSON.stringify({commentId: commentId, replyUser: userId, replyText: replyRef.current.value})\n                 });\n \n                 if (!response.ok){\n                    const errorData = await response.json()\n                    console.error(\"Error Updating Reply Data:\", error)\n                    throw new Error(errorData.message)\n                 }\n\n                // renders the new reply\n                 setRefreshData(!refreshData)\n                 console.log(\"Added Reply Data\")\n             }catch (error){\n                 console.error(\"Error Adding Reply Data:\", error)\n                 setCommentError(\"Failed To Add Reply Data\")\n             }\n             setLoading(false)\n         }else{\n             setCommentError('Reply Too Short')\n             return\n         }\n     }\n\n     // handle delete reply post\n     async function handleDeleteReply(postId, commentId, replyId){\n        try{\n            setLoading(true)\n            setCommentError('')\n\n            // remove the reply from post database\n            const response = await fetch(`http://localhost:3001/posts/edit?postId=${encodeURIComponent(postId)}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({commentId: commentId, deleteReplyId: replyId})\n            });\n\n            if (!response.ok){\n                const errorData = await response.json()\n                console.error(\"Error Deleting Reply Data:\", error)\n                throw new Error(errorData.message)\n            }\n\n            // renders the removed reply\n            setRefreshData(!refreshData)\n            console.log(\"Deleted Reply Data\")\n        }catch (error){\n            console.error(\"Error Deleting Reply Data:\", error)\n            setCommentError(\"Failed To Delete Reply\")\n        }\n        setLoading(false)\n    }\n\n    // handle add superfuel\n    async function handleSuperFuel(postId, postUserId) {\n        try{\n            setError('')\n            setLoading(true)\n\n            // check if current user has valid number of superfuel\n            if(usersf > 0){\n                // add superfuel to post database\n                const response = await fetch(`http://localhost:3001/posts/edit?postId=${encodeURIComponent(postId)}`, {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({addUserIdSuperFuel: userId})\n                });\n\n                if (!response.ok){\n                    console.error(\"Error Updating SuperFuel Post:\")\n                }\n\n                const firebaseUID = currentUser.uid;\n\n                // remove superfuel from current user\n                const userResponse = await fetch(`http://localhost:3001/users/update?userfb=${encodeURIComponent(firebaseUID)}`, {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({removeSuperFuel: -1})\n                });\n\n                if (!userResponse.ok){\n                    console.error(\"Error Updating User's SuperFuel:\")\n                }\n\n                // add superfuel to post's user\n                const profileResponse = await fetch(`http://localhost:3001/users/update?userid=${encodeURIComponent(postUserId)}`, {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({addSuperFuel: +1})\n                });\n\n                if (!profileResponse.ok){\n                    console.error(\"Error Updating Profile's SuperFuel:\")\n                }\n                \n                // renders the superfuel\n                setRefreshData(!refreshData)\n                console.log(\"Updated SuperFuel Post\")\n\n            } else{\n                console.error(\"Not Enough SuperFuel Points\")\n                setError(\"Not Enough SuperFuel Points.\")\n            }\n\n            \n        }catch (error){\n            console.error(\"Error Updating SuperFuel Post:\")\n            setError(\"Error Updating SuperFuel For Post. Try Again Later\")\n        }\n        setLoading(false)\n    }\n\n    // handle remove superfuel\n    async function handleUnSuperFuel(postId, postUserId) {\n        try{\n            setError('')\n            setLoading(true)\n\n            // remove superfuel from post database\n            const response = await fetch(`http://localhost:3001/posts/edit?postId=${encodeURIComponent(postId)}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({removeUserIdSuperFuel: userId})\n            });\n\n            if (!response.ok){\n                console.error(\"Error Updating SuperFuel Post:\")\n            }\n\n            const firebaseUID = currentUser.uid;\n\n            // add superfuel to current user\n            const userResponse = await fetch(`http://localhost:3001/users/update?userfb=${encodeURIComponent(firebaseUID)}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({addSuperFuel: +1})\n            });\n\n            if (!userResponse.ok){\n                console.error(\"Error Updating User's SuperFuel:\")\n            }\n\n            // remove superfuel from post's user\n            const profileResponse = await fetch(`http://localhost:3001/users/update?userid=${encodeURIComponent(postUserId)}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({removeSuperFuel: -1})\n            });\n\n            if (!profileResponse.ok){\n                console.error(\"Error Updating Profile's SuperFuel:\")\n            }\n\n            // renders the superfuel\n            setRefreshData(!refreshData)\n            console.log(\"Updated SuperFuel Post\")\n        }catch (error){\n            console.error(\"Error Updating SuperFuel Post:\")\n            setError(\"Error Updating SuperFuel For Post. Try Again Later\")\n        }\n        setLoading(false)\n    }\n\n    return (\n        <>\n            <p className=\"w-100 text-center mt-2 mb-0\" id=\"error_Msg\">{nopost}</p>\n            \n            {/* displays all post in the [post] */}\n            <div className=\"postList\">\n                {posts.map((post) => (\n                    <div key={post._id}  className='post'>\n                        <p className=\"w-100 text-center mt-2 mb-0\" id=\"error_Msg\">{error}</p>\n                        <p className=\"w-100 text-center mt-2 mb-0\" id=\"success_Msg\">{message}</p>\n\n                        {/* check if post belongs to current user and selected */}\n                        {deletePostMsg && post._id === selectedPost ? (\n                            <>\n                                <p className=\"w-100 text-center mt-2 mb-0\" id=\"success_Msg\">Post Deleted!</p>\n                            </>\n                        ) : (\n                            <>\n                            </>\n                        )}\n\n                        <div className='postHead'>\n                            <div className='postUserDetails'>\n                                {post.user?.profilePicture && (\n                                    <img className='postUserImage'\n                                        src={post.user.profilePicture}\n                                        alt=\"Profile\"\n                                    />\n                                )}                                \n                                <Link to={`/profile/${post.user._id}`} className='postUserName'>{post.user?.username}</Link>\n                            </div>\n\n                            \n                            <div className='postTimeStamp'>\n                                <p>{formatDate(post.createdAt)}</p>\n                                <p>{formatTime(post.createdAt)}</p>\n\n                                {/* check if post belongs to current user */}\n                                {(post.user._id === userId)? (\n                                    <>\n                                        <div className='postMenuContainer'>\n                                            <button className='postMenu' onClick={() => handleShowOptions(post._id)}>\n                                                <div className='postdot'></div>\n                                                <div className='postdot'></div>\n                                                <div className='postdot'></div>\n                                            </button>\n\n                                            {menuoptions && post._id === selectedPost &&(\n                                                <div className='postOption'>\n                                                    <ul>\n                                                        <li className='menu-item'>\n                                                            <Link to={`/editpost/${post._id}`} className='menu-link'>\n                                                                Edit Post\n                                                            </Link>\n                                                        </li>\n                                                        <li className='menu-item'>\n                                                            <Link onClick={() => handleShowDelete(post._id)} className='menu-link ' id='delete-menu-link'>\n                                                                Delete Post\n                                                            </Link>\n                                                        </li>\n                                                    </ul>\n                                                </div>\n                                            )}\n                                        </div>\n                                    </>\n                                    \n                                ) :(\n                                    <></>\n                                )}\n                            </div>\n                        </div>\n\n                        {/* check if post belongs to current user and selected */}\n                        {confirmDeletePost && post._id === selectedPost && (\n                            <div>\n                                <button className=\"btn btn-dark\" id='deletepostbtn' disabled={loading} onClick={() => handleDelete(post._id)}>Confirm Delete</button>\n                            </div>\n                        )}\n                        \n                        <div className='post-content'>\n                            <h2 className='postTitle'>{post.title}</h2> \n                            <img src={post.image} alt={post.title} className='postImage'/>\n\n                            {/* showcases the vehicle spec */}\n                            <div className='postSpecs'>\n                                {/* display spec as a speedometer, works a percentage to fill out of 350 */}\n                                <div className='TopSpecs' style={{background: `conic-gradient(from 0.5turn,red 0% ${((post.vehicle_Data?.vehicleData.vehicleInfo.Performance.MaxSpeed.Mph/350)*100)}%,white ${0}% 100%)`}}>\n                                    <h3>{post.vehicle_Data?.vehicleData.vehicleInfo.Performance.MaxSpeed.Mph} \n                                        <span>mph</span>\n                                    </h3>\n                                    <p className='TopSpecsName'>Top Speed</p>\n                                </div>\n\n                                {/* display spec as a speedometer, works a percentage to fill out of 800 */}\n                                <div className='TopSpecs' style={{background: `conic-gradient(from 0.5turn,orange 0% ${((post.vehicle_Data?.vehicleData.vehicleInfo.Performance.Power.Bhp/800)*100)}%,white ${0}% 100%)`}}>\n                                    <h3>{post.vehicle_Data?.vehicleData.vehicleInfo.Performance.Power.Bhp}\n                                        <span>bhp</span>\n                                    </h3>\n                                    <p className='TopSpecsName'>BHP</p>\n                                </div>\n\n                                {/* display spec as a speedometer, works a percentage to fill out of 1000 */}\n                                <div className='TopSpecs' style={{background: `conic-gradient(from 0.5turn,green 0% ${((post.vehicle_Data?.vehicleData.vehicleInfo.Performance.Torque.Nm)/1000)*100}%,white ${0}% 100%)`}}>\n                                    <h3>{post.vehicle_Data?.vehicleData.vehicleInfo.Performance.Torque.Nm}\n                                        <span>Nm</span>\n                                    </h3>\n                                    <p className='TopSpecsName'>Torque</p>\n                                </div>\n                            </div>\n\n                            {/* shows the vrn as a button, to be raced when clicked */}\n                            <div className='postFooter'>\n                                <p className='raceText'>Race Me</p>\n                                <Link className='postVRN' to={`/race/${post.user._id}`}>{post.vehicles?.vrn}</Link>\n                                <p className='postDescription'>{post.description}</p> \n                            </div> \n                        </div> \n\n                        {commentBox && post._id === selectedPost._id? (\n                            <>\n                                <div className='CommentBox'>\n                                    <button className='closeButton' onClick={() => showCommentBox(false)}>\n                                        <span>&times;</span>\n                                    </button>\n                                \n                                    {selectedPost ? (\n                                        <>\n                                            <div className='modalCommentHeader'>\n                                                <h3>Comments</h3>\n                                            </div> \n\n                                            <p className=\"w-100 text-center mt-2 mb-0\" id=\"error_Msg\">{commentError}</p>\n\n                                            <div className='modalCommentBody'>\n                                                {/* displays all comments for each post */}\n                                                {selectedPost.comments?.map((postComment) => (\n                                                    <div key={postComment._id} className='comments'>\n                                                        <div className='commentTop'>\n                                                            {/* displays user details for each comment and reply */}\n                                                            <div className='commentUser'>\n                                                                {postComment.userID?.profilePicture && (\n                                                                    <img className='commentUserImage'\n                                                                        src={postComment.userID.profilePicture}\n                                                                        alt=\"Profile\"\n                                                                    />\n                                                                )}                                \n                                                                <Link to={`/profile/${postComment.userID?._id}`} className='commentUserName'>{postComment.userID?.username}</Link>\n                                                            </div>\n                                                            <div className='commentText'>\n                                                                <p>{postComment.commentText}</p>\n                                                            </div>\n                                                            <div className='commentDate'>\n                                                                <div>{formatDate(postComment.createdAt)}</div>\n                                                                <div>{formatTime(postComment.createdAt)}</div>\n                                                            </div>\n                                                        </div>\n\n                                                        {/* display replies for each comment */}\n                                                        {postComment.replies?.map((postReply) => (\n                                                            <div key={postReply._id} className='replies'>\n                                                                <div className='commentTop'>\n                                                                    <div className='commentUser'>\n                                                                        {postReply.userID?.profilePicture && (\n                                                                            <img className='replyUserImage'\n                                                                                src={postReply.userID.profilePicture}\n                                                                                alt=\"Profile\"\n                                                                            />\n                                                                        )}                                \n                                                                        <Link to={`/profile/${postReply.userID?._id}`} className='replyUserName'>{postReply.userID?.username}</Link>\n                                                                    </div>\n                                                                    <div className='replyText'>\n                                                                        <p>{postReply.replyText}</p>\n                                                                    </div>\n                                                                    <div className='replyDate'>\n                                                                        <div>{formatDate(postReply.createdAt)}</div>\n                                                                        <div>{formatTime(postReply.createdAt)}</div>\n                                                                        {postReply.userID._id === userId? (\n                                                                            <>\n                                                                                <button className='deletereplybtn' disabled={loading} onClick={() => handleDeleteReply(selectedPost._id, postComment._id, postReply._id)}> Delete Reply</button>\n                                                                            </>\n                                                                        ) : (\n                                                                            <>\n                                                                            </>\n                                                                        )}\n                                                                    </div>\n\n                                                                    \n                                                                </div>\n                                                            </div>\n                                                        ))}\n\n                                                        {/* check if comment belongs to user, and shows delete button */}\n                                                        <div className='commentBottom'>\n                                                            <button className='replybtn' disabled={loading} onClick={() => handleSelectComment(postComment._id)}>Reply</button>\n                                                            {postComment.userID._id === userId? (\n                                                                <>\n                                                                    <button className='deletereplybtn' disabled={loading} onClick={() => handleDeleteComment(selectedPost._id, postComment._id)}>Delete</button>\n                                                                </>\n                                                            ) : (\n                                                                <>\n                                                                </>\n                                                            )}\n                                                        </div>\n                                                        \n                                                        {/* check selected comment and shows reply button */}\n                                                        {replyBox && selectedComment === postComment._id ?(\n                                                            <>\n                                                                <div className='modalCommentButton'>\n                                                                    <input type='text' ref={replyRef} placeholder=\"Reply...\" className='commentText' required></input>\n                                                                    <button className='btn btn-dark' id='commentBtn' disabled={loading} onClick={() => handleaddReply(selectedPost._id, postComment._id)}>Add Reply</button>\n                                                                </div>\n                                                            </>\n                                                        ) : (\n                                                            <>\n                                                            </>\n                                                        )}\n\n                                                    </div>\n                                                ))}\n                                            </div>\n\n                                            {/* check selected post and shows add comment button */}\n                                            <div className='modalCommentButton'>\n                                                <input type='text' ref={commentRef} placeholder=\"Comment...\" className='commentText' required></input>\n                                                <button className='btn btn-dark' id='commentBtn' disabled={loading} onClick={() => handleaddComment(selectedPost._id)}>Add Comment</button>\n                                            </div>\n                                        </>\n                                    ) : <p>Loading....</p>}\n                                </div>\n                            </>\n                        ) : (\n                            <>\n                            </>\n                        )}\n\n                        {/* display engagment button (like, comment, superfuel) */}\n                        <div className='postEngagement'>\n                            {/* check if post has been liked by current user, and shows like/unlike button */}\n                            <div className='engagementColumn'>\n                                {post.likes.some((likedUser) => likedUser.userId === userId) ? (\n                                        <>\n                                            <button className='unlikebtn' disabled={loading} onClick={() => handleUnLike(post._id)}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1.7em\" height=\"1.7em\" viewBox=\"0 0 26 26\"><path d=\"M17.869 3.889c-2.096 0-3.887 1.494-4.871 2.524c-.984-1.03-2.771-2.524-4.866-2.524C4.521 3.889 2 6.406 2 10.009c0 3.97 3.131 6.536 6.16 9.018c1.43 1.173 2.91 2.385 4.045 3.729c.191.225.471.355.765.355h.058c.295 0 .574-.131.764-.355c1.137-1.344 2.616-2.557 4.047-3.729C20.867 16.546 24 13.98 24 10.009c0-3.603-2.521-6.12-6.131-6.12\"/></svg></button>\n                                        </>\n                                    ) : (\n                                        <>\n                                            <button className='likebtn' disabled={loading} onClick={() => handleLike(post._id)}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1.7em\" height=\"1.7em\" viewBox=\"0 0 26 26\"><path d=\"M17.869 3.889c-2.096 0-3.887 1.494-4.871 2.524c-.984-1.03-2.771-2.524-4.866-2.524C4.521 3.889 2 6.406 2 10.009c0 3.97 3.131 6.536 6.16 9.018c1.43 1.173 2.91 2.385 4.045 3.729c.191.225.471.355.765.355h.058c.295 0 .574-.131.764-.355c1.137-1.344 2.616-2.557 4.047-3.729C20.867 16.546 24 13.98 24 10.009c0-3.603-2.521-6.12-6.131-6.12\"/></svg></button>\n                                        </>\n                                )}\n                                <h3>{post.likes.length} LIKE</h3>\n\n                            </div>\n\n                            {/* shows comment button */}\n                            <div className='engagementColumn'>\n                                <button className='commentbtn' onClick={() => handleSelectPost(post)}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1.7em\" height=\"1.7em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M3 10.4c0-2.24 0-3.36.436-4.216a4 4 0 0 1 1.748-1.748C6.04 4 7.16 4 9.4 4h5.2c2.24 0 3.36 0 4.216.436a4 4 0 0 1 1.748 1.748C21 7.04 21 8.16 21 10.4v1.2c0 2.24 0 3.36-.436 4.216a4 4 0 0 1-1.748 1.748C17.96 18 16.84 18 14.6 18H7.414a1 1 0 0 0-.707.293l-2 2c-.63.63-1.707.184-1.707-.707V13zM9 8a1 1 0 0 0 0 2h6a1 1 0 1 0 0-2zm0 4a1 1 0 1 0 0 2h3a1 1 0 1 0 0-2z\" clip-rule=\"evenodd\"/></svg></button>\n                                <h3>{post.comments.length} Comment</h3>\n                            </div>\n\n                            {/* check if post has been superfuelled by current user, and shows superfuel/unsuperfuel button */}\n                            <div className='engagementColumn'>\n                                {post.superfuel.some((superFuelUser) => superFuelUser.userId === userId) ? (\n                                        <>\n                                            <button className='unsuperfuel' disabled={loading} onClick={() => handleUnSuperFuel(post._id, post.user._id)}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1.7em\" height=\"1.7em\" viewBox=\"0 0 16 16\"><path d=\"M1 2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v8a2 2 0 0 1 2 2v.5a.5.5 0 0 0 1 0V8h-.5a.5.5 0 0 1-.5-.5V4.375a.5.5 0 0 1 .5-.5h1.495c-.011-.476-.053-.894-.201-1.222a.97.97 0 0 0-.394-.458c-.184-.11-.464-.195-.9-.195a.5.5 0 0 1 0-1q.846-.002 1.412.336c.383.228.634.551.794.907c.295.655.294 1.465.294 2.081V7.5a.5.5 0 0 1-.5.5H15v4.5a1.5 1.5 0 0 1-3 0V12a1 1 0 0 0-1-1v4h.5a.5.5 0 0 1 0 1H.5a.5.5 0 0 1 0-1H1zm2.5 0a.5.5 0 0 0-.5.5v5a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 .5-.5v-5a.5.5 0 0 0-.5-.5z\"/></svg></button>\n                                        </>\n                                    ) : (\n                                        <>\n                                            <button className='superfuel' disabled={loading} onClick={() => handleSuperFuel(post._id, post.user._id)}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1.7em\" height=\"1.7em\" viewBox=\"0 0 16 16\"><path d=\"M1 2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v8a2 2 0 0 1 2 2v.5a.5.5 0 0 0 1 0V8h-.5a.5.5 0 0 1-.5-.5V4.375a.5.5 0 0 1 .5-.5h1.495c-.011-.476-.053-.894-.201-1.222a.97.97 0 0 0-.394-.458c-.184-.11-.464-.195-.9-.195a.5.5 0 0 1 0-1q.846-.002 1.412.336c.383.228.634.551.794.907c.295.655.294 1.465.294 2.081V7.5a.5.5 0 0 1-.5.5H15v4.5a1.5 1.5 0 0 1-3 0V12a1 1 0 0 0-1-1v4h.5a.5.5 0 0 1 0 1H.5a.5.5 0 0 1 0-1H1zm2.5 0a.5.5 0 0 0-.5.5v5a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 .5-.5v-5a.5.5 0 0 0-.5-.5z\"/></svg></button>\n                                        </>\n                                )}\n                                <h3>{post.superfuel.length} Superfuel</h3>\n                            </div>\n                        </div>\n                    </div>\n                ))}\n            </div> \n\n            {/* display message, when user reaches end of post's collection */}\n            {posts.length > 0 ? (\n                <>\n                    <p className=\"w-100 text-center mt-2 mb-2\" id=\"error_Msg\">⛔️ You Reached End Of The Road ⛔️</p>\n                </>\n            ):(\n                <>\n                </>\n            )}   \n\n        </>\n    )\n}\n\nexport default SeePost\n","/Users/sharusan/MeetMyCar/myapp/src/Layout.js",[],[],["140"],"/Users/sharusan/MeetMyCar/myapp/src/ToolBar.js",[],[],"/Users/sharusan/MeetMyCar/myapp/src/TitleBar.js",[],[],"/Users/sharusan/MeetMyCar/myapp/src/AddPost.js",[],[],"/Users/sharusan/MeetMyCar/myapp/src/EditPost.js",["141","142","143"],[],"// import hooks\nimport React, {useState, useEffect, useRef} from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport { useAuth } from './AuthContext'\n\nimport './AddPost_css.css'\n\nconst EditPost = () => {\n\n    const {postId} = useParams()\n\n    const titleRef = useRef()\n    const imageRef = useRef()\n    const descRef  = useRef()\n\n    const[userId, setuserId] = useState('')\n    const [username, setuserName] = useState('')\n    const [profilePicture, setprofilePicture] = useState('')\n\n    const [title, setTitle] = useState('')\n    const [image, setImage] = useState('')\n    const [desc, setDesc] = useState('')\n    const [vehicle, setVehicle] = useState([])\n\n    const [imageChange, setImageChange] = useState(false)\n    const [selectVehicle, setSelectedVehicle] = useState([])\n    const [oldSelectedVehicle, setOldSelectedVehicle] = useState([])\n\n\n    const {currentUser} = useAuth()\n\n    const [date, setDate] = useState('')\n    const [time, setTime] = useState('')\n\n    const [error, setError] = useState('')\n    const [loading, setLoading] = useState(false)\n\n    const navigate = useNavigate()\n\n    useEffect(() => {\n        async function fetchUserData(){\n            // fetches current user data, and stores the data (id, name, profilePic and vehicle) into useState, to be used throughout the page.\n            try{\n                // fetches the user data with firebase ID\n                const firebaseUID = currentUser.uid;\n    \n                const response = await fetch(`http://localhost:3001/users?userfb=${encodeURIComponent(firebaseUID)}`, {\n                    method: 'GET',\n                    headers: {\n                        'accept': 'application/json',\n                    },\n                });\n    \n                if (response.ok){\n                    const data = await response.json()\n\n                    // updates user's data states\n                    setuserId(data.userData._id)\n                    setuserName(data.userData.username)\n                    setprofilePicture(data.userData.profilePicture)\n                    setVehicle(data.userData.vehicles)\n    \n                    console.log(\"Fetched User Details\")\n                    return data\n                } else{\n                    const errorData = await response.json()\n                    throw new Error(errorData.message)\n                }\n            }catch (error){\n                console.error(\"Error Fetching User Data:\", error)\n            }\n        }\n        fetchUserData();\n    }, [currentUser.uid]);\n\n    useEffect(() => {\n        async function fetchPostData(){\n            // fetches the post data, and stores the data (title, img, desc and vehicle) into useState, to be used throughout the page.\n            try{\n                const response = await fetch(`http://localhost:3001/posts?postId=${encodeURIComponent(postId)}`, {\n                    method: 'GET',\n                    headers: {\n                        'accept': 'application/json',\n                    },\n                });\n    \n                if (response.ok){\n                    const data = await response.json()\n\n                    // updates post's data states\n                    setTitle(data.postData.title)\n                    setImage(data.postData.image)\n                    setDesc(data.postData.description)\n                    setSelectedVehicle(data.postData.vehicles)\n                    setOldSelectedVehicle(data.postData.vehicles)\n    \n                    console.log(\"Fetched Post Details\")\n                    return data\n                } else{\n                    const errorData = await response.json()\n                    throw new Error(errorData.message)\n                }\n            }catch (error){\n                console.error(\"Error Fetching Post Data:\", error)\n            }\n        }\n        fetchPostData();\n    }, []);\n\n    // shows the current time and date to the user\n    useEffect(() => {\n        const currentDateTime = () => {\n            const currentDate = new Date()\n            setDate(currentDate.toLocaleDateString())\n            setTime(currentDate.toLocaleTimeString())\n        }\n        currentDateTime()\n\n        const intervalId = setInterval(currentDateTime, 1000)\n        return () => clearInterval(intervalId)\n    }, [])\n\n    // handles form submission\n    async function handleUpdatePost(e){\n        e.preventDefault()\n\n        // validates the form's field has the correct length and not empty\n       if (titleRef.current.value.length < 2 ){\n            return setError(\"Title Too Short\")\n       }\n\n       if (titleRef.current.value.length > 30 ){\n            return setError(\"Title Too Long\")\n       }\n\n       if (descRef.current.value.length < 2 ){\n            return setError(\"Description Too Short\")\n       }\n\n\n       // check if the field is not the same as previous\n       if ((titleRef.current.value !== title) || (imageChange === true ) || (descRef.current.value !== desc) || (selectVehicle.vrn !== oldSelectedVehicle.vrn)) {\n            \n        // using useRef, it will capture the current value for each field and stores into FormData\n            const formData = new FormData();\n            formData.append('title', titleRef.current.value);\n            formData.append('image', imageRef.current.files[0])\n            formData.append('description', descRef.current.value);\n            formData.append('vehicleId', selectVehicle.vehicleId)\n            formData.append('vrn', selectVehicle.vrn)\n\n            try{\n                // updates the post with it's postId using the formData\n                setLoading(true)\n                setError('')\n\n                const response = await fetch(`http://localhost:3001/posts/edit?postId=${encodeURIComponent(postId)}`, {\n                    method: 'PUT',\n                    body: formData,\n                });\n\n                if (response.ok){\n                    // successful form submission, and navigates back to home page to see post\n                    console.log(\"Updated Post Data\")\n                    navigate('/')\n                } else{\n                    const errorData = await response.json()\n                    setError(\"Failed To Update Post Data\")\n                    console.error(\"Error Updating Post Data:\", error)\n                    throw new Error(errorData.message)\n                }\n            }catch (error){\n                console.error(\"Error Updating Post Data:\", error)\n                setError(\"Failed To Update Post Data\")\n            }\n            setLoading(false)\n        }else{\n            // if no changes in form, shows an error message\n            setError('No Changes To Post Data')\n            return\n        }\n    }\n\n    // using the vehicle options, user will select the vehicle the post is related to\n    function handleSelectVehicle(e){\n        const vehicle_Id= e.target.value;\n        const selectVehicle = vehicle.find(v => v.vehicleId === vehicle_Id)\n        setSelectedVehicle(selectVehicle);\n    };\n\n    // fetches the image input, and sets to the setImage state which can be shown on the form for the user\n    function handleImageInput(e){\n        setImage(URL.createObjectURL(e.target.files[0]))\n        setImageChange(true)\n    }\n\n    return (\n        <>\n            <div className='addPost'>\n                <h2 className=\"addPost_text\">Edit <span>Post</span></h2>\n                <form onSubmit={handleUpdatePost}>\n                    <div className='addHeading'>\n                        {/* User Details */}\n                        <div className='showUserDetails'>\n\n                            {profilePicture && (\n                                <img className='showUserImage'\n                                    src={profilePicture}\n                                    alt=\"Profile\"\n                                />\n                            )}\n                            \n                            <p className='showUserName'>{username}</p>\n                        </div>\n                        <div className='showTimeStamp'>\n                            <p>{date}</p>\n                            <p>{time}</p>\n                        </div>\n                    </div>\n\n                    {/* Form Fields */}\n                    <div className='add-post-content'>\n                        <input type='text' ref={titleRef} defaultValue={title} className='add_postTitle' ></input>\n                        <input type='file' ref={imageRef} defaultValue={image} placeholder='Insert Image' className='add_postImageBtn' onChange={handleImageInput} ></input> \n                        <img src={imageChange ? image : image} className='add_postImage'></img>\n\n                        <div className='add_postFooter'>\n                            {/* Shows all user vehicles for selection */}\n                            <select className='add_postVRN' onChange={handleSelectVehicle} value={selectVehicle?.vehicleId} required>\n                                    <option value=\"\" disabled>VRN</option>\n                                    {vehicle.map(vehicle => ( \n                                        <option key={vehicle.vehicleId} value={vehicle.vehicleId}> {vehicle.vrn} </option>\n                                    ))}\n                            </select>\n                            <input type='text' ref={descRef} defaultValue={desc} className='add_postDescription' ></input> \n                        </div>\n                    </div>\n                    <p className=\"w-100 text-center mt-3 mb-1\" id=\"error_Msg\">{error}</p>\n                    <button disabled={loading} className=\"addpostbtn\" type=\"submit\">Update Post</button>\n\n                </form>\n            </div>\n        </>\n    )\n}\n\nexport default EditPost","/Users/sharusan/MeetMyCar/myapp/src/Banner.js",[],[],"/Users/sharusan/MeetMyCar/myapp/src/Home_Layout.js",[],[],"/Users/sharusan/MeetMyCar/myapp/src/Garage.js",["144"],[],"import React, {useState, useEffect} from 'react'\nimport { Link, useParams } from 'react-router-dom'\nimport { useAuth } from './AuthContext'\nimport {Popup} from 'reactjs-popup'\n\nimport './Garage_css.css'\n\nconst Garage = () => {\n    const {userid} = useParams()\n\n    const[currentUserId, setCurrentUserId] = useState('')\n    const[profileUserId, setProfileUserId] = useState('')\n\n    const [profileWins, setProfileWins] = useState([])\n    const [profileLosts, setProfileLosts] = useState([])\n\n    const [vehicle, setVehicle] = useState([])\n    const [selectedVehicle, setSelectedVehicle] = useState('')\n    const [openModal, setOpenModal] = useState(false)\n    const [openWinModal, setOpenWinModal] = useState(false)\n    const [openLostModal, setOpenLostModal] = useState(false)\n    const [confirmDeleteVehicle, setconfirmDeleteVehicle] = useState(false)\n    const [showData, setData] = useState(true)\n\n    const {currentUser} = useAuth()\n\n    const [message, setMessage] = useState('')\n    const [error, setError] = useState('')\n    const [loading, setLoading] = useState(false)\n\n    useEffect(() => {\n        async function fetchGarageUserData(){\n            // fetches garage's user data, and stores the data into useState, to be used throughout the page.\n            try{\n                setError('')\n    \n                const response = await fetch(`http://localhost:3001/users?userid=${encodeURIComponent(userid)}`, {\n                    method: 'GET',\n                    headers: {\n                        'accept': 'application/json',\n                    },\n                });\n    \n                if (response.ok){\n                    const data = await response.json()\n\n                    // updates profile user's data states\n                    setProfileUserId(data.userData._id)\n\n                    // fetches garage's data for the profile's user, and stores the data into vehicles\n                    const vehicleData = await Promise.all(data.userData.vehicles.map(async (vehicle) => {\n                        if(vehicle?.vehicleId){\n                            const VehicleReponse = await fetch(`http://localhost:3001/vehicles?vehicleId=${encodeURIComponent(vehicle.vehicleId)}`, {\n                                method: 'GET',\n                                headers: {\n                                    'accept': 'application/json',\n                                },\n                            });\n\n                            if(VehicleReponse.ok){\n                                const vehicle_Data = await VehicleReponse.json()\n                                return vehicle_Data\n                            } else{\n                                console.error(\"Error Fetching Vehicle Data:\", error)\n                                setError(\"Error Fetching Your Vehicles. Try Again Later\")\n                                return null\n                            }\n                        }\n                    }))\n\n                    const vehicleWithData = vehicleData.filter(vehicle => vehicle !== null).reverse()\n                    setVehicle(vehicleWithData)\n\n                    setProfileWins(data.userData.winPoints)\n                    setProfileLosts(data.userData.lostPoints)\n    \n                    console.log(\"Fetched User Details\")\n                    return data\n                } else{\n                    const errorData = await response.json()\n                    throw new Error(errorData.message)\n                }\n            }catch (error){\n                console.error(\"Error Fetching User Data:\", error)\n                setError(\"Error Fetching User. Try Again Later\")\n            }\n        }\n        fetchGarageUserData();\n    }, [currentUser.uid]);\n\n    useEffect(() => {\n        async function fetchCurrentUserData(){\n            // fetches current user data, and stores the data into useState, to be used throughout the page.\n            try{\n                setError('')\n                // fetches the user data with firebase ID\n                const firebaseUID = currentUser.uid;\n\n                const response = await fetch(`http://localhost:3001/users?userfb=${encodeURIComponent(firebaseUID)}`, {\n                    method: 'GET',\n                    headers: {\n                        'accept': 'application/json',\n                    },\n                });\n\n                if (response.ok){\n                    const data = await response.json()\n\n                    // updates user's data states\n                    setCurrentUserId(data.userData._id)\n\n                    console.log(\"Fetched Current User Details\")\n                    return data\n                } else{\n                    const errorData = await response.json()\n                    setError(\"Failed To Fetch Current User Data\")\n                    throw new Error(errorData.message)\n                }\n            }catch (error){\n                console.error(\"Error Fetching Current User Data:\", error)\n                setError(\"Failed To Fetch Current User Data\")\n            }\n        }\n        fetchCurrentUserData();\n    }, [currentUser.uid]); \n\n    // handles select card to show vehicle\n    const handleSelectCard = (vehicle) => {\n        console.log(\"Selected:\", vehicle)\n        setSelectedVehicle(vehicle)\n        setconfirmDeleteVehicle(false)\n        setOpenModal(true)\n        setData(true)\n    }\n\n    // handle delete vehicle\n    async function handleDelete(vehicleId){\n\n        if (!confirmDeleteVehicle){\n            setconfirmDeleteVehicle(true)\n            return\n        }\n\n        setLoading(true)\n        setError('')\n        setMessage('')\n\n        try{\n            const firebaseUID = currentUser.uid;\n\n            // delete vehicle in user's account\n            const response = await fetch(`http://localhost:3001/users/update?userfb=${encodeURIComponent(firebaseUID)}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({vehicleIdRemove: vehicleId})\n            });\n\n            // refresh page, to show updated vehicle collection\n            if (response.ok){\n                console.log(\"Deleted Vehicle\")\n                setMessage(\"Vehicle Deleted\")\n                setOpenModal(false)\n                setTimeout(() => {\n                    window.location.reload(false);\n                }, 1000)\n            } else{\n                const errorData = await response.json()\n                setError(\"Failed To Delete Vehicle\")\n                console.error(\"Error Deleting Vehicle:\", error)\n                throw new Error(errorData.message)\n            }\n        }catch (error){\n            console.error(\"Error Deleting Vehicle:\", error)\n            setError(\"Failed To Delete Vehicle\")\n        }finally{\n            setLoading(false)\n        }\n    }\n\n    return (\n        <>\n            <div className='showGarage'>        \n                <header className='garageHeader'>\n                    <h1 id=\"login_text\">\n                        Garage\n                        <p id=\"slogan_text\">Check Out Your Vehicles</p>\n                    </h1>\n\n                    <div className='showUserData'>\n                        {/* display num of wins and losts */}\n                        <div className='showUserDataNum'>\n                            <p> <span>{vehicle.length}</span> Vehicles</p>\n                            <p onClick={() => setOpenWinModal(true)}> <span>{profileWins.length}</span> Wins</p>\n                            <p onClick={() => setOpenLostModal(true)}> <span>{profileLosts.length}</span> Losts</p>\n                        </div>\n\n                        {/* check if garage belongs to current user's account */}\n                        {currentUserId === profileUserId ? (\n                            <Link to=\"/registervehicle\" className=\"btn btn-dark\" id='checkbtn'> Add Vehicle</Link>  \n                        ) : (\n                            <>\n                            </>\n                        )}\n                    </div>\n                   \n                </header>   \n\n                <p className=\"w-100 text-center mt-3 mb-1\" id=\"success_Msg\">{message}</p>\n                <p className=\"w-100 text-center mt-3 mb-1\" id=\"error_Msg\">{error}</p>\n\n                {/* displays all vehicle as cards */}\n                <div className='Cards'>\n                    {vehicle.map((vehicles, index) => (\n                        <div key={index}  className='carCard' onClick={() => handleSelectCard(vehicles)}>\n                                <div className='cardHeader'>\n                                    <h3>{vehicles.vehicleData?.vehicleInfo?.VehicleRegistration?.MakeModel}</h3>\n                                    <Link className='link' to={`/race/${userid}`}>{vehicles.vehicleData?.vrn}</Link>\n                                </div>\n\n                                <div className='cardImage'>\n                                    <img src={vehicles.vehicleData?.image} alt='Vehicle'></img>\n                                </div>\n\n                                {/* display vehicle key info */}\n                                <div className='cardFooter'>\n                                    <div>\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"2em\" height=\"2em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M13 19.92c1.8-.22 3.35-.97 4.65-2.27c1.3-1.3 2.05-2.85 2.27-4.65h-3c-.22 1-.68 1.84-1.38 2.54c-.7.7-1.54 1.16-2.54 1.38zM10 8h4l3 3h2.92c-.25-1.95-1.13-3.62-2.65-5C15.76 4.66 14 4 12 4c-2 0-3.76.66-5.27 2c-1.52 1.38-2.4 3.05-2.65 5H7zm1 11.92v-3c-1-.22-1.84-.68-2.54-1.38c-.7-.7-1.16-1.54-1.38-2.54h-3c.22 1.77.97 3.3 2.27 4.6c1.3 1.3 2.85 2.07 4.65 2.32M12 2c2.75 0 5.1 1 7.05 2.95C21 6.9 22 9.25 22 12s-1 5.1-2.95 7.05C17.1 21 14.75 22 12 22s-5.1-1-7.05-2.95C3 17.1 2 14.75 2 12s1-5.1 2.95-7.05C6.9 3 9.25 2 12 2\"/></svg> \n                                        <p>{vehicles.vehicleData?.vehicleInfo?.VehicleRegistration?.TransmissionType}</p>\n                                    </div>\n\n                                    <div>\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"2em\" height=\"2em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M7 18S4 10 4 6s2-4 2-4h1s1 0 1 1s-1 1-1 3s3 4 3 7s-3 5-3 5m5-1c-1 0-4 2.5-4 2.5c-.3.2-.2.5 0 .8c0 0 1 1.8 3 1.8h6c1.1 0 2-.9 2-2v-1c0-1.1-.9-2-2-2h-5Z\"/></svg>\n                                        <p>{vehicles.vehicleData?.vehicleInfo?.VehicleRegistration?.SeatingCapacity} Seats</p>\n                                    </div>\n                                    \n                                    <div>\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\"><path fill=\"currentColor\" d=\"M1 2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v8a2 2 0 0 1 2 2v.5a.5.5 0 0 0 1 0V8h-.5a.5.5 0 0 1-.5-.5V4.375a.5.5 0 0 1 .5-.5h1.495c-.011-.476-.053-.894-.201-1.222a.97.97 0 0 0-.394-.458c-.184-.11-.464-.195-.9-.195a.5.5 0 0 1 0-1q.846-.002 1.412.336c.383.228.634.551.794.907c.295.655.294 1.465.294 2.081V7.5a.5.5 0 0 1-.5.5H15v4.5a1.5 1.5 0 0 1-3 0V12a1 1 0 0 0-1-1v4h.5a.5.5 0 0 1 0 1H.5a.5.5 0 0 1 0-1H1zm2.5 0a.5.5 0 0 0-.5.5v5a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 .5-.5v-5a.5.5 0 0 0-.5-.5z\"/></svg>\n                                        <p>{vehicles.vehicleData?.vehicleInfo?.VehicleRegistration?.FuelType}</p>\n                                    </div>                        \n                                </div>\n                        </div>\n                    ))}\n                </div>   \n\n                {/* display modal for specific vehicle */}\n                <Popup open={openModal} \n                        closeOnDocumentClick onClose={() => setOpenModal(false)} className='Popup'\n                        overlayStyle={{\n                            background: 'rgba(0, 0, 0, 0.2)', \n                            transition: 'background 0.5s ease-in-out',\n                        }}\n                >\n                    <div className='Modal'>\n                        {selectedVehicle ? (\n                            <>\n                                <div className='modalHeader'>\n                                    {/* display vehicle vrn and race button */}\n                                    <div>\n                                        <h3>{selectedVehicle.vehicleData?.vehicleInfo?.VehicleRegistration?.MakeModel}</h3>\n                                        <p className='raceTextGarage'>Race Me</p>\n                                        <Link className='link' to={`/race/${userid}`}>{selectedVehicle.vehicleData?.vrn}</Link>\n                                    </div>\n\n                                    {/* display history/information button */}\n                                    {showData ? (\n                                        <>\n                                            <button className=\"btn btn-dark\" onClick={() => setData(false)}>History</button>\n                                        </>\n                                    ):  \n                                        <>\n                                            <button className=\"btn btn-dark\" onClick={() => setData(true)}>Information</button>\n                                        </>\n                                    }\n                                </div> \n\n                                <div className='modalImage'>\n                                    <img src={selectedVehicle.vehicleData?.image} alt='Vehicle'></img>\n                                </div>\n\n                                {/* display vehicle data */}\n                                <div className='modalData'>\n                                    {showData ? (\n                                        <>\n                                            <div className='line'> \n                                                <span className='lineText'>Information</span>\n                                            </div>\n\n                                            <div className='dataInfo'>\n                                                <div>\n                                                    <h4 className='info_title'>Colour</h4>\n                                                    <p className='info_data'>{selectedVehicle.vehicleData?.vehicleInfo?.VehicleRegistration?.Colour}</p>\n                                                </div>\n                                                <div>\n                                                    <h4 className='info_title'>Year</h4>\n                                                    <p className='info_data'>{selectedVehicle.vehicleData?.vehicleInfo?.VehicleRegistration?.YearOfManufacture}</p>\n                                                </div>\n\n                                                <div>\n                                                    <h4 className='info_title'>Door</h4>\n                                                    <p className='info_data'>{selectedVehicle.vehicleData?.vehicleInfo?.SmmtDetails?.NumberOfDoors}</p>\n                                                </div>\n                                                <div>\n                                                    <h4 className='info_title'>Seat</h4>\n                                                    <p className='info_data'>{selectedVehicle.vehicleData?.vehicleInfo?.VehicleRegistration?.SeatingCapacity}</p>\n                                                </div>\n\n                                                <div>\n                                                    <h4 className='info_title'>Transmission</h4>\n                                                    <p className='info_data'>{selectedVehicle.vehicleData?.vehicleInfo?.VehicleRegistration?.Transmission}</p>\n                                                </div> \n                                                <div>\n                                                    <h4 className='info_title'>Fuel</h4>\n                                                    <p className='info_data'>{selectedVehicle.vehicleData?.vehicleInfo?.VehicleRegistration?.FuelType}</p>\n                                                </div> \n                                            </div> \n\n                                            <div className='line'> \n                                                <span className='lineText'>Performance</span>\n                                            </div>\n\n                                            <div className='dataInfo'>\n                                                <div>\n                                                    <h4 className='info_title'>BrakeHorse</h4>\n                                                    <p className='info_data'>{selectedVehicle.vehicleData?.vehicleInfo?.Performance?.Power?.Bhp} BHP</p>\n                                                </div>\n                                                <div>\n                                                    <h4 className='info_title'>Torque</h4>\n                                                    <p className='info_data'>{selectedVehicle.vehicleData?.vehicleInfo?.Performance?.Torque?.Nm} Nm</p>\n                                                </div>\n\n                                                <div>\n                                                    <h4 className='info_title'>Max Speed</h4>\n                                                    <p className='info_data'>{selectedVehicle.vehicleData?.vehicleInfo?.Performance?.MaxSpeed?.Mph} MPH</p>\n                                                </div>\n                                                <div>\n                                                    <h4 className='info_title'>MPG</h4>\n                                                    <p className='info_data'>{selectedVehicle.vehicleData?.vehicleInfo?.Consumption?.Combined?.Mpg}</p>\n                                                </div>\n                                            </div> \n\n                                            <div className='line'> \n                                                <span className='lineText'>Valuation</span>\n                                            </div>\n\n                                            <div className='dataValue'>\n                                                <div>\n                                                    <h4 className='info_title'>Auction</h4>\n                                                    <p className='info_data'>£{selectedVehicle.vehicleData?.vehicleValue?.ValuationList?.Auction}</p>\n                                                    {/* calculates profit/loss percentage */}\n                                                    <p className='info_change'> &#8595; {Math.round(((selectedVehicle.vehicleData?.vehicleValue?.ValuationList.OTR) - (selectedVehicle.vehicleData?.vehicleValue?.ValuationList?.Auction)) / (selectedVehicle.vehicleData?.vehicleValue?.ValuationList.OTR) * 100) }%</p>\n                                                </div>\n                                                <div>\n                                                    <h4 className='info_title'>Trade</h4>\n                                                    <p className='info_data'>£{selectedVehicle.vehicleData?.vehicleValue?.ValuationList?.TradeAverage}</p>\n                                                    {/* calculates profit/loss percentage */}\n                                                    <p className='info_change'> &#8595; {Math.round(((selectedVehicle.vehicleData?.vehicleValue?.ValuationList?.OTR) - (selectedVehicle.vehicleData?.vehicleValue?.ValuationList?.TradeAverage)) / (selectedVehicle.vehicleData?.vehicleValue?.ValuationList.OTR) * 100) }%</p>\n                                                </div>\n\n                                                <div>\n                                                    <h4 className='info_title'>Private</h4>\n                                                    <p className='info_data'>£{selectedVehicle.vehicleData?.vehicleValue?.ValuationList?.PrivateAverage}</p>\n                                                    {/* calculates profit/loss percentage */}\n                                                    <p className='info_change'> &#8595; {Math.round(((selectedVehicle.vehicleData?.vehicleValue?.ValuationList?.OTR) - (selectedVehicle.vehicleData?.vehicleValue?.ValuationList?.PrivateAverage)) / (selectedVehicle.vehicleData?.vehicleValue?.ValuationList.OTR) * 100) }%</p>\n                                                </div>\n                                            </div>\n                                            <div className='dataValueFooter'>\n                                                <p>*Compared To OTR(On The Road) Price*</p>\n                                            </div>\n                                        </>\n                                    ): \n                                        <>  \n                                            {/* display tick/cross for valid MOT and Tax */}\n                                            <div className='dataCheckList'>\n                                                <div className='dataCheck'>\n                                                    <label> MOT </label>\n                                                    <span>{selectedVehicle.vehicleData?.vehicleHistory?.mot?.motStatus === 'Valid' ? '✅' : '❌'}</span>\n                                                </div>\n                                                \n                                                <div className='dataCheck'>\n                                                    <label> TAX </label>\n                                                    <span>{selectedVehicle.vehicleData?.vehicleHistory?.tax?.taxStatus === 'Taxed' ? '✅' : '❌'}</span>\n                                                </div>\n                                            </div>\n\n                                            <div className='line'> \n                                                <span className='lineText'>MOT</span>\n                                            </div>\n\n                                            <div className='historyInfo'>\n                                                <div className='dataMOT'>\n                                                    <div className='motHeader'>\n                                                        <p>Days: <span>{selectedVehicle.vehicleData?.vehicleMOT?.mot?.days}</span></p>\n                                                        <p>Due: <span>{selectedVehicle.vehicleData?.vehicleMOT?.mot?.motDueDate}</span></p>\n                                                    </div>\n\n                                                    <div className='motContainer'>\n                                                        {selectedVehicle.vehicleData?.vehicleMOT?.motHistory.map((mot, index) => (\n\n                                                            <div key={index} className='motList'>\n                                                                <div className='motRow'>\n                                                                    <h4 className='mot_test'>{mot.testResult}</h4>\n                                                                    <p className='mot_num'> {mot.motTestNumber}</p>\n                                                                </div>\n                                                                <div className='motRow'>\n                                                                    <h4 className='mot_mile'>Mileage: <span>{mot.odometerValue}</span></h4>\n                                                                    <p className='mot_date'>{mot.completedDate}</p>\n                                                                </div>\n\n                                                                {mot.rfrAndComments?.map((motFailed, f_index) => (\n\n                                                                    <div key={f_index}>\n                                                                        <h4 className='mot_fail_type'>{motFailed.type}</h4>\n                                                                        <p className='mot_fail_text'>{motFailed.text}</p>\n                                                                    </div>\n                                                                ))}\n                                                                <div className='motLine'> </div>\n\n                                                            </div>\n                                                        ))} \n                                                    </div>  \n                                                </div>\n\n                                                <div className='line'> \n                                                    <span className='lineText'>Change</span>\n                                                </div>\n\n                                                <div className='dataValue'>\n                                                    <div>\n                                                        <h4 className='info_title'>Owners</h4>\n                                                        <p className='change_data'>{selectedVehicle.vehicleData?.vehicleInfo?.VehicleHistory.V5CCertificateCount}</p>\n                                                    </div>\n                                                    <div>\n                                                        <h4 className='info_title'>Plate</h4>\n                                                        <p className='change_data'>{selectedVehicle.vehicleData?.vehicleInfo?.VehicleHistory.PlateChangeCount}</p>\n                                                    </div>\n\n                                                    <div>\n                                                        <h4 className='info_title'>Colour</h4>\n                                                        <p className='change_data'>{selectedVehicle.vehicleData?.vehicleInfo?.VehicleHistory.ColourChangeDetails.NumberOfPreviousColours}</p>\n                                                    </div>\n                                                </div>\n\n                                                <div className='line'> \n                                                    <span className='lineText'>Tax Price</span>\n                                                </div>\n\n                                                <div className='motHeader'>\n                                                        <p>Days: <span>{selectedVehicle.vehicleData?.vehicleHistory?.tax?.days}</span></p>\n                                                        <p>Due: <span>{selectedVehicle.vehicleData?.vehicleHistory?.tax?.taxDueDate}</span></p>\n                                                    </div>\n\n                                                <div className='dataValue'>\n                                                    <div>\n                                                        <h4 className='info_title'>6 Months</h4>\n                                                        <p className='change_data'>{selectedVehicle.vehicleData?.vehicleInfo?.vedRate?.Standard?.SixMonth || 0}</p>\n                                                    </div>\n                                                    <div>\n                                                        <h4 className='info_title'>12 Months</h4>\n                                                        <p className='change_data'>{selectedVehicle.vehicleData?.vehicleInfo?.vedRate?.Standard?.TwelveMonth}</p>\n                                                    </div>\n                                                </div>\n\n\n                                            </div> \n                                        </>\n                                    }\n                                </div>\n\n                                {/* check if vehicle belongs to current user and show delete button */}\n                                {currentUserId === profileUserId ?(\n                                    <>\n\n                                        {confirmDeleteVehicle ? (\n                                            <>\n                                                <button disabled={loading}  className=\"btn btn-outline-danger w-100 mt-1\" variant=\"danger\" onClick={() => handleDelete(selectedVehicle.vehicleData?._id)}>Confirm Delete</button>\n                                            </>\n                                        ) :(\n                                            <>\n                                                <button disabled={loading}  className=\"btn btn-outline-dark w-100 mt-1\" type=\"submit\"  onClick={() => handleDelete(selectedVehicle.vehicleData?._id)}>Delete Vehicle</button>\n                                            </>\n                                        )}\n                                    </>\n                                ) : (\n                                    <>\n                                    </>\n                                )}\n                                    \n                            </>\n                        ) : <p>Loading....</p>}\n                    </div>\n                </Popup> \n\n                {/* display win modal */}\n                <Popup open={openWinModal} closeOnDocumentClick onClose={() => setOpenWinModal(false)} className='Popup'>\n                    <div className='FollowModal'>\n                        <div className='modalFollowHeader'>\n                            <div>\n                                <h3>Wins</h3>\n                            </div>\n                        </div> \n\n                        <div className='line'></div>\n\n                        {/* shows vehicle vrn the current user won against */}\n                        <div className='modalFollowData'>\n                            {profileWins.map((profileWin, index) => (\n                                <div key={index} >\n                                    <p>{profileWin.vrn}</p>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                </Popup>\n\n                {/* display lost modal */}\n                <Popup open={openLostModal} closeOnDocumentClick onClose={() => setOpenLostModal(false)} className='Popup'>\n                    <div className='FollowModal'>\n                        <div className='modalFollowHeader'>\n                            <div>\n                                <h3>Losts</h3>\n                            </div>\n                        </div> \n\n                        <div className='line'></div>\n\n                        {/* shows vehicle vrn the current user lost against */}\n                        <div className='modalFollowData'>\n                            {profileLosts.map((profileLost, index) => (\n                                <div key={index} >\n                                    <p>{profileLost.vrn}</p>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                </Popup>      \n            </div>\n        </>\n    )\n}\n\nexport default Garage\n","/Users/sharusan/MeetMyCar/myapp/src/Profile.js",["145","146"],[],"import React, {useState, useEffect, useRef} from 'react'\nimport { Link, useParams, useNavigate } from 'react-router-dom'\nimport { useAuth } from './AuthContext'\nimport {Popup} from 'reactjs-popup'\n\nimport './Profile_css.css'\n\nconst Profile = () => {\n    const {currentUser} = useAuth()\n    const {userid, userName} = useParams()\n\n    const [currentUserId, setCurrentUserId] = useState('')\n    const [currentUserName, setCurrentUserName] = useState('')\n    const [currentUserFollowing, setCurrentUserFollowing] = useState('')\n    const [currentUserSF, setCurrentUserSF] = useState('')\n\n    const [userId, setProfileUserId] = useState('')\n    const [username, setProfileuserName] = useState('')\n    const [profilePicture, setProfileprofilePicture] = useState('')\n\n    const [profileSF, setProfileSF] = useState('')\n    const [followers, setProfileFollowers] = useState([])\n    const [following, setProfileFollowing] = useState([])\n    const [openUserRecommend, setOpenUserRecommend] = useState(false)\n\n    const [allUser, setAllUser] = useState([])\n    const [posts, setPost] = useState([])\n    const [refreshData, setRefreshData] = useState(false)\n    const [showfollowbtn, setFollowbtn] = useState(true)\n    const [selectedPost, setselectedPost] = useState('')\n    const [selectedComment, setSelectedComment] = useState(null)\n    const [openModal, setOpenModal] = useState(false)\n    const [openFollowerModal, setOpenFollowerModal] = useState(false)\n    const [openFollowingModal, setOpenFollowingModal] = useState(false)\n    const [confirmDeletePost, setconfirmDeletePost] = useState(false)\n    const [dropdown, setDropDown] = useState(true)\n    const [followBtnCard, showFollowBtnCard] = useState(true)\n\n    const commentRef = useRef()\n    const replyRef = useRef()\n    const [commentBox, showCommentBox] = useState(false)\n    const [showReplyBox, setShowReplyBox] = useState(false)\n\n    const [message, setMessage] = useState('')\n    const [error, setError] = useState('')\n    const [commentError, setCommentError] = useState('')\n    const [loading, setLoading] = useState(false)\n    const navigate = useNavigate()\n\n    useEffect(() => {\n        async function fetchProfileData(){\n            // fetches profile's user data, and stores the data into useState, to be used throughout the page.\n            try{\n                setError('')\n\n                let query\n\n                // fetches the user data with userid/username\n                if (userid){\n                    query = `userid=${encodeURIComponent(userid)}`\n                } else{\n                    query = `username=${encodeURIComponent(userName)}`\n                }\n\n                console.log(query)\n    \n                const response = await fetch(`http://localhost:3001/users?${query}`, {\n                    method: 'GET',\n                    headers: {\n                        'accept': 'application/json',\n                    },\n                });\n    \n                if (response.ok){\n                    const data = await response.json()\n\n                    // updates profile user's data states\n                    setProfileUserId(data.userData._id)\n                    setProfileuserName(data.userData.username)\n                    setProfileprofilePicture(data.userData.profilePicture)\n                    setProfileSF(data.userData.superfuel)\n                    setProfileFollowers(data.userData.followers)\n                    setProfileFollowing(data.userData.following)\n\n                    // fetches post's data for the profile's user, and stores the data into post\n                    const postData = await Promise.all(data.userData.posts.map(async (post) => {\n                        if(post?.postId){\n                            const PostReponse = await fetch(`http://localhost:3001/posts?postId=${encodeURIComponent(post.postId)}`, {\n                                method: 'GET',\n                                headers: {\n                                    'accept': 'application/json',\n                                },\n                            });\n\n                            if(PostReponse.ok){\n                                const post_Data = await PostReponse.json()\n                                return post_Data\n                            } else{\n                                console.error(\"Error Fetching Posts:\", error)\n                                setError(\"Error Fetching Your Posts. Try Again Later\")\n                                return null\n                            }\n                        }\n                    }))\n\n                    const postWithData = postData.filter(post => post !== null).reverse()\n                    setPost(postWithData)\n    \n                    console.log(\"Fetched User Details\")\n                    return data\n                } else{\n                    const errorData = await response.json()\n                    throw new Error(errorData.message)\n                }\n            }catch (error){\n                console.error(\"Error Fetching User Data:\", error)\n                setError(\"Error Fetching User. Try Again Later\")\n            }\n        }\n        fetchProfileData()\n    }, [currentUser.uid, userid, refreshData])\n\n    useEffect(() => {\n        async function fetchCurrentUserData(){\n            // fetches current user data, and stores the data into useState, to be used throughout the page.\n            try{\n                setError('')\n                // fetches the user data with firebase ID\n                const firebaseUID = currentUser.uid;\n\n                const response = await fetch(`http://localhost:3001/users?userfb=${encodeURIComponent(firebaseUID)}`, {\n                    method: 'GET',\n                    headers: {\n                        'accept': 'application/json',\n                    },\n                });\n\n                if (response.ok){\n                    const data = await response.json()\n                    \n                    // updates user's data states\n                    setCurrentUserId(data.userData._id)\n                    setCurrentUserName(data.userData.username)\n                    setCurrentUserFollowing(data.userData.following)\n                    setCurrentUserSF(data.userData.superfuel)\n\n                    console.log(\"Fetched Current User Details\")\n                    return data\n                } else{\n                    const errorData = await response.json()\n                    setError(\"Failed To Fetch Current User Data\")\n                    throw new Error(errorData.message)\n                }\n            }catch (error){\n                console.error(\"Error Fetching Current User Data:\", error)\n                setError(\"Failed To Fetch Current User Data\")\n            }\n        }\n        fetchCurrentUserData();\n    }, [currentUser.uid]); \n\n    useEffect(() => {\n        // fetches all user data, and stores the data into useState\n        async function fetchAllUserData(){\n            try{\n                setError('')\n\n                const response = await fetch(`http://localhost:3001/users/all`, {\n                    method: 'GET',\n                    headers: {\n                        'accept': 'application/json',\n                    },\n                });\n\n                if (response.ok){\n                    const data = await response.json()\n\n                    // fetches mutual friends that current user is not following, to show as recommendation\n                    if (currentUserFollowing){\n                        // using all users, it will filter users that are being followed by the current user, and get their followerings\n                        const findMutualFriends = data.allUserData.filter((user) => user.following.some(userFollowings => currentUserFollowing.some(myFollowings => userFollowings.followeringId === myFollowings.followeringId)))\n                        // filter mutual friends and remove the friends that are being followed already by current user\n                        const filteredMutualFriends = findMutualFriends.filter(user => !currentUserFollowing.some(myFollowings => user._id === myFollowings.followeringId));\n                        // remove itself from the list of mutual friends\n                        const mutualFriends = filteredMutualFriends.filter(user => user._id !== userId);\n                        console.log('Check Mutual Friends', mutualFriends)   \n    \n                        // stores valid mutual friends into state\n                        setAllUser(mutualFriends)\n                        setOpenUserRecommend(true)\n                    } else{\n                        setOpenUserRecommend(false)\n                    }\n\n                    console.log(\"Fetched All User Details\")\n                    return data\n                } else{\n                    const errorData = await response.json()\n                    setError(\"Failed To Fetch All User Data\")\n                    throw new Error(errorData.message)\n                }\n            }catch (error){\n                console.error(\"Error Fetching All User Data:\", error)\n                setError(\"Failed To Fetch All User Data\")\n            }\n        }\n        fetchAllUserData();\n    }, [currentUserFollowing]); \n\n    // shows the created's time and date of the post\n    const formatDate = (timestamps) => {\n        const date = new Date(timestamps);\n        return date.toLocaleDateString()\n    }\n    const formatTime = (timestamps) => {\n        const time = new Date(timestamps);\n        return time.toLocaleTimeString()\n    }\n\n    // handles select card to show post\n    const handleSelectCard = (post) => {\n        console.log(\"Selected:\", post)\n        setselectedPost(post)\n        setOpenModal(true)\n        setconfirmDeletePost(false)\n        showCommentBox(false)\n    }\n\n    // handles select post's card to show comments \n    const handleSelectCardComment = (selectedPost) => {\n        console.log(\"Selected CommentPost:\", selectedPost)\n        showCommentBox(!commentBox)\n    }\n\n    // handles select post to show comment\n    const handleSelectComment = (selectedcomment) => {\n        console.log(\"Selected Comment:\", selectedcomment)\n        setSelectedComment(selectedcomment)\n        setShowReplyBox(!showReplyBox)\n    }\n\n    // handle edit for post\n    const handleEdit = (postId) => {\n        navigate(`/editpost/${postId}`)\n    }\n\n    // handle delete  post\n    async function handleDelete(postId){\n\n        if (!confirmDeletePost){\n            setconfirmDeletePost(true)\n            return\n        }\n\n        setLoading(true)\n        setError('')\n        setMessage('')\n\n        try{\n            const firebaseUID = currentUser.uid;\n\n            // delete posts in user's account\n            const response = await fetch(`http://localhost:3001/users/update?userfb=${encodeURIComponent(firebaseUID)}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({postIdRemove: postId})\n            });\n\n            if (!response.ok){\n                const errorData = await response.json()\n                setError(\"Failed To Delete Post\")\n                console.error(\"Error Deleting Post On User:\", error)\n                throw new Error(errorData.message)\n            }\n\n            // delete posts in Post database\n            const deletePost_response = await fetch(`http://localhost:3001/posts/delete?postId=${encodeURIComponent(postId)}`, {\n                method: 'DELETE',\n            });\n\n            if(!deletePost_response.ok){\n                const errorData = await response.json()\n                setError(\"Failed To Delete Post\")\n                console.error(\"Error Deleting Post: On Post Server\", error)\n                throw new Error(errorData.message)\n            }\n\n            // removes superfuel points for user\n            const userSFResponse = await fetch(`http://localhost:3001/users/update?userfb=${encodeURIComponent(firebaseUID)}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({removeSuperFuel: -1})\n            });\n\n            if (!userSFResponse.ok){\n                console.error(\"Error Updating User's SuperFuel:\")\n            }\n\n            // refresh page, to show updated post collection\n            console.log(\"Deleted Post\")\n            setMessage(\"Post Deleted\")\n            setOpenModal(false)\n            setTimeout(() => {\n                window.location.reload(false);\n            }, 1000)\n\n        }catch (error){\n            console.error(\"Error Deleting Post:\", error)\n            setError(\"Failed To Delete Post\")\n        }finally{\n            setLoading(false)\n        }\n    }\n\n    // fetches current user's followings\n    useEffect(() => {\n        function fetchCurrentUserFollowing(){\n            try{\n                setError('')\n                const isFollowing = currentUserFollowing.some((followingUser) => followingUser.followeringId === userId)\n                console.log(\"Is Following:\", isFollowing)\n                // check if following, and shows follow/unfollow button\n                if(isFollowing){\n                    setFollowbtn(false)\n                }\n            }catch (error){\n                console.error(\"Error Checking if Following:\", error)\n                setError(\"Failed to check if user is following\")\n            }\n        }\n        fetchCurrentUserFollowing()\n    }, [currentUserFollowing, userId, refreshData])\n\n    // handles follow\n    async function handleFollow(userIDFollow, userNameFollow){\n\n        setLoading(true)\n        setError('')\n        setMessage('')\n\n        try{\n            const firebaseUID = currentUser.uid;\n\n            // adds profile's user as followering to current user\n            const response = await fetch(`http://localhost:3001/users/update?userfb=${encodeURIComponent(firebaseUID)}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({followeringId: userIDFollow, followeringName: userNameFollow})\n            });\n\n            if (!response.ok){\n                const errorData = await response.json()\n                setError(\"Failed To Follow Account\")\n                console.error(\"Error Following Account:\", error)\n                throw new Error(errorData.message)  \n            }\n\n            // adds current's user as follower to profile user\n            const Followersresponse = await fetch(`http://localhost:3001/users/update?userid=${encodeURIComponent(userIDFollow)}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({followersId: currentUserId, followersname: currentUserName})\n            });\n\n            if (!Followersresponse.ok){\n                const errorData = await response.json()\n                setError(\"Failed To Update User Followers\")\n                console.error(\"Error Updating User Followers:\", error)\n                throw new Error(errorData.message)  \n            }\n\n            // renders follow list and shows unfollow button\n            setRefreshData(!refreshData)\n            setFollowbtn(false)\n\n        }catch (error){\n            console.error(\"Error Following Account:\", error)\n            setError(\"Failed To Follow Account\")\n        }finally{\n            setLoading(false)\n        }\n    }\n\n    // handles unfollow\n    async function handleUnfollow(userIDFollow){\n\n        setLoading(true)\n        setError('')\n        setMessage('')\n\n        try{\n            const firebaseUID = currentUser.uid;\n\n            // remove profile's user as followering to current user\n            const response = await fetch(`http://localhost:3001/users/update?userfb=${encodeURIComponent(firebaseUID)}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({followingtoRemove: userIDFollow})\n            });\n\n            if (!response.ok){\n                const errorData = await response.json()\n                setError(\"Failed To Unfollow Account\")\n                console.error(\"Error Unfollowing Account:\", error)\n                throw new Error(errorData.message)  \n            }\n\n            // remove current's user as follower to profile user\n            const Followersresponse = await fetch(`http://localhost:3001/users/update?userid=${encodeURIComponent(userIDFollow)}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({followersToRemove: currentUserId})\n            });\n\n            if (!Followersresponse.ok){\n                const errorData = await response.json()\n                setError(\"Failed To Update User Followers\")\n                console.error(\"Error Updating User Followers:\", error)\n                throw new Error(errorData.message)  \n            }\n\n            // renders follow list and shows follow button\n            setRefreshData(!refreshData)\n            setFollowbtn(true)\n\n        }catch (error){\n            console.error(\"Error Unfollowing Account:\", error)\n            setError(\"Failed To Unfollow Account\")\n        }finally{\n            setLoading(false)\n        }\n    }\n\n    // handle like post\n    async function handleLike(postId) {\n        try{\n            setError('')\n            setLoading(true)\n\n            // add like to post database\n            const response = await fetch(`http://localhost:3001/posts/edit?postId=${encodeURIComponent(postId)}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({addUserIdLike: userId})\n            });\n\n            if (!response.ok){\n                console.error(\"Error Updating Like Post:\")\n            }\n\n            console.log(\"Updated Like Post\")\n        }catch (error){\n            console.error(\"Error Updating Like Post:\")\n            setError(\"Error Updating Like For Post. Try Again Later\")\n        }\n        setLoading(false)\n    }\n\n    // handle unlike post\n    async function handleUnLike(postId) {\n        try{\n            setError('')\n            setLoading(true)\n\n            // remove like from post database\n            const response = await fetch(`http://localhost:3001/posts/edit?postId=${encodeURIComponent(postId)}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({removeUserIdLike: userId})\n            });\n\n            if (!response.ok){\n                console.error(\"Error Updating Like Post:\")\n            }\n            console.log(\"Updated Like Post\")\n        }catch (error){\n            console.error(\"Error Updating Like Post:\")\n            setError(\"Error Updating Like For Post. Try Again Later\")\n        }\n        setLoading(false)\n    }\n\n    // handle add comment post\n    async function handleaddComment(postId){\n\n        // validate the length of the comment\n        if (commentRef.current.value.length >= 2){\n            try{\n                setLoading(true)\n                setCommentError('')\n\n                // adds comment to post database\n                const response = await fetch(`http://localhost:3001/posts/edit?postId=${encodeURIComponent(postId)}`, {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({commentUser: userId, commentText: commentRef.current.value})\n                });\n\n                if (response.ok){\n                    console.log(\"Added Comment Data\")\n                } else{\n                    const errorData = await response.json()\n                    console.error(\"Error Updating Comment Data:\", error)\n                    throw new Error(errorData.message)\n                }\n            }catch (error){\n                console.error(\"Error Adding Comment Data:\", error)\n                setCommentError(\"Failed To Add Comment Data\")\n            }\n            setLoading(false)\n        }else{\n            setCommentError('Comment Too Short')\n            return\n        }\n    }\n\n    // handle delete comment post\n    async function handleDeleteComment(postId, commentId){\n        try{\n            setLoading(true)\n            setCommentError('')\n\n            // remove the comment from post database\n            const response = await fetch(`http://localhost:3001/posts/edit?postId=${encodeURIComponent(postId)}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({deleteCommentId: commentId})\n            });\n\n            if (response.ok){\n                console.log(\"Deleted Comment Data\")\n            } else{\n                const errorData = await response.json()\n                console.error(\"Error Deleting Comment Data:\", error)\n                throw new Error(errorData.message)\n            }\n        }catch (error){\n            console.error(\"Error Deleting Comment Data:\", error)\n            setCommentError(\"Failed To Delete Comment\")\n        }\n        setLoading(false)\n    }\n \n    // handle add reply post\n    async function handleaddReply(postId, commentId){\n\n        // validate the length of the reply\n        if (replyRef.current.value.length >= 2){\n            try{\n                setLoading(true)\n                setCommentError('')\n\n                // adds reply to post database\n                const response = await fetch(`http://localhost:3001/posts/edit?postId=${encodeURIComponent(postId)}`, {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({commentId: commentId, replyUser: userId, replyText: replyRef.current.value})\n                });\n\n                if (response.ok){\n                    console.log(\"Added Reply Data\")\n                } else{\n                    const errorData = await response.json()\n                    console.error(\"Error Updating Reply Data:\", error)\n                    throw new Error(errorData.message)\n                }\n            }catch (error){\n                console.error(\"Error Adding Reply Data:\", error)\n                setCommentError(\"Failed To Add Reply Data\")\n            }\n            setLoading(false)\n        }else{\n            setCommentError('Reply Too Short')\n            return\n        }\n    }\n\n    // handle delete reply post\n    async function handleDeleteReply(postId, commentId, replyId){\n        try{\n            setLoading(true)\n            setCommentError('')\n\n            // remove the reply from post database\n            const response = await fetch(`http://localhost:3001/posts/edit?postId=${encodeURIComponent(postId)}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({commentId: commentId, deleteReplyId: replyId})\n            });\n\n            if (response.ok){\n                console.log(\"Deleted Reply Data\")\n            } else{\n                const errorData = await response.json()\n                console.error(\"Error Deleting Reply Data:\", error)\n                throw new Error(errorData.message)\n            }\n        }catch (error){\n            console.error(\"Error Deleting Reply Data:\", error)\n            setCommentError(\"Failed To Delete Reply\")\n        }\n        setLoading(false)\n    }\n\n    // handle add superfuel\n    async function handleSuperFuel(postId, postUserId) {\n        try{\n            setError('')\n            setLoading(true)\n\n            // check if current user has valid number of superfuel\n            if(currentUserSF > 0){\n                // add superfuel to post database\n                const response = await fetch(`http://localhost:3001/posts/edit?postId=${encodeURIComponent(postId)}`, {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({addUserIdSuperFuel: userId})\n                });\n\n                if (!response.ok){\n                    console.error(\"Error Updating SuperFuel Post:\")\n                }\n\n                const firebaseUID = currentUser.uid;\n\n                // remove superfuel from current user\n                const userResponse = await fetch(`http://localhost:3001/users/update?userfb=${encodeURIComponent(firebaseUID)}`, {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({removeSuperFuel: -1})\n                });\n\n                if (!userResponse.ok){\n                    console.error(\"Error Updating User's SuperFuel:\")\n                }\n\n                // add superfuel to post's user\n                const profileResponse = await fetch(`http://localhost:3001/users/update?userid=${encodeURIComponent(postUserId)}`, {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({addSuperFuel: +1})\n                });\n\n                if (!profileResponse.ok){\n                    console.error(\"Error Updating Profile's SuperFuel:\")\n                }\n                \n                console.log(\"Updated SuperFuel Post\")\n\n            } else{\n                console.error(\"Not Enough SuperFuel Points\")\n                setError(\"Not Enough SuperFuel Points.\")\n            }\n\n            \n        }catch (error){\n            console.error(\"Error Updating SuperFuel Post:\")\n            setError(\"Error Updating SuperFuel For Post. Try Again Later\")\n        }\n        setLoading(false)\n    }\n\n    // handle remove superfuel\n    async function handleUnSuperFuel(postId, postUserId) {\n        try{\n            setError('')\n            setLoading(true)\n\n            // remove superfuel from post database\n            const response = await fetch(`http://localhost:3001/posts/edit?postId=${encodeURIComponent(postId)}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({removeUserIdSuperFuel: userId})\n            });\n\n            if (!response.ok){\n                console.error(\"Error Updating SuperFuel Post:\")\n            }\n\n            const firebaseUID = currentUser.uid;\n\n            // add superfuel to current user\n            const userResponse = await fetch(`http://localhost:3001/users/update?userfb=${encodeURIComponent(firebaseUID)}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({addSuperFuel: +1})\n            });\n\n            if (!userResponse.ok){\n                console.error(\"Error Updating User's SuperFuel:\")\n            }\n\n            // remove superfuel from post's user\n            const profileResponse = await fetch(`http://localhost:3001/users/update?userid=${encodeURIComponent(postUserId)}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({removeSuperFuel: -1})\n            });\n\n            if (!profileResponse.ok){\n                console.error(\"Error Updating Profile's SuperFuel:\")\n            }\n            console.log(\"Updated SuperFuel Post\")\n        }catch (error){\n            console.error(\"Error Updating SuperFuel Post:\")\n            setError(\"Error Updating SuperFuel For Post. Try Again Later\")\n        }\n        setLoading(false)\n    }\n\n    return (\n        <>\n            <div className='showProfile'>        \n                <header className='profileHeader'>\n                    <div className='showUserDetails'>\n                        <div className='userRow'>\n                            {profilePicture && (\n                                <img className='showUserImage'\n                                    src={profilePicture} \n                                    alt=\"Profile\"\n                                />\n                            )}\n                            <p className='showUserName'>{username}</p>\n                        </div>\n\n                        {/* check if profile account is current user's account */}\n                        {currentUserId === userId ? (\n                            <>\n                            </>\n                        ) : (\n                            <>\n                                {/* check if account is being followed by current user, and shows follow/unfollow button */}\n                                {showfollowbtn ? (\n                                    <>\n                                        <button className='btn btn-dark' id='followbtn' onClick={() => handleFollow(userId, username)}> Follow</button>\n                                    </>\n                                ) : (\n                                    <>\n                                        <button className='btn btn-dark' id='followbtn' onClick={() => handleUnfollow(userId, username)}> Unfollow</button>\n                                    </>\n                                )}\n                            </>\n                        )}\n                    </div>\n\n                    {/* display num of superfuels, followers and followerings */}\n                    <div className='showUserData'>\n                        <p className='superFuelData'><span>{profileSF} Super Fuel</span> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1.4em\" height=\"1.4em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M18 10a1 1 0 0 1-1-1a1 1 0 0 1 1-1a1 1 0 0 1 1 1a1 1 0 0 1-1 1m-6 0H6V5h6m7.77 2.23l.01-.01l-3.72-3.72L15 4.56l2.11 2.11C16.17 7 15.5 7.93 15.5 9a2.5 2.5 0 0 0 2.5 2.5c.36 0 .69-.08 1-.21v7.21a1 1 0 0 1-1 1a1 1 0 0 1-1-1V14a2 2 0 0 0-2-2h-1V5a2 2 0 0 0-2-2H6c-1.11 0-2 .89-2 2v16h10v-7.5h1.5v5A2.5 2.5 0 0 0 18 21a2.5 2.5 0 0 0 2.5-2.5V9c0-.69-.28-1.32-.73-1.77\"/></svg></p>\n                        <div className='showUserDataNum'>\n                            <p> <span>{posts.length}</span> Posts</p>\n                            {/* shows name of followers and followerings in modal */}\n                            <p onClick={() => setOpenFollowerModal(true)}> <span>{followers.length}</span> Followers</p>\n                            <p onClick={() => setOpenFollowingModal(true)}> <span>{following.length}</span> Following</p>\n                        </div>\n\n                        {/* check if followed and shows check garage button */}\n                        {currentUserId === userId ? (\n                            <>\n                                <Link to={`/garage/${userId}`} className=\"btn btn-dark\" id='checkbtn'> Check Garage</Link>\n                            </>\n                        ) : (\n                            <>\n                                {showfollowbtn ? (\n                                    <></>\n                                ) : (\n                                    <>\n                                        <Link to={`/garage/${userId}`} className=\"btn btn-dark\" id='checkbtn'> Check Garage</Link>\n                                    </>\n                            )}\n                            </>\n                        )}\n                        \n                    </div>\n\n                </header>\n\n                {/* if own account and there are user being recommended, it will show the users */}\n                {openUserRecommend && currentUserId === userId  && allUser.length > 0? (\n                    <>\n                    <div className='userRecommendation'>\n                        {dropdown ? (\n                            <>\n                                <div className='userHeader'>\n                                    <h5>Drivers You May Know</h5>\n                                    <button className='drop-down-btn' onClick={() => setDropDown(!dropdown)}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1.4em\" height=\"1.4em\" viewBox=\"0 0 24 24\"><path fill=\"black\" fill-rule=\"evenodd\" d=\"M11.512 8.43a.75.75 0 0 1 .976 0l7 6a.75.75 0 1 1-.976 1.14L12 9.987l-6.512 5.581a.75.75 0 1 1-.976-1.138z\" clip-rule=\"evenodd\"/></svg></button>\n                                </div>\n\n                                {/* shows all recommended user in cards */}\n                                {allUser.map((users, index) => (\n                                    <div key={index}  className='userRow'>\n                                        <div className='userCard'>\n                                            <Link to={`/profile/${users._id}`} className='userLink'>\n                                                <p className='userCardHeading'>{users.username}</p>\n                                                {profilePicture && (\n                                                    <img className='userCardImage'\n                                                        src={users.profilePicture} \n                                                        alt=\"Profile\"\n                                                    />\n                                                )}\n                                            </Link>\n                                            {followBtnCard ? (\n                                                <>\n                                                    <button className='btn btn-outline-dark' id='userCardFollow' onClick={() => handleFollow(users._id, users.username) && showFollowBtnCard(false)}>Follow</button>\n                                                </>\n                                            ) : (\n                                                <>\n                                                    <button className='btn btn-outline-dark' id='userCardUnFollow' onClick={() => handleUnfollow(users._id, users.username) && showFollowBtnCard(true)}>Unfollow</button>\n                                                </>\n                                            )}\n                                        </div>\n                                    </div>\n                                ))}\n                            </>\n                        ) : (\n                            <>\n                                <div className='userHeader'>\n                                    <h5>Drivers You May Know</h5>\n                                    <button className='drop-down-btn' onClick={() => setDropDown(!dropdown)}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1.4em\" height=\"1.4em\" viewBox=\"0 0 24 24\"><path fill=\"none\" stroke=\"black\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"m7 10l5 5l5-5\"/></svg></button>\n                                </div>\n                            </>\n                        )}\n                    </div> \n                    {/* add a line */}\n                    <div className='line'></div>\n                    </>\n                ) : (\n                    <>\n                    </>\n                )}  \n\n\n                <p className=\"w-100 text-center mt-3 mb-1\" id=\"success_Msg\">{message}</p>\n                <p className=\"w-100 text-center mt-3 mb-1\" id=\"error_Msg\">{error}</p>\n                \n                {/* checks if user is valid */}\n                {userId ?(\n                    <>\n                        {/* displays no post message, depending on ownership of account */}\n                        {posts.length === 0 ? (\n                        <>\n                            {currentUserId === userId ? (\n                                <>\n                                    <p className=\"w-100 text-center mt-3 mb-1\" id=\"success_Msg\">No Posts! Share Your Experiences To The World.</p>\n                                    <Link to={`/addpost`} className=\"btn btn-dark\" id='addPostbtn'> Add Post</Link>\n                                </>\n                            ): (\n                                <>\n                                    <p className=\"w-100 text-center mt-3 mb-1\" id=\"success_Msg\">No Posts! Tell Your Friend To Share Their Experiences.</p>\n                                </>\n                            )}\n                        </>\n                        ):(\n                            <>\n                            </>\n                        )}\n                    </>\n                ):(\n                    <>\n                        <p className=\"w-100 text-center mt-3 mb-1\" id=\"error_Msg\">User Not Found</p>\n                    </>\n                )}\n\n                {/* displays all post as cards */}\n                <div className='Card_Post'>\n                    {posts.map((post, index) => (\n                        <div key={index}  className='postCard' onClick={() => handleSelectCard(post)}>\n                                <div className='cardPostImage'>\n                                    <img src={post?.postData?.image} alt={post?.postData?.title}/> \n                                </div>\n\n                                <div className='cardContent'>\n                                    <div className='cardHeader'>\n                                        <h2>{post?.postData?.title}</h2> \n                                        <Link className='postVRN' to={`/race/${userId}`}>{post?.postData?.vehicles?.vrn}</Link>\n                                    </div>\n\n                                    <div className='cardFooter'>\n                                        <p>{post?.postData?.description}</p>\n                                    </div>\n                                    \n                                </div>\n                        </div>\n                    ))}\n                </div>\n\n                {/* open post in modal */}\n                <Popup open={openModal} \n                        verlayStyle={{\n                            background: 'rgba(0, 0, 0, 0.05)', \n                            transition: 'background 0.5s ease-in-out',\n                        }}\n                        closeOnDocumentClick={false}\n                        onClose={() => setOpenModal(false)} className='Popup'\n                >\n                    <div className='Modal'>\n                        <button className='closeButton' onClick={() => setOpenModal(false)}>\n                            <span>&times;</span>\n                        </button>\n\n                        {selectedPost ? (\n                            <>\n                                <div className='modalHeader'>\n                                    <div>\n                                        <h3>{selectedPost.postData?.title}</h3>\n                                        {/* displays the vrn and button to race/compare */}\n                                        <Link className='postVRN' to={`/race/${userId}`}>{selectedPost?.postData?.vehicles?.vrn}</Link>\n                                    </div>\n                                </div> \n\n                                {/* displays the post's image */}\n                                <div className='modalPostImage'>\n                                    <img className='modalPostImage' src={selectedPost?.postData?.image} alt={selectedPost?.postData?.title}/> \n                                </div>\n\n                                {/* displays the post's description */}\n                                <div className='modalDesc'>\n                                    <p>{selectedPost?.postData?.description}</p>\n                                </div>\n\n                                {/* displays the post's engagement buttons */}\n                                <div className='selectedpostEngagement'>\n                                    <div className='engagementColumn'>\n                                        {/* check if post has been liked by current user, and shows like/unlike button */}\n                                        {selectedPost?.postData.likes.some((likedUser) => likedUser.userId === userId) ? (\n                                                <>\n                                                    <button className='unlikebtn' disabled={loading} onClick={() => handleUnLike(selectedPost?.postData._id)}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1.4em\" height=\"1.4em\" viewBox=\"0 0 26 26\"><path d=\"M17.869 3.889c-2.096 0-3.887 1.494-4.871 2.524c-.984-1.03-2.771-2.524-4.866-2.524C4.521 3.889 2 6.406 2 10.009c0 3.97 3.131 6.536 6.16 9.018c1.43 1.173 2.91 2.385 4.045 3.729c.191.225.471.355.765.355h.058c.295 0 .574-.131.764-.355c1.137-1.344 2.616-2.557 4.047-3.729C20.867 16.546 24 13.98 24 10.009c0-3.603-2.521-6.12-6.131-6.12\"/></svg></button>\n                                                </>\n                                            ) : (\n                                                <>\n                                                    <button className='likebtn' disabled={loading} onClick={() => handleLike(selectedPost?.postData._id)}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1.4em\" height=\"1.4em\" viewBox=\"0 0 26 26\"><path d=\"M17.869 3.889c-2.096 0-3.887 1.494-4.871 2.524c-.984-1.03-2.771-2.524-4.866-2.524C4.521 3.889 2 6.406 2 10.009c0 3.97 3.131 6.536 6.16 9.018c1.43 1.173 2.91 2.385 4.045 3.729c.191.225.471.355.765.355h.058c.295 0 .574-.131.764-.355c1.137-1.344 2.616-2.557 4.047-3.729C20.867 16.546 24 13.98 24 10.009c0-3.603-2.521-6.12-6.131-6.12\"/></svg></button>\n                                                </>\n                                        )}\n                                        <h3>{selectedPost?.postData.likes.length} LIKE</h3>\n\n                                    </div>\n\n                                    {/* shows comment button */}\n                                    <div className='engagementColumn'>\n                                        <button className='commentbtn' onClick={() => handleSelectCardComment(selectedPost)}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1.4em\" height=\"1.4em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M3 10.4c0-2.24 0-3.36.436-4.216a4 4 0 0 1 1.748-1.748C6.04 4 7.16 4 9.4 4h5.2c2.24 0 3.36 0 4.216.436a4 4 0 0 1 1.748 1.748C21 7.04 21 8.16 21 10.4v1.2c0 2.24 0 3.36-.436 4.216a4 4 0 0 1-1.748 1.748C17.96 18 16.84 18 14.6 18H7.414a1 1 0 0 0-.707.293l-2 2c-.63.63-1.707.184-1.707-.707V13zM9 8a1 1 0 0 0 0 2h6a1 1 0 1 0 0-2zm0 4a1 1 0 1 0 0 2h3a1 1 0 1 0 0-2z\" clip-rule=\"evenodd\"/></svg></button>\n                                        <h3>{selectedPost?.postData.comments.length} Comment</h3>\n                                    </div>\n\n                                    {/* check if post has been superfuelled by current user, and shows superfuel/unsuperfuel button */}\n                                    <div className='engagementColumn'>\n                                        {selectedPost?.postData.superfuel.some((superFuelUser) => superFuelUser.userId === userId) ? (\n                                                <>\n                                                    <button className='unsuperfuel' disabled={loading} onClick={() => handleUnSuperFuel(selectedPost?.postData._id, selectedPost?.postData.user._id)}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1.4em\" height=\"1.4em\" viewBox=\"0 0 16 16\"><path d=\"M1 2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v8a2 2 0 0 1 2 2v.5a.5.5 0 0 0 1 0V8h-.5a.5.5 0 0 1-.5-.5V4.375a.5.5 0 0 1 .5-.5h1.495c-.011-.476-.053-.894-.201-1.222a.97.97 0 0 0-.394-.458c-.184-.11-.464-.195-.9-.195a.5.5 0 0 1 0-1q.846-.002 1.412.336c.383.228.634.551.794.907c.295.655.294 1.465.294 2.081V7.5a.5.5 0 0 1-.5.5H15v4.5a1.5 1.5 0 0 1-3 0V12a1 1 0 0 0-1-1v4h.5a.5.5 0 0 1 0 1H.5a.5.5 0 0 1 0-1H1zm2.5 0a.5.5 0 0 0-.5.5v5a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 .5-.5v-5a.5.5 0 0 0-.5-.5z\"/></svg></button>\n                                                </>\n                                            ) : (\n                                                <>\n                                                    <button className='superfuel' disabled={loading} onClick={() => handleSuperFuel(selectedPost?.postData._id, selectedPost?.postData.user._id)}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1.4em\" height=\"1.4em\" viewBox=\"0 0 16 16\"><path d=\"M1 2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v8a2 2 0 0 1 2 2v.5a.5.5 0 0 0 1 0V8h-.5a.5.5 0 0 1-.5-.5V4.375a.5.5 0 0 1 .5-.5h1.495c-.011-.476-.053-.894-.201-1.222a.97.97 0 0 0-.394-.458c-.184-.11-.464-.195-.9-.195a.5.5 0 0 1 0-1q.846-.002 1.412.336c.383.228.634.551.794.907c.295.655.294 1.465.294 2.081V7.5a.5.5 0 0 1-.5.5H15v4.5a1.5 1.5 0 0 1-3 0V12a1 1 0 0 0-1-1v4h.5a.5.5 0 0 1 0 1H.5a.5.5 0 0 1 0-1H1zm2.5 0a.5.5 0 0 0-.5.5v5a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 .5-.5v-5a.5.5 0 0 0-.5-.5z\"/></svg></button>\n                                                </>\n                                        )}\n                                        <h3>{selectedPost?.postData.superfuel.length} Superfuel</h3>\n                                    </div>\n                                </div>\n                                \n                                {/* display comment's box */}\n                                {commentBox ? (\n                                    <>\n                                        <div className='commentBox' id='commentProfileModal'>\n                                            <button className='closeButton' onClick={() => showCommentBox(false)}>\n                                                <span>&times;</span>\n                                            </button>\n                                        \n                                            {selectedPost ? (\n                                                <>\n                                                    <div className='modalCommentHeader'>\n                                                        <h3>Comments</h3>\n                                                    </div> \n\n                                                    <p className=\"w-100 text-center mt-2 mb-0\" id=\"error_Msg\">{commentError}</p>\n\n                                                    {/* shows comments for each post */}\n                                                    <div className='modalCommentBody'>\n                                                        {selectedPost.postData.comments?.map((postComment) => (\n                                                            <div key={postComment._id} className='comments'>\n                                                                <div className='commentTop'>\n                                                                    <div className='commentUser'>\n                                                                        {postComment.userID?.profilePicture && (\n                                                                            <img className='commentUserImage'\n                                                                                src={postComment.userID.profilePicture}\n                                                                                alt=\"Profile\"\n                                                                            />\n                                                                        )}                                \n                                                                        <Link to={`/profile/${postComment.userID?._id}`} className='commentUserName'>{postComment.userID?.username}</Link>\n                                                                    </div>\n                                                                    <div className='commentText'>\n                                                                        <p>{postComment.commentText}</p>\n                                                                    </div>\n                                                                    <div className='commentDate'>\n                                                                        <div>{formatDate(postComment.createdAt)}</div>\n                                                                        <div>{formatTime(postComment.createdAt)}</div>\n                                                                    </div>\n                                                                </div>\n\n                                                                {/* shows replies for each comment */}\n                                                                {postComment.replies?.map((postReply) => (\n                                                                    <div key={postReply._id} className='replies'>\n                                                                        <div className='commentTop'>\n                                                                            <div className='commentUser'>\n                                                                                {postReply.userID?.profilePicture && (\n                                                                                    <img className='replyUserImage'\n                                                                                        src={postReply.userID.profilePicture}\n                                                                                        alt=\"Profile\"\n                                                                                    />\n                                                                                )}                                \n                                                                                <Link to={`/profile/${postReply.userID?._id}`} className='replyUserName'>{postReply.userID?.username}</Link>\n                                                                            </div>\n                                                                            <div className='replyText'>\n                                                                                <p>{postReply.replyText}</p>\n                                                                            </div>\n                                                                            <div className='replyDate'>\n                                                                                <div>{formatDate(postReply.createdAt)}</div>\n                                                                                <div>{formatTime(postReply.createdAt)}</div>\n                                                                                {/* check if reply belongs to user, and shows delete button */}\n                                                                                {postReply.userID._id === userId? (\n                                                                                    <>\n                                                                                        <button className='deletereplybtn' disabled={loading} onClick={() => handleDeleteReply(selectedPost.postData._id, postComment._id, postReply._id)}> Delete Reply</button>\n                                                                                    </>\n                                                                                ) : (\n                                                                                    <>\n                                                                                    </>\n                                                                                )}\n                                                                            </div>\n\n                                                                            \n                                                                        </div>\n                                                                    </div>\n                                                                ))}\n\n                                                                <div className='commentBottom'>\n                                                                    <button className='replybtn' disabled={loading} onClick={() => handleSelectComment(postComment._id)}>Reply</button>\n                                                                    {postComment.userID._id === userId? (\n                                                                        <>\n                                                                            <button className='deletereplybtn' disabled={loading} onClick={() => handleDeleteComment(selectedPost.postData._id, postComment._id)}>Delete</button>\n                                                                        </>\n                                                                    ) : (\n                                                                        <>\n                                                                        </>\n                                                                    )}\n                                                                </div>\n\n                                                                {/* check selected comment and shows reply button */}\n                                                                {showReplyBox && selectedComment === postComment._id ?(\n                                                                    <>\n                                                                        <div className='modalCommentButton'>\n                                                                            <input type='text' ref={replyRef} placeholder=\"Reply...\" className='commentText' id='commentProfileText' required></input>\n                                                                            <button className='btn btn-dark' id='commentProfileBtn' disabled={loading} onClick={() => handleaddReply(selectedPost.postData._id, postComment._id)}>Add Reply</button>\n                                                                        </div>\n                                                                    </>\n                                                                ) : (\n                                                                    <>\n                                                                    </>\n                                                                )}\n\n                                                            </div>\n                                                        ))}\n                                                    </div>\n\n                                                    <div className='modalCommentButton'>\n                                                        <input type='text' ref={commentRef} placeholder=\"Comment...\" className='commentText' id='commentProfileText' required></input>\n                                                        <button className='btn btn-dark' id='commentProfileBtn' disabled={loading} onClick={() => handleaddComment(selectedPost.postData._id)}>Add Comment</button>\n                                                    </div>\n                                                </>\n                                            ) : <p>Loading....</p>}\n                                        </div>\n\n                                    </>\n                                ):(\n                                    <>\n                                    </>\n                                )}\n\n                                {/* checks if post belongs to current user and displays edit/delete button */}\n                                {currentUserId === userId ? (\n                                    <>\n                                        {confirmDeletePost ? (\n                                                <>\n                                                    <div className='buttonContainer'>\n                                                        <button disabled={loading}  className=\"btn btn-outline-dark\" type=\"submit\"  onClick={() => handleEdit(selectedPost.postData._id)}>Edit Post</button>\n                                                        <button disabled={loading}  className=\"btn btn-outline-danger\" variant=\"danger\" onClick={() => handleDelete(selectedPost.postData?._id)}>Confirm Delete</button>\n                                                    </div>\n                                                </>\n                                            ) :(\n                                                <>\n                                                    <div className='buttonContainer'>\n                                                        <button disabled={loading}  className=\"btn btn-outline-dark\" type=\"submit\"  onClick={() => handleEdit(selectedPost.postData._id)}>Edit Post</button>\n                                                        <button disabled={loading}  className=\"btn btn-outline-dark\" type=\"submit\"  onClick={() => handleDelete(selectedPost.postData?._id)}>Delete Post</button>\n                                                    </div>\n                                                </>\n                                        )}\n                                    </>\n                                ) : (\n                                    <>\n                                    </>\n                                )}\n\n                            </>\n                        ) : <p>Loading....</p>}\n                    </div>\n                </Popup>\n\n                {/* modal for followers list */}\n                <Popup open={openFollowerModal} closeOnDocumentClick onClose={() => setOpenFollowerModal(false)} className='Popup'>\n                    <div className='FollowModal'>\n                        <>\n                            <div className='modalFollowHeader'>\n                                <div>\n                                    <h3>Followers</h3>\n                                </div>\n                            </div> \n\n                            <div className='line'></div>\n\n                            <div className='modalFollowData'>\n                                {/* displays all followers name */}\n                                {followers.map((followers, index) => (\n                                    <div key={index} >\n                                        <p>{followers.followerName}</p>\n                                    </div>\n                                ))}\n                            </div>\n                        </>\n                    </div>\n                </Popup>\n\n                {/* modal for followering list */}\n                <Popup open={openFollowingModal} closeOnDocumentClick onClose={() => setOpenFollowingModal(false)} className='Popup'>\n                    <div className='FollowModal'>\n                        <>\n                            <div className='modalFollowHeader'>\n                                <div>\n                                    <h3>Followering</h3>\n                                </div>\n                            </div> \n\n                            <div className='line'></div>\n\n                            <div className='modalFollowData'>\n                                {/* displays all following name */}\n                                {following.map((following, index) => (\n                                    <div key={index} >\n                                        <p>{following.followeringName}</p>\n                                    </div>\n                                ))}\n                            </div>\n                        </>\n                    </div>\n                </Popup>\n\n            </div>\n        </>\n    )\n}\n\nexport default Profile","/Users/sharusan/MeetMyCar/myapp/src/Setting.js",["147"],[],"/Users/sharusan/MeetMyCar/myapp/src/CompareSpecs.js",["148","149","150","151","152","153","154"],[],"import React, {useState, useEffect} from 'react'\nimport { Link, useParams } from 'react-router-dom'\nimport { useAuth } from './AuthContext'\nimport {Popup} from 'reactjs-popup'\n\nimport './CompareSpecs_css.css'\n\nconst CompareSpecs = () => {\n    const {userid} = useParams()\n    const {currentUser} = useAuth()\n\n    const [currentUserId, setCurrentUserId] = useState('')\n    const [currentUserName, setCurrentUserName] = useState('')\n    const [currentUserProfile, setCurrentUserProfile] = useState('')\n    const [currentUservehicle, setCurrentUserVehicle] = useState([])\n\n    const [selectedMyVehicle, setSelectedMyVehicle] = useState('')\n\n    const [profileUserId, setProfileUserId] = useState('')\n    const [profileUserName, setProfileUserName] = useState('')\n    const [profileUserProfile, setProfileUserProfile] = useState('')\n    const [profileUservehicle, setProfileUserVehicle] = useState([])\n\n    const [selectedProfileVehicle, setSelectedProfileVehicle] = useState('')\n\n    const [startRace, setStartRace] = useState(false)\n    // sets types of specData to show, including ready, set and go name\n    const [specData, setSpecData] = useState([\n        {specName: 'Ready', time:2000},\n        {specName: 'Set', time:1500},\n        {specName: 'Go', time:1000},\n        {specName: 'Speed', vehicle1: '', vehicle2: '', time:1500},\n        {specName: 'Torque', vehicle1: '', vehicle2: '', time:1500},\n        {specName: 'RPM', vehicle1: '', vehicle2: '', time:1500},\n        {specName: 'BHP', vehicle1: '', vehicle2: '', time:1500},\n        {specName: 'MPG', vehicle1: '', vehicle2: '', time:1750},\n    ])\n\n    const [specIndex, setSpecIndex] = useState(0)\n    const [vehicle1Large, setVehicle1Large] = useState(null)\n    const [currentV1Position, setVehicle1Position] = useState(0)\n    const [currentV2Position, setVehicle2Position] = useState(0)\n\n    const [currentV1SpeedFactor, setV1RaceSpeedFactor] = useState(0)\n    const [currentV2SpeedFactor, setV2RaceSpeedFactor] = useState(0)\n\n    const [vehicle1Points, setVehicle1Point] = useState(0)\n    const [vehicle2Points, setVehicle2Point] = useState(0)\n\n    const [openModal, setOpenModal] = useState(false)\n    const [pointsUpdate, setPointsUpdated] = useState(false)\n\n    const [error, setError] = useState('')\n\n    useEffect(() => {\n        async function fetchCurrentUserData(){\n            // fetches current user data, and stores the data into useState, to be used throughout the page.\n            try{\n                setError('')\n                // fetches the user data with firebase ID\n                const firebaseUID = currentUser.uid;\n    \n                const response = await fetch(`http://localhost:3001/users?userfb=${encodeURIComponent(firebaseUID)}`, {\n                    method: 'GET',\n                    headers: {\n                        'accept': 'application/json',\n                    },\n                });\n\n                if (response.ok){\n                    const data = await response.json()\n\n                    // updates cuurent user's data states\n                    setCurrentUserId(data.userData._id)\n                    setCurrentUserName(data.userData.username)\n                    setCurrentUserProfile(data.userData.profilePicture)\n\n                    // fetches garage's data for the current user, and stores the data into vehicles\n                    const vehicleData = await Promise.all(data.userData.vehicles.map(async (vehicle) => {\n                        if(vehicle?.vehicleId){\n                            const VehicleReponse = await fetch(`http://localhost:3001/vehicles?vehicleId=${encodeURIComponent(vehicle.vehicleId)}`, {\n                                method: 'GET',\n                                headers: {\n                                    'accept': 'application/json',\n                                },\n                            });\n\n                            if(VehicleReponse.ok){\n                                const vehicle_Data = await VehicleReponse.json()\n                                return vehicle_Data\n                            } else{\n                                console.error(\"Error Fetching Vehicle Data:\", error)\n                                setError(\"Error Fetching Your Vehicles. Try Again Later\")\n                                return null\n                            }\n                        }\n                    }))\n\n                    // removes any empty vehicles\n                    const vehicleWithData = vehicleData.filter(vehicle => vehicle !== null)\n                    setCurrentUserVehicle(vehicleWithData)\n\n                    console.log(\"Fetched Current User Details\")\n                    return data\n                } else{\n                    const errorData = await response.json()\n                    setError(\"Failed To Fetch Current User Data\")\n                    throw new Error(errorData.message)\n                }\n            }catch (error){\n                console.error(\"Error Fetching Current User Data:\", error)\n                setError(\"Failed To Fetch Current User Data\")\n            }\n        }\n        fetchCurrentUserData();\n    }, [currentUser.uid]);\n\n    useEffect(() => {\n        async function fetchProfileUserData(){\n            // fetches profile's user data, and stores the data into useState, to be used throughout the page.\n            try{\n                setError('')\n    \n                const response = await fetch(`http://localhost:3001/users?userid=${encodeURIComponent(userid)}`, {\n                    method: 'GET',\n                    headers: {\n                        'accept': 'application/json',\n                    },\n                });\n\n                if (response.ok){\n                    const data = await response.json()\n\n                    // updates profile user's data states\n                    setProfileUserId(data.userData._id)\n                    setProfileUserName(data.userData.username)\n                    setProfileUserProfile(data.userData.profilePicture)\n\n                    // fetches garage's data for the profile user, and stores the data into vehicles\n                    const vehicleData = await Promise.all(data.userData.vehicles.map(async (vehicle) => {\n                        if(vehicle?.vehicleId){\n                            const VehicleReponse = await fetch(`http://localhost:3001/vehicles?vehicleId=${encodeURIComponent(vehicle.vehicleId)}`, {\n                                method: 'GET',\n                                headers: {\n                                    'accept': 'application/json',\n                                },\n                            });\n\n                            if(VehicleReponse.ok){\n                                const vehicle_Data = await VehicleReponse.json()\n                                return vehicle_Data\n                            } else{\n                                console.error(\"Error Fetching Profile's Vehicle Data:\", error)\n                                setError(\"Error Fetching Profile's Vehicles. Try Again Later\")\n                                return null\n                            }\n                        }\n                    }))\n\n                    const vehicleWithData = vehicleData.filter(vehicle => vehicle !== null)\n                    setProfileUserVehicle(vehicleWithData)\n\n                    console.log(\"Fetched Profile's User Details\")\n                    return data\n                } else{\n                    const errorData = await response.json()\n                    setError(\"Failed To Fetch Profile's User Data\")\n                    throw new Error(errorData.message)\n                }\n            }catch (error){\n                console.error(\"Error Fetching Profile's User Data:\", error)\n                setError(\"Failed To Fetch Profile's User Data\")\n            }\n        }\n        fetchProfileUserData();\n    }, []);\n\n    useEffect(() => {\n        // iterates through each specData until it reaches end of [specData]\n        if (specIndex < specData.length){\n\n            // if there are data for each vehicle to compare with, then it will check the spec\n            if (specData[specIndex] && specData[specIndex].vehicle1 && specData[specIndex].vehicle2){\n                checkSpec(specData[specIndex])\n            }\n            \n            // go through each index from 0 till end of specData\n            const nextSpecId = setInterval( () => {\n                setSpecIndex((prevIndex) => {\n                    if (prevIndex + 1 < specData.length){\n                        return prevIndex + 1\n                    } else{\n                        // when it reaches end of spec, it will open compare modal and update points\n                        clearInterval(nextSpecId)\n                        setOpenModal(true)\n                        if (!pointsUpdate){\n                            updatePoints()\n                            setPointsUpdated(true)\n                        }\n                        return prevIndex\n                    }\n                })\n                // goes through each spec with their allocated time\n            } ,specData[specIndex].time)\n            return () => clearInterval(nextSpecId)\n        }\n    }, [specData, specIndex])\n\n    useEffect(() => {\n        // move the image position with a speedfactor, to model racing\n        const raceIntervalId = setInterval( () => {\n            if(specIndex >= 2){\n                setVehicle1Position(prevPosition => prevPosition + (100 + currentV1SpeedFactor))\n                setVehicle2Position(prevPosition => prevPosition + (100 + currentV2SpeedFactor))\n            } \n        } ,1000)\n        return () => clearInterval(raceIntervalId)\n    }, [currentV1SpeedFactor, currentV2SpeedFactor, specIndex])\n\n    // check both vehicle specs and compares\n    const checkSpec = (currentSpec) => {\n        setVehicle1Large(null)\n        // if vehicle 1 spec is larger than vehicle 2, it will increase the speed factor and add a point to vehicle 1\n        if (parseFloat(currentSpec.vehicle1) > parseFloat(currentSpec.vehicle2)){\n            console.log(\"Vehicle 1 Spec is larger\")\n            setVehicle1Large(true)\n            setVehicle1Point(vehicle1Points+1)\n            setV1RaceSpeedFactor((vehicle1Points+1)*75)\n        } \n        // if vehicle 2 spec is larger than vehicle 1, it will increase the speed factor and add a point to vehicle 2\n        if (parseFloat(currentSpec.vehicle2) > parseFloat(currentSpec.vehicle1)){\n            console.log(\"Vehicle 2 Spec is larger\")\n            setVehicle1Large(false)\n            setVehicle2Point(vehicle2Points+1)\n            setV2RaceSpeedFactor((vehicle2Points+1)*75)\n        }\n        // if vehicle 1 spec is same to vehicle 2, it will add a point to both vehicles\n        if (parseFloat(currentSpec.vehicle1) === parseFloat(currentSpec.vehicle2)){\n            console.log(\"Vehicle 2 Spec is larger\")\n            setVehicle1Large(null)\n            setVehicle1Point(vehicle1Points+1)\n            setVehicle2Point(vehicle2Points+1)\n        }        \n    }\n\n    // handle selection of vehicle for current user to compare\n    function handleSelectMyVehicle(e){\n        const vehicle_Id= e.target.value;\n        const selectVehicle = currentUservehicle.find(v => v.vehicleData._id === vehicle_Id)\n        setSelectedMyVehicle(selectVehicle);\n    };\n\n    // handle selection of vehicle for competing user to compare\n    function handleSelectProfileVehicle(e){\n        const vehicle_Id= e.target.value;\n        const selectVehicle = profileUservehicle.find(v => v.vehicleData._id === vehicle_Id)\n        setSelectedProfileVehicle(selectVehicle);\n    };\n\n    // fetch the correct spec for each vehicle\n    function updateSpec(){\n        if (selectedMyVehicle && selectedProfileVehicle){\n            const updateSpecData = specData.map((spec) => {\n                // fetch maxSpeed data for both vehicle\n                if(spec.specName === 'Speed') {\n                    return {\n                        ...spec,\n                        vehicle1: selectedMyVehicle?.vehicleData.vehicleInfo.Performance.MaxSpeed.Mph,\n                        vehicle2: selectedProfileVehicle?.vehicleData.vehicleInfo.Performance.MaxSpeed.Mph\n                    }\n                }\n                // fetch Torque(Nm) data for both vehicle\n                else if(spec.specName === 'Torque') {\n                    return {\n                        ...spec,\n                        vehicle1: selectedMyVehicle?.vehicleData.vehicleInfo.Performance.Torque.Nm,\n                        vehicle2: selectedProfileVehicle?.vehicleData.vehicleInfo.Performance.Torque.Nm\n                    }\n                }\n                // fetch Torque(RPM) data for both vehicle\n                else if(spec.specName === 'RPM') {\n                    return {\n                        ...spec,\n                        vehicle1: selectedMyVehicle?.vehicleData.vehicleInfo.Performance.Torque.Rpm,\n                        vehicle2: selectedProfileVehicle?.vehicleData.vehicleInfo.Performance.Torque.Rpm\n                    }\n                }\n                // fetch bhp data for both vehicle\n                else if(spec.specName === 'BHP') {\n                    return {\n                        ...spec,\n                        vehicle1: selectedMyVehicle?.vehicleData.vehicleInfo.Performance.Power.Bhp,\n                        vehicle2: selectedProfileVehicle?.vehicleData.vehicleInfo.Performance.Power.Bhp\n                    }\n                }\n                // fetch mpg data for both vehicle\n                else if(spec.specName === 'MPG') {\n                    return {\n                        ...spec,\n                        vehicle1: selectedMyVehicle?.vehicleData.vehicleInfo.Consumption.Combined.Mpg,\n                        vehicle2: selectedProfileVehicle?.vehicleData.vehicleInfo.Consumption.Combined.Mpg\n                    }\n                }\n                return spec\n            })\n            // clears all state and sets all to start of comparisons\n            setSpecData(updateSpecData)\n            setSpecIndex(0)\n            setVehicle1Position(0)\n            setVehicle2Position(0)\n            setVehicle1Point(0)\n            setVehicle2Point(0)\n            setOpenModal(false)\n            setPointsUpdated(false)\n            setStartRace(true)\n        } else{\n            setError('Choose Both Vehicles To Start The Race')\n        }\n    }\n\n    // update user's points\n    async function updatePoints(){\n        setError('')\n        try{\n            const firebaseUID = currentUser.uid;\n            let response\n            let pointsProfileResponse\n\n            // if vehicle 1 won, it will add a win point to current user\n            if (vehicle1Points > vehicle2Points){\n                response = await fetch(`http://localhost:3001/users/update?userfb=${encodeURIComponent(firebaseUID)}`, {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({winVRNPoints: selectedProfileVehicle.vehicleData._id, \n                            winUserPoints: selectedProfileVehicle.vehicleData.user._id,\n                            winVRN: selectedProfileVehicle.vehicleData.vrn})\n                    \n                });\n\n                if (!response.ok){\n                    const errorData = await response.json()\n                    setError(\"Failed To Update User's Points\")\n                    console.error(\"Error Updating User's Points:\", error)\n                    throw new Error(errorData.message)  \n                }\n\n                // if vehicle 1 won, it will add a lost point to competing user\n                pointsProfileResponse = await fetch(`http://localhost:3001/users/update?userid=${encodeURIComponent(userid)}`, {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({lostVRNPoints: selectedMyVehicle.vehicleData._id,\n                             lostUserPoints: selectedMyVehicle.vehicleData.user._id,\n                             lostVRN:selectedMyVehicle.vehicleData.vrn})\n                });\n\n                if (!pointsProfileResponse.ok){\n                    const errorData = await response.json()\n                    setError(\"Failed To Update Profile's Points\")\n                    console.error(\"Error Updating Profile's Points:\", error)\n                    throw new Error(errorData.message)  \n                }\n            } \n\n            // if vehicle 2 won, it will add a lost point to current user\n            else if (vehicle2Points > vehicle1Points){\n                response = await fetch(`http://localhost:3001/users/update?userfb=${encodeURIComponent(firebaseUID)}`, {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({lostVRNPoints: selectedProfileVehicle.vehicleData._id, \n                            lostUserPoints: selectedProfileVehicle.vehicleData.user._id,\n                            lostVRN:selectedProfileVehicle.vehicleData.vrn})\n                });\n\n                if (!response.ok){\n                    const errorData = await response.json()\n                    setError(\"Failed To Update User's Points\")\n                    console.error(\"Error Updating User's Points:\", error)\n                    throw new Error(errorData.message)  \n                }\n\n                // if vehicle 2 won, it will add a win point to competing user\n                pointsProfileResponse = await fetch(`http://localhost:3001/users/update?userid=${encodeURIComponent(userid)}`, {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({winVRNPoints: selectedMyVehicle.vehicleData._id, \n                            winUserPoints: selectedMyVehicle.vehicleData.user._id,\n                            winVRN: selectedMyVehicle.vehicleData.vrn})\n                });\n\n                if (!pointsProfileResponse.ok){\n                    const errorData = await response.json()\n                    setError(\"Failed To Update Profile's Points\")\n                    console.error(\"Error Updating Profile's Points:\", error)\n                    throw new Error(errorData.message)  \n                }\n            }\n\n            console.log(\"Points Updated\")\n\n        }catch (error){\n            console.error(\"Error Updating Points:\", error)\n            setError(\"Failed To Update Points\")\n        }\n    }\n\n    return (\n        <>\n            <div className='compareVehicle'>        \n                <header className='garageHeader'>\n                    <h1 id=\"login_text\">\n                        Compare\n                        <p id=\"slogan_text\">Check Out Which Vehicle Is Better</p>\n                    </h1>\n\n                    <Link to={`/garage/${currentUserId}`}className=\"btn btn-dark\" id='addvehiclebtn'> Compare My Vehicle</Link>\n                </header>   \n\n                <p className=\"w-100 text-center mt-3 mb-1\" id=\"error_Msg\">{error}</p>\n\n                <div className='compareUser'>\n                    {/* display current user's detail */}\n                    <div className='vehicle1User'>\n                        <div className='vehicleUserRow'>\n                            {currentUserProfile && (\n                                <img className='vehicleUserProfile'\n                                    src={currentUserProfile} \n                                    alt=\"Profile\"\n                                />\n                            )}\n                            <Link to={`/profile/${currentUserId}`} className='vehicleUserName'>{currentUserName}</Link>\n                        </div>\n                            \n                        {/* displays list of current user's vehicle to compare */}\n                        <p className='vehicleName'>{selectedMyVehicle?.vehicleData?.vehicleHistory?.make} {selectedMyVehicle?.vehicleData?.vehicleHistory?.model}</p>\n                        <select className='vehicleVRN' onChange={handleSelectMyVehicle} value={selectedMyVehicle?.vehicleData?._id} required>\n                            <option value=\"\" disabled>VRN</option>\n                            {currentUservehicle.map(vehicle => ( \n                                <option key={vehicle?.vehicleData?._id} value={vehicle?.vehicleData?._id}> {vehicle?.vehicleData?.vrn} </option>\n                            ))}\n                        </select>\n                    </div>\n\n                    {/* display competing user's detail */}\n                    <div className='vehicle2User'>\n                        <div className='vehicleUserRow'>\n                            {currentUserProfile && (\n                                <img className='vehicleUserProfile'\n                                    src={profileUserProfile}\n                                    alt=\"Profile\"\n                                />\n                            )}\n                            <Link to={`/profile/${profileUserId}`} className='vehicleUserName'>{profileUserName}</Link>\n                        </div>                        \n                        \n                        {/* displays list of competing user's vehicle to compare */}\n                         <p className='vehicleName'>{selectedProfileVehicle?.vehicleData?.vehicleHistory?.make} {selectedProfileVehicle?.vehicleData?.vehicleHistory?.model}</p>\n                        <select className='vehicleVRN' onChange={handleSelectProfileVehicle} value={selectedProfileVehicle?.vehicleData?._id} required>\n                            <option value=\"\" disabled>VRN</option>\n                            {profileUservehicle.map(vehicle => ( \n                                <option key={vehicle?.vehicleData?._id} value={vehicle?.vehicleData?._id}> {vehicle?.vehicleData?.vrn} </option>\n                            ))}\n                        </select>\n                    </div>\n                </div>\n\n                {/* display race track with vehicle image and spec data */}\n                <div className='RaceTrack'>\n                    {startRace ? (\n                        <>\n                            {/* display vehicle spec data for both vehicle with spec name */}\n                            <div className='compareSpecData'>\n                                <div className='compareSpecDataRow'>\n                                    {/* changes green/red depending on which vehicle spec is larger */}\n                                    <p className={vehicle1Large === true ? 'green' : vehicle1Large === false ? 'red' : 'green'}>{specData[specIndex].vehicle1}</p>\n                                    <h4 className={specData[specIndex].specName === 'Ready' ? 'red' : specData[specIndex].specName === 'Set' ? 'orange' : specData[specIndex].specName === 'Go' ? 'green' : ''}>{specData[specIndex].specName}</h4>\n                                    <p className={vehicle1Large === false ? 'green' : vehicle1Large === true ? 'red' : 'green'}>{specData[specIndex].vehicle2}</p>\n                                </div>\n                            </div>\n\n                            {/* display vehicle image and traslate X to model racing */}\n                            <div className='compareRace'>\n                                <div className=\"vehicle1Race\" style={{ transform: `translateX(${currentV1Position}px)` }}>\n                                    <img src={selectedMyVehicle?.vehicleData?.image}></img>\n                                </div>\n\n                                <div className=\"vehicle2Race\" style={{ transform: `translateX(${currentV2Position}px)` }}>\n                                    <img src={selectedProfileVehicle?.vehicleData?.image}></img>\n                                </div>\n                            </div>\n\n                            {/* show compare modal */}\n                            <Popup open={openModal} \n                                    closeOnDocumentClick onClose={() => setOpenModal(false)} className='Popsup'\n                                    overlayStyle={{\n                                        background: 'rgba(0, 0, 0, 0.1)', \n                                        transition: 'background 0.5s ease-in-out',\n                                    }}\n                            >\n                                <div className='Modal'>\n                                    {/* display win/lost/draw banner */}\n                                    <div className='compareBanner'>\n                                        {vehicle1Points > vehicle2Points ? (\n                                            <>\n                                                <div className='winBanner'>\n                                                    <h1 className='textBanner'> Winner</h1>\n                                                    <p className='subTextBanner'>Nice One, Keep This UP</p>\n                                                </div>\n                                            </>\n                                        ) : vehicle1Points < vehicle2Points ? (\n                                            <>\n                                                <div className='lostBanner'>\n                                                    <h1 className='textBanner'> Loser</h1>\n                                                    <p className='subTextBanner'>Good Luck On Next Time</p>\n                                                </div>                                \n                                            </>\n                                            ) : (\n                                                <>\n                                                    <div className='drawBanner'>\n                                                        <h1 className='textBanner'> Draw</h1>\n                                                        <p className='subTextBanner'>Seems Like It's upto The Driver</p>\n                                                    </div>                                \n                                                </>\n                                        )}\n                                    </div>\n                                    {/* display both vehicle images */}\n                                    <div className='compareHead'>\n                                        <div className='vehicle1Header'>\n                                            <h3>{selectedMyVehicle?.vehicleData?.vrn}</h3>\n                                            <img src={selectedMyVehicle?.vehicleData?.image}></img>\n                                            <h3>{selectedMyVehicle?.vehicleData?.vehicleHistory?.make} {selectedMyVehicle?.vehicleData?.vehicleHistory?.model}</h3>\n                                        </div>\n\n                                        <p>VS</p>\n\n                                        <div className='vehicle2Header'>\n                                            <h3>{selectedProfileVehicle?.vehicleData?.vrn}</h3>\n                                            <img src={selectedProfileVehicle?.vehicleData?.image}></img>\n                                            <h3>{selectedProfileVehicle?.vehicleData?.vehicleHistory?.make} {selectedProfileVehicle?.vehicleData?.vehicleHistory?.model}</h3>\n                                        </div>\n                                    </div>\n\n                                    {/* show vehicle spec with green/red depending on win/lost */}\n                                    <div className='compareData'>\n                                        {/* Slice to remove the ready, set, go in the specData*/}\n                                        {specData.slice(3).map((specs, index) => (\n                                            <div key={index} className='compareDataRow'>\n                                                <p className={specs.vehicle1 > specs.vehicle2 ? 'green' : specs.vehicle2 > specs.vehicle1 ? 'red' : ''}>{specs.vehicle1}</p>\n                                                <h4 className={specs.vehicle1 > specs.vehicle2 ? 'green' : specs.vehicle2 > specs.vehicle1 ? 'red' : ''}>{specs.specName}</h4>\n                                                <p className={specs.vehicle2 > specs.vehicle1 ? 'green' : specs.vehicle1 > specs.vehicle2 ? 'red' : ''}>{specs.vehicle2}</p>\n                                            </div>\n                                        ))}\n                                    </div>\n\n                                    {/* show race again button */}\n                                    {vehicle1Points > vehicle2Points ? (\n                                        <>\n                                            <button className=\"btn btn-outline-success w-100 mt-1\" onClick={() => window.location.reload()}>Race Again</button>\n                                        </>\n                                    ) : vehicle1Points < vehicle2Points ? (\n                                        <>\n                                            <button className=\"btn btn-outline-danger w-100 mt-1\" onClick={() => window.location.reload()}>Race Again</button>\n                                        </>\n                                        ) : (\n                                            <>\n                                            <button className=\"btn btn-outline-dark w-100 mt-1\" onClick={() => window.location.reload()}>Race Again</button>\n                                        </>\n                                    )}\n                                </div> \n                            </Popup>\n                        </>\n                    ) : (\n                        <>\n                            {/* show race button */}\n                            <div className='compareSpecData'>\n                                {selectedMyVehicle&&selectedProfileVehicle ? (\n                                    <button className='btn btn-dark' id='racebtn' onClick={updateSpec}> Ready To Race</button>\n                                ) : (\n                                    <p className=\"w-100 text-center mt-3 mb-1\" id=\"success_Msg\">Choose Both Vehicles To Start The Race</p>\n                                )}\n                            </div>\n                        </>\n                    )}\n\n                </div>\n                \n            </div>\n        </>\n    )\n}\n\nexport default CompareSpecs","/Users/sharusan/MeetMyCar/myapp/src/firebase.js",[],[],{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","severity":1,"message":"158","line":46,"column":23,"nodeType":"159","messageId":"160","endLine":46,"endColumn":36},{"ruleId":"157","severity":1,"message":"158","line":66,"column":23,"nodeType":"159","messageId":"160","endLine":66,"endColumn":36},{"ruleId":"157","severity":1,"message":"158","line":76,"column":23,"nodeType":"159","messageId":"160","endLine":76,"endColumn":36},{"ruleId":"157","severity":1,"message":"158","line":157,"column":21,"nodeType":"159","messageId":"160","endLine":157,"endColumn":34},{"ruleId":"157","severity":1,"message":"158","line":165,"column":21,"nodeType":"159","messageId":"160","endLine":165,"endColumn":34},{"ruleId":"157","severity":1,"message":"158","line":173,"column":21,"nodeType":"159","messageId":"160","endLine":173,"endColumn":34},{"ruleId":"161","severity":1,"message":"162","line":75,"column":8,"nodeType":"163","endLine":75,"endColumn":25,"suggestions":"164"},{"ruleId":"161","severity":1,"message":"165","line":92,"column":8,"nodeType":"163","endLine":92,"endColumn":21,"suggestions":"166"},{"ruleId":"155","replacedBy":"167"},{"ruleId":"168","severity":1,"message":"169","line":16,"column":11,"nodeType":"170","messageId":"171","endLine":16,"endColumn":17},{"ruleId":"161","severity":1,"message":"172","line":108,"column":8,"nodeType":"163","endLine":108,"endColumn":10,"suggestions":"173"},{"ruleId":"174","severity":1,"message":"175","line":225,"column":25,"nodeType":"159","endLine":225,"endColumn":90},{"ruleId":"161","severity":1,"message":"176","line":89,"column":8,"nodeType":"163","endLine":89,"endColumn":25,"suggestions":"177"},{"ruleId":"161","severity":1,"message":"178","line":121,"column":8,"nodeType":"163","endLine":121,"endColumn":46,"suggestions":"179"},{"ruleId":"161","severity":1,"message":"180","line":208,"column":8,"nodeType":"163","endLine":208,"endColumn":30,"suggestions":"181"},{"ruleId":"168","severity":1,"message":"182","line":2,"column":10,"nodeType":"170","messageId":"171","endLine":2,"endColumn":16},{"ruleId":"161","severity":1,"message":"165","line":116,"column":8,"nodeType":"163","endLine":116,"endColumn":25,"suggestions":"183"},{"ruleId":"161","severity":1,"message":"176","line":176,"column":8,"nodeType":"163","endLine":176,"endColumn":10,"suggestions":"184"},{"ruleId":"161","severity":1,"message":"185","line":207,"column":8,"nodeType":"163","endLine":207,"endColumn":29,"suggestions":"186"},{"ruleId":"174","severity":1,"message":"175","line":491,"column":37,"nodeType":"159","endLine":491,"endColumn":86},{"ruleId":"174","severity":1,"message":"175","line":495,"column":37,"nodeType":"159","endLine":495,"endColumn":91},{"ruleId":"174","severity":1,"message":"175","line":537,"column":45,"nodeType":"159","endLine":537,"endColumn":94},{"ruleId":"174","severity":1,"message":"175","line":545,"column":45,"nodeType":"159","endLine":545,"endColumn":99},"no-new-object",["187"],"react/jsx-pascal-case","Imported JSX component Home_Layout must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateUser'. Either include it or remove the dependency array.","ArrayExpression",["188"],"React Hook useEffect has a missing dependency: 'error'. Either include it or remove the dependency array.",["189"],["187"],"no-unused-vars","'userId' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'postId'. Either include it or remove the dependency array.",["190"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has missing dependencies: 'error' and 'userid'. Either include them or remove the dependency array.",["191"],"React Hook useEffect has missing dependencies: 'error' and 'userName'. Either include them or remove the dependency array.",["192"],"React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["193"],"'Button' is defined but never used.",["194"],["195"],"React Hook useEffect has missing dependencies: 'checkSpec', 'pointsUpdate', and 'updatePoints'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSpecIndex' needs the current value of 'pointsUpdate'.",["196"],"no-object-constructor",{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},"Update the dependencies array to be: [currentUser.uid, updateUser]",{"range":"215","text":"216"},"Update the dependencies array to be: [error, refreshData]",{"range":"217","text":"218"},"Update the dependencies array to be: [postId]",{"range":"219","text":"220"},"Update the dependencies array to be: [currentUser.uid, error, userid]",{"range":"221","text":"222"},"Update the dependencies array to be: [currentUser.uid, userid, refreshData, userName, error]",{"range":"223","text":"224"},"Update the dependencies array to be: [currentUserFollowing, userId]",{"range":"225","text":"226"},"Update the dependencies array to be: [currentUser.uid, error]",{"range":"227","text":"228"},"Update the dependencies array to be: [error, userid]",{"range":"229","text":"230"},"Update the dependencies array to be: [checkSpec, pointsUpdate, specData, specIndex, updatePoints]",{"range":"231","text":"232"},[2913,2930],"[currentUser.uid, updateUser]",[3742,3755],"[error, refreshData]",[3859,3861],"[postId]",[3691,3708],"[currentUser.uid, error, userid]",[5159,5197],"[currentUser.uid, userid, refreshData, userName, error]",[9184,9206],"[currentUserFollowing, userId]",[5129,5146],"[currentUser.uid, error]",[7870,7872],"[error, userid]",[9200,9221],"[checkSpec, pointsUpdate, specData, specIndex, updatePoints]"]